"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-eth-personal";
exports.ids = ["vendor-chunks/web3-eth-personal"];
exports.modules = {

/***/ "(api)/./src/pages/api/node_modules/web3-eth-personal/lib/commonjs/index.js":
/*!****************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth-personal/lib/commonjs/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * The `web3-eth-personal` package allows you to interact with the Ethereum nodeâ€™s accounts.\n *\n * **_NOTE:_**  Many of these functions send sensitive information like passwords. Never call these functions over a unsecured Websocket or HTTP provider, as your password will be sent in plain text!\n *\n * import Personal from 'web3-eth-personal';\n *\n * const personal = new Personal('http://localhost:8545');\n *\n * or using the web3 umbrella package\n *\n * import Personal from 'web3-eth-personal';\n * const web3 = new Web3('http://localhost:8545');\n * // web3.eth.personal\n */\n/**\n * This comment _supports3_ [Markdown](https://marked.js.org/)\n */\nconst personal_js_1 = __webpack_require__(/*! ./personal.js */ \"(api)/./src/pages/api/node_modules/web3-eth-personal/lib/commonjs/personal.js\");\n__exportStar(__webpack_require__(/*! ./personal.js */ \"(api)/./src/pages/api/node_modules/web3-eth-personal/lib/commonjs/personal.js\"), exports);\nexports[\"default\"] = personal_js_1.Personal;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1wZXJzb25hbC9saWIvY29tbW9uanMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLG9HQUFlO0FBQzdDLGFBQWEsbUJBQU8sQ0FBQyxvR0FBZTtBQUNwQyxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXNzdWVyX2hvbGRlcl92ZXJpZmllci8uL3NyYy9wYWdlcy9hcGkvbm9kZV9tb2R1bGVzL3dlYjMtZXRoLXBlcnNvbmFsL2xpYi9jb21tb25qcy9pbmRleC5qcz9hZmM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogVGhlIGB3ZWIzLWV0aC1wZXJzb25hbGAgcGFja2FnZSBhbGxvd3MgeW91IHRvIGludGVyYWN0IHdpdGggdGhlIEV0aGVyZXVtIG5vZGXigJlzIGFjY291bnRzLlxuICpcbiAqICoqX05PVEU6XyoqICBNYW55IG9mIHRoZXNlIGZ1bmN0aW9ucyBzZW5kIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbiBsaWtlIHBhc3N3b3Jkcy4gTmV2ZXIgY2FsbCB0aGVzZSBmdW5jdGlvbnMgb3ZlciBhIHVuc2VjdXJlZCBXZWJzb2NrZXQgb3IgSFRUUCBwcm92aWRlciwgYXMgeW91ciBwYXNzd29yZCB3aWxsIGJlIHNlbnQgaW4gcGxhaW4gdGV4dCFcbiAqXG4gKiBpbXBvcnQgUGVyc29uYWwgZnJvbSAnd2ViMy1ldGgtcGVyc29uYWwnO1xuICpcbiAqIGNvbnN0IHBlcnNvbmFsID0gbmV3IFBlcnNvbmFsKCdodHRwOi8vbG9jYWxob3N0Ojg1NDUnKTtcbiAqXG4gKiBvciB1c2luZyB0aGUgd2ViMyB1bWJyZWxsYSBwYWNrYWdlXG4gKlxuICogaW1wb3J0IFBlcnNvbmFsIGZyb20gJ3dlYjMtZXRoLXBlcnNvbmFsJztcbiAqIGNvbnN0IHdlYjMgPSBuZXcgV2ViMygnaHR0cDovL2xvY2FsaG9zdDo4NTQ1Jyk7XG4gKiAvLyB3ZWIzLmV0aC5wZXJzb25hbFxuICovXG4vKipcbiAqIFRoaXMgY29tbWVudCBfc3VwcG9ydHMzXyBbTWFya2Rvd25dKGh0dHBzOi8vbWFya2VkLmpzLm9yZy8pXG4gKi9cbmNvbnN0IHBlcnNvbmFsX2pzXzEgPSByZXF1aXJlKFwiLi9wZXJzb25hbC5qc1wiKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wZXJzb25hbC5qc1wiKSwgZXhwb3J0cyk7XG5leHBvcnRzLmRlZmF1bHQgPSBwZXJzb25hbF9qc18xLlBlcnNvbmFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth-personal/lib/commonjs/index.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth-personal/lib/commonjs/personal.js":
/*!*******************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth-personal/lib/commonjs/personal.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Personal = void 0;\nconst web3_core_1 = __webpack_require__(/*! web3-core */ \"(api)/./src/pages/api/node_modules/web3-core/lib/commonjs/index.js\");\nconst rpcWrappers = __importStar(__webpack_require__(/*! ./rpc_method_wrappers.js */ \"(api)/./src/pages/api/node_modules/web3-eth-personal/lib/commonjs/rpc_method_wrappers.js\"));\nclass Personal extends web3_core_1.Web3Context {\n    /**\n     *Returns a list of accounts the node controls by using the provider and calling the RPC method personal_listAccounts. Using `web3.eth.accounts.create()` will not add accounts into this list. For that use `web3.eth.personal.newAccount()`.\n     * @returns - An array of addresses controlled by the node.\n     * @example\n     * ```ts\n     *  const accounts = await personal.getAccounts();\n     * console.log(accounts);\n     * >\n     * [\n     * \t'0x79D7BbaC53C9aF700d0B250e9AE789E503Fcd6AE',\n     * \t'0xe2597eB05CF9a87eB1309e86750C903EC38E527e',\n     * \t'0x7eD0e85B8E1E925600B4373e6d108F34AB38a401',\n     * \t'0xE4bEEf667408b99053dC147Ed19592aDa0d77F59',\n     * \t'0x7AB80aeB6bb488B7f6c41c58e83Ef248eB39c882',\n     * \t'0x12B1D9d74d73b1C3A245B19C1C5501c653aF1af9',\n     * \t'0x1a6075A263Ee140e00Dbf8E374Fc5A443d097894',\n     * \t'0x4FEC0A51024B13030D26E70904B066C6d41157A5',\n     * \t'0x03095dc4857BB26f3a4550c5651Df8b7f6b6B1Ef',\n     * \t'0xac0B9b6e8A17991cb172B2ABAF45Fb5eb769E540'\n     * ]\n     * ```\n     */\n    getAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcWrappers.getAccounts(this.requestManager);\n        });\n    }\n    /**\n     * Creates a new account and returns its address.\n     * **_NOTE:_**  This function sends a sensitive information like password. Never call this function over a unsecured Websocket or HTTP provider, as your password will be sent in plain text!\n     * @param password - The password to encrypt the account with.\n     * @returns - The address of the new account.\n     * @example\n     * ```ts\n     * const addr = await web3.eth.personal.newAccount('password');\n     * console.log(addr);\n     * > '0x1234567891011121314151617181920212223456'\n     * ```\n     */\n    newAccount(password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcWrappers.newAccount(this.requestManager, password);\n        });\n    }\n    /**\n     * Unlocks an account for a given duration.\n     * @param address - The address of the account to unlock.\n     * @param password - The password of the account to unlock.\n     * @param unlockDuration - The duration in seconds to unlock the account for.\n     * @example\n     * ```ts\n     * await personal.unlockAccount(\n     * \t\"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\",\n     * \t\"123456\",\n     * \t600\n     * );\n     * ```\n     */\n    unlockAccount(address, password, unlockDuration) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcWrappers.unlockAccount(this.requestManager, address, password, unlockDuration);\n        });\n    }\n    /**\n     * Locks the given account\n     * @param address - The address of the account to lock.\n     * @returns - `true` if the account was locked, otherwise `false`.\n     * @example\n     * ```ts\n     * await personal.lockAccount(\n     * \t\"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\"\n     * );\n     */\n    lockAccount(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcWrappers.lockAccount(this.requestManager, address);\n        });\n    }\n    /**\n     * Imports the given private key into the key store, encrypting it with the passphrase.\n     * @param keyData - An unencrypted private key (hex string).\n     * @param passphrase  - The password of the account\n     * @returns - The address of the new account.\n     * @example\n     * ```ts\n     * const accountAddress = await personal.importRawKey(\n     * \t\"abe40cb08850da918ee951b237fa87946499b2d8643e4aa12b0610b050c731f6\",\n     * \t\"123456\"\n     * );\n     *\n     * console.log(unlockTx);\n     * > 0x8727a8b34ec833154b72b62cac05d69f86eb6556\n     * ```\n     */\n    importRawKey(keyData, passphrase) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcWrappers.importRawKey(this.requestManager, keyData, passphrase);\n        });\n    }\n    /**\n     * This method sends a transaction over the management API.\n     * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.\n     * @param tx - The transaction options\n     * @param passphrase - The passphrase of the current account\n     * @returns - The transaction hash\n     * @example\n     * ```ts\n     * const txHash = personal\n     * .sendTransaction({\n     *  \tfrom: \"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\",\n     * \tgasPrice: \"20000000000\",\n     * \tgas: \"21000\",\n     * \tto: \"0x3535353535353535353535353535353535353535\",\n     * \tvalue: \"1000000\",\n     * \tdata: \"\",\n     * \tnonce: 0,\n     * },\n     * \"123456\");\n     *\n     * console.log(txHash);\n     * > 0x9445325c3c5638c9fe425b003b8c32f03e9f99d409555a650a6838ba712bb51b\n     * ```\n     */\n    sendTransaction(tx, passphrase) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcWrappers.sendTransaction(this.requestManager, tx, passphrase);\n        });\n    }\n    /**\n     * Signs a transaction. This account needs to be unlocked.\n     * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.\n     * @param tx - The transaction data to sign. See {@link sendTransaction}  for more information.\n     * @param passphrase - The password of the `from` account, to sign the transaction with.\n     * @returns - The RLP encoded transaction. The `raw` property can be used to send the transaction using {@link sendSignedTransaction}.\n     * @example\n     * ```ts\n     * const tx = personal\n     * .signTransaction({\n     * \tfrom: \"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\",\n     * \tgasPrice: \"20000000000\",\n     * \tgas: \"21000\",\n     * \tto: \"0x3535353535353535353535353535353535353535\",\n     * \tvalue: \"1000000000000000000\",\n     * \tdata: \"\",\n     * \tnonce: 0,\n     * },\n     * \"123456\");\n     *\n     * console.log(tx);\n     *\n     * > {\n     * \traw: '0xf86e808504a817c800825208943535353535353535353535353535353535353535880de0b6b3a764000080820a95a0c951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526a038b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',\n     * \ttx: {\n     * \ttype: '0x0',\n     * \tnonce: '0x0',\n     * \tgasPrice: '0x4a817c800',\n     * \tmaxPriorityFeePerGas: null,\n     * \tmaxFeePerGas: null,\n     * \tgas: '0x5208',\n     * \tvalue: '0xde0b6b3a7640000',\n     * \tinput: '0x',\n     * \tv: '0xa95',\n     * \tr: '0xc951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526',\n     * \ts: '0x38b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',\n     * \tto: '0x3535353535353535353535353535353535353535',\n     * \thash: '0x65e3df790ab2a32068b13cff970b26445b8995229ae4abbed61bd996f09fce69'\n     * \t}\n     * }\n     * ```\n     */\n    signTransaction(tx, passphrase) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcWrappers.signTransaction(this.requestManager, tx, passphrase);\n        });\n    }\n    /**\n     * Calculates an Ethereum specific signature with:\n     * sign(keccak256(\"\\x19Ethereum Signed Message:\\n\" + dataToSign.length + dataToSign)))\n     * Adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature.\n     *\n     * If you have the original message and the signed message, you can discover the signing account address using web3.eth.personal.ecRecover\n     * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.\n     * @param data - The data to sign.\n     * @param address - The address to sign with.\n     * @param passphrase - The passphrase to decrypt the account with.\n     * @returns - The signature.\n     * @example\n     * ```ts\n     * const sig = await personal .sign(\"Hello world\", \"0x0D4Aa485ECbC499c70860fEb7e5AaeAf5fd8172E\", \"123456\")\n     * console.log(sig)\n     * > 0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b\n     * ```\n     */\n    sign(data, address, passphrase) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcWrappers.sign(this.requestManager, data, address, passphrase);\n        });\n    }\n    /**\n     * Recovers the account that signed the data.\n     * @param signedData - Data that was signed. If String it will be converted using {@link utf8ToHex}\n     * @param signature - The signature\n     * @returns - The address of the account that signed the data.\n     * @example\n     * ```ts\n     *  const address = await personal.ecRecover(\n     * \t\"Hello world\",\n     * \t\"0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b\"\n     * );\n     * console.log(address);\n     * > 0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e\n     * ```\n     */\n    ecRecover(signedData, signature) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcWrappers.ecRecover(this.requestManager, signedData, signature);\n        });\n    }\n}\nexports.Personal = Personal;\n//# sourceMappingURL=personal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth-personal/lib/commonjs/personal.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth-personal/lib/commonjs/rpc_method_wrappers.js":
/*!******************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth-personal/lib/commonjs/rpc_method_wrappers.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ecRecover = exports.sign = exports.signTransaction = exports.sendTransaction = exports.importRawKey = exports.lockAccount = exports.unlockAccount = exports.newAccount = exports.getAccounts = void 0;\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst web3_eth_1 = __webpack_require__(/*! web3-eth */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/index.js\");\nconst web3_types_1 = __webpack_require__(/*! web3-types */ \"(api)/./src/pages/api/node_modules/web3-types/lib/commonjs/index.js\");\nconst web3_validator_1 = __webpack_require__(/*! web3-validator */ \"(api)/./src/pages/api/node_modules/web3-validator/lib/commonjs/index.js\");\nconst web3_rpc_methods_1 = __webpack_require__(/*! web3-rpc-methods */ \"(api)/./src/pages/api/node_modules/web3-rpc-methods/lib/commonjs/index.js\");\nconst getAccounts = (requestManager) => __awaiter(void 0, void 0, void 0, function* () {\n    const result = yield web3_rpc_methods_1.personalRpcMethods.getAccounts(requestManager);\n    return result.map(web3_utils_1.toChecksumAddress);\n});\nexports.getAccounts = getAccounts;\nconst newAccount = (requestManager, password) => __awaiter(void 0, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['string'], [password]);\n    const result = yield web3_rpc_methods_1.personalRpcMethods.newAccount(requestManager, password);\n    return (0, web3_utils_1.toChecksumAddress)(result);\n});\nexports.newAccount = newAccount;\nconst unlockAccount = (requestManager, address, password, unlockDuration) => __awaiter(void 0, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address', 'string', 'uint'], [address, password, unlockDuration]);\n    return web3_rpc_methods_1.personalRpcMethods.unlockAccount(requestManager, address, password, unlockDuration);\n});\nexports.unlockAccount = unlockAccount;\nconst lockAccount = (requestManager, address) => __awaiter(void 0, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address'], [address]);\n    return web3_rpc_methods_1.personalRpcMethods.lockAccount(requestManager, address);\n});\nexports.lockAccount = lockAccount;\nconst importRawKey = (requestManager, keyData, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['string', 'string'], [keyData, passphrase]);\n    return web3_rpc_methods_1.personalRpcMethods.importRawKey(requestManager, keyData, passphrase);\n});\nexports.importRawKey = importRawKey;\nconst sendTransaction = (requestManager, tx, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n    const formattedTx = (0, web3_eth_1.formatTransaction)(tx, web3_types_1.ETH_DATA_FORMAT);\n    return web3_rpc_methods_1.personalRpcMethods.sendTransaction(requestManager, formattedTx, passphrase);\n});\nexports.sendTransaction = sendTransaction;\nconst signTransaction = (requestManager, tx, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n    const formattedTx = (0, web3_eth_1.formatTransaction)(tx, web3_types_1.ETH_DATA_FORMAT);\n    return web3_rpc_methods_1.personalRpcMethods.signTransaction(requestManager, formattedTx, passphrase);\n});\nexports.signTransaction = signTransaction;\nconst sign = (requestManager, data, address, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['string', 'address', 'string'], [data, address, passphrase]);\n    const dataToSign = (0, web3_validator_1.isHexStrict)(data) ? data : (0, web3_utils_1.utf8ToHex)(data);\n    return web3_rpc_methods_1.personalRpcMethods.sign(requestManager, dataToSign, address, passphrase);\n});\nexports.sign = sign;\nconst ecRecover = (requestManager, signedData, signature) => __awaiter(void 0, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['string', 'string'], [signedData, signature]);\n    const signedDataString = (0, web3_validator_1.isHexStrict)(signedData) ? signedData : (0, web3_utils_1.utf8ToHex)(signedData);\n    return web3_rpc_methods_1.personalRpcMethods.ecRecover(requestManager, signedDataString, signature);\n});\nexports.ecRecover = ecRecover;\n//# sourceMappingURL=rpc_method_wrappers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1wZXJzb25hbC9saWIvY29tbW9uanMvcnBjX21ldGhvZF93cmFwcGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsWUFBWSxHQUFHLHVCQUF1QixHQUFHLHVCQUF1QixHQUFHLG9CQUFvQixHQUFHLG1CQUFtQixHQUFHLHFCQUFxQixHQUFHLGtCQUFrQixHQUFHLG1CQUFtQjtBQUNwTSxxQkFBcUIsbUJBQU8sQ0FBQyx1RkFBWTtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyxtRkFBVTtBQUNyQyxxQkFBcUIsbUJBQU8sQ0FBQyx1RkFBWTtBQUN6Qyx5QkFBeUIsbUJBQU8sQ0FBQywrRkFBZ0I7QUFDakQsMkJBQTJCLG1CQUFPLENBQUMsbUdBQWtCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXNzdWVyX2hvbGRlcl92ZXJpZmllci8uL3NyYy9wYWdlcy9hcGkvbm9kZV9tb2R1bGVzL3dlYjMtZXRoLXBlcnNvbmFsL2xpYi9jb21tb25qcy9ycGNfbWV0aG9kX3dyYXBwZXJzLmpzP2ZmM2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZWNSZWNvdmVyID0gZXhwb3J0cy5zaWduID0gZXhwb3J0cy5zaWduVHJhbnNhY3Rpb24gPSBleHBvcnRzLnNlbmRUcmFuc2FjdGlvbiA9IGV4cG9ydHMuaW1wb3J0UmF3S2V5ID0gZXhwb3J0cy5sb2NrQWNjb3VudCA9IGV4cG9ydHMudW5sb2NrQWNjb3VudCA9IGV4cG9ydHMubmV3QWNjb3VudCA9IGV4cG9ydHMuZ2V0QWNjb3VudHMgPSB2b2lkIDA7XG5jb25zdCB3ZWIzX3V0aWxzXzEgPSByZXF1aXJlKFwid2ViMy11dGlsc1wiKTtcbmNvbnN0IHdlYjNfZXRoXzEgPSByZXF1aXJlKFwid2ViMy1ldGhcIik7XG5jb25zdCB3ZWIzX3R5cGVzXzEgPSByZXF1aXJlKFwid2ViMy10eXBlc1wiKTtcbmNvbnN0IHdlYjNfdmFsaWRhdG9yXzEgPSByZXF1aXJlKFwid2ViMy12YWxpZGF0b3JcIik7XG5jb25zdCB3ZWIzX3JwY19tZXRob2RzXzEgPSByZXF1aXJlKFwid2ViMy1ycGMtbWV0aG9kc1wiKTtcbmNvbnN0IGdldEFjY291bnRzID0gKHJlcXVlc3RNYW5hZ2VyKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICBjb25zdCByZXN1bHQgPSB5aWVsZCB3ZWIzX3JwY19tZXRob2RzXzEucGVyc29uYWxScGNNZXRob2RzLmdldEFjY291bnRzKHJlcXVlc3RNYW5hZ2VyKTtcbiAgICByZXR1cm4gcmVzdWx0Lm1hcCh3ZWIzX3V0aWxzXzEudG9DaGVja3N1bUFkZHJlc3MpO1xufSk7XG5leHBvcnRzLmdldEFjY291bnRzID0gZ2V0QWNjb3VudHM7XG5jb25zdCBuZXdBY2NvdW50ID0gKHJlcXVlc3RNYW5hZ2VyLCBwYXNzd29yZCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgd2ViM192YWxpZGF0b3JfMS52YWxpZGF0b3IudmFsaWRhdGUoWydzdHJpbmcnXSwgW3Bhc3N3b3JkXSk7XG4gICAgY29uc3QgcmVzdWx0ID0geWllbGQgd2ViM19ycGNfbWV0aG9kc18xLnBlcnNvbmFsUnBjTWV0aG9kcy5uZXdBY2NvdW50KHJlcXVlc3RNYW5hZ2VyLCBwYXNzd29yZCk7XG4gICAgcmV0dXJuICgwLCB3ZWIzX3V0aWxzXzEudG9DaGVja3N1bUFkZHJlc3MpKHJlc3VsdCk7XG59KTtcbmV4cG9ydHMubmV3QWNjb3VudCA9IG5ld0FjY291bnQ7XG5jb25zdCB1bmxvY2tBY2NvdW50ID0gKHJlcXVlc3RNYW5hZ2VyLCBhZGRyZXNzLCBwYXNzd29yZCwgdW5sb2NrRHVyYXRpb24pID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIHdlYjNfdmFsaWRhdG9yXzEudmFsaWRhdG9yLnZhbGlkYXRlKFsnYWRkcmVzcycsICdzdHJpbmcnLCAndWludCddLCBbYWRkcmVzcywgcGFzc3dvcmQsIHVubG9ja0R1cmF0aW9uXSk7XG4gICAgcmV0dXJuIHdlYjNfcnBjX21ldGhvZHNfMS5wZXJzb25hbFJwY01ldGhvZHMudW5sb2NrQWNjb3VudChyZXF1ZXN0TWFuYWdlciwgYWRkcmVzcywgcGFzc3dvcmQsIHVubG9ja0R1cmF0aW9uKTtcbn0pO1xuZXhwb3J0cy51bmxvY2tBY2NvdW50ID0gdW5sb2NrQWNjb3VudDtcbmNvbnN0IGxvY2tBY2NvdW50ID0gKHJlcXVlc3RNYW5hZ2VyLCBhZGRyZXNzKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICB3ZWIzX3ZhbGlkYXRvcl8xLnZhbGlkYXRvci52YWxpZGF0ZShbJ2FkZHJlc3MnXSwgW2FkZHJlc3NdKTtcbiAgICByZXR1cm4gd2ViM19ycGNfbWV0aG9kc18xLnBlcnNvbmFsUnBjTWV0aG9kcy5sb2NrQWNjb3VudChyZXF1ZXN0TWFuYWdlciwgYWRkcmVzcyk7XG59KTtcbmV4cG9ydHMubG9ja0FjY291bnQgPSBsb2NrQWNjb3VudDtcbmNvbnN0IGltcG9ydFJhd0tleSA9IChyZXF1ZXN0TWFuYWdlciwga2V5RGF0YSwgcGFzc3BocmFzZSkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgd2ViM192YWxpZGF0b3JfMS52YWxpZGF0b3IudmFsaWRhdGUoWydzdHJpbmcnLCAnc3RyaW5nJ10sIFtrZXlEYXRhLCBwYXNzcGhyYXNlXSk7XG4gICAgcmV0dXJuIHdlYjNfcnBjX21ldGhvZHNfMS5wZXJzb25hbFJwY01ldGhvZHMuaW1wb3J0UmF3S2V5KHJlcXVlc3RNYW5hZ2VyLCBrZXlEYXRhLCBwYXNzcGhyYXNlKTtcbn0pO1xuZXhwb3J0cy5pbXBvcnRSYXdLZXkgPSBpbXBvcnRSYXdLZXk7XG5jb25zdCBzZW5kVHJhbnNhY3Rpb24gPSAocmVxdWVzdE1hbmFnZXIsIHR4LCBwYXNzcGhyYXNlKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICBjb25zdCBmb3JtYXR0ZWRUeCA9ICgwLCB3ZWIzX2V0aF8xLmZvcm1hdFRyYW5zYWN0aW9uKSh0eCwgd2ViM190eXBlc18xLkVUSF9EQVRBX0ZPUk1BVCk7XG4gICAgcmV0dXJuIHdlYjNfcnBjX21ldGhvZHNfMS5wZXJzb25hbFJwY01ldGhvZHMuc2VuZFRyYW5zYWN0aW9uKHJlcXVlc3RNYW5hZ2VyLCBmb3JtYXR0ZWRUeCwgcGFzc3BocmFzZSk7XG59KTtcbmV4cG9ydHMuc2VuZFRyYW5zYWN0aW9uID0gc2VuZFRyYW5zYWN0aW9uO1xuY29uc3Qgc2lnblRyYW5zYWN0aW9uID0gKHJlcXVlc3RNYW5hZ2VyLCB0eCwgcGFzc3BocmFzZSkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgY29uc3QgZm9ybWF0dGVkVHggPSAoMCwgd2ViM19ldGhfMS5mb3JtYXRUcmFuc2FjdGlvbikodHgsIHdlYjNfdHlwZXNfMS5FVEhfREFUQV9GT1JNQVQpO1xuICAgIHJldHVybiB3ZWIzX3JwY19tZXRob2RzXzEucGVyc29uYWxScGNNZXRob2RzLnNpZ25UcmFuc2FjdGlvbihyZXF1ZXN0TWFuYWdlciwgZm9ybWF0dGVkVHgsIHBhc3NwaHJhc2UpO1xufSk7XG5leHBvcnRzLnNpZ25UcmFuc2FjdGlvbiA9IHNpZ25UcmFuc2FjdGlvbjtcbmNvbnN0IHNpZ24gPSAocmVxdWVzdE1hbmFnZXIsIGRhdGEsIGFkZHJlc3MsIHBhc3NwaHJhc2UpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIHdlYjNfdmFsaWRhdG9yXzEudmFsaWRhdG9yLnZhbGlkYXRlKFsnc3RyaW5nJywgJ2FkZHJlc3MnLCAnc3RyaW5nJ10sIFtkYXRhLCBhZGRyZXNzLCBwYXNzcGhyYXNlXSk7XG4gICAgY29uc3QgZGF0YVRvU2lnbiA9ICgwLCB3ZWIzX3ZhbGlkYXRvcl8xLmlzSGV4U3RyaWN0KShkYXRhKSA/IGRhdGEgOiAoMCwgd2ViM191dGlsc18xLnV0ZjhUb0hleCkoZGF0YSk7XG4gICAgcmV0dXJuIHdlYjNfcnBjX21ldGhvZHNfMS5wZXJzb25hbFJwY01ldGhvZHMuc2lnbihyZXF1ZXN0TWFuYWdlciwgZGF0YVRvU2lnbiwgYWRkcmVzcywgcGFzc3BocmFzZSk7XG59KTtcbmV4cG9ydHMuc2lnbiA9IHNpZ247XG5jb25zdCBlY1JlY292ZXIgPSAocmVxdWVzdE1hbmFnZXIsIHNpZ25lZERhdGEsIHNpZ25hdHVyZSkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgd2ViM192YWxpZGF0b3JfMS52YWxpZGF0b3IudmFsaWRhdGUoWydzdHJpbmcnLCAnc3RyaW5nJ10sIFtzaWduZWREYXRhLCBzaWduYXR1cmVdKTtcbiAgICBjb25zdCBzaWduZWREYXRhU3RyaW5nID0gKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNIZXhTdHJpY3QpKHNpZ25lZERhdGEpID8gc2lnbmVkRGF0YSA6ICgwLCB3ZWIzX3V0aWxzXzEudXRmOFRvSGV4KShzaWduZWREYXRhKTtcbiAgICByZXR1cm4gd2ViM19ycGNfbWV0aG9kc18xLnBlcnNvbmFsUnBjTWV0aG9kcy5lY1JlY292ZXIocmVxdWVzdE1hbmFnZXIsIHNpZ25lZERhdGFTdHJpbmcsIHNpZ25hdHVyZSk7XG59KTtcbmV4cG9ydHMuZWNSZWNvdmVyID0gZWNSZWNvdmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnBjX21ldGhvZF93cmFwcGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth-personal/lib/commonjs/rpc_method_wrappers.js\n");

/***/ })

};
;