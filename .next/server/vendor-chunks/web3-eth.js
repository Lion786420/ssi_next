"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-eth";
exports.ids = ["vendor-chunks/web3-eth"];
exports.modules = {

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/constants.js":
/*!***********************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/constants.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NUMBER_DATA_FORMAT = exports.ALL_EVENTS_ABI = exports.ALL_EVENTS = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst web3_types_1 = __webpack_require__(/*! web3-types */ \"(api)/./src/pages/api/node_modules/web3-types/lib/commonjs/index.js\");\nexports.ALL_EVENTS = 'ALLEVENTS';\nexports.ALL_EVENTS_ABI = {\n    name: exports.ALL_EVENTS,\n    signature: '',\n    type: 'event',\n    inputs: [],\n};\nexports.NUMBER_DATA_FORMAT = { bytes: web3_types_1.FMT_BYTES.HEX, number: web3_types_1.FMT_NUMBER.NUMBER };\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixHQUFHLHNCQUFzQixHQUFHLGtCQUFrQjtBQUN4RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsdUZBQVk7QUFDekMsa0JBQWtCO0FBQ2xCLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLEtBQUs7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pc3N1ZXJfaG9sZGVyX3ZlcmlmaWVyLy4vc3JjL3BhZ2VzL2FwaS9ub2RlX21vZHVsZXMvd2ViMy1ldGgvbGliL2NvbW1vbmpzL2NvbnN0YW50cy5qcz9hYTJhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5OVU1CRVJfREFUQV9GT1JNQVQgPSBleHBvcnRzLkFMTF9FVkVOVFNfQUJJID0gZXhwb3J0cy5BTExfRVZFTlRTID0gdm9pZCAwO1xuLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG5jb25zdCB3ZWIzX3R5cGVzXzEgPSByZXF1aXJlKFwid2ViMy10eXBlc1wiKTtcbmV4cG9ydHMuQUxMX0VWRU5UUyA9ICdBTExFVkVOVFMnO1xuZXhwb3J0cy5BTExfRVZFTlRTX0FCSSA9IHtcbiAgICBuYW1lOiBleHBvcnRzLkFMTF9FVkVOVFMsXG4gICAgc2lnbmF0dXJlOiAnJyxcbiAgICB0eXBlOiAnZXZlbnQnLFxuICAgIGlucHV0czogW10sXG59O1xuZXhwb3J0cy5OVU1CRVJfREFUQV9GT1JNQVQgPSB7IGJ5dGVzOiB3ZWIzX3R5cGVzXzEuRk1UX0JZVEVTLkhFWCwgbnVtYmVyOiB3ZWIzX3R5cGVzXzEuRk1UX05VTUJFUi5OVU1CRVIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/constants.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/index.js":
/*!*******************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.transactionBuilder = exports.detectTransactionType = void 0;\n/**\n * The `web3-eth` package allows you to interact with an Ethereum blockchain and Ethereum smart contracts.\n *\n * To use this package standalone and use its methods use:\n * ```ts\n * import { Web3Context } from 'web3-core';\n * import { BlockTags } from 'web3-types';\n * import { DEFAULT_RETURN_FORMAT } from 'web3-types';\n * import { getBalance} from 'web3-eth';\n *\n * getBalance(\n *      new Web3Context('http://127.0.0.1:8545'),\n *      '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n *      BlockTags.LATEST,\n *      DEFAULT_RETURN_FORMAT\n * ).then(console.log);\n * > 1000000000000n\n * ```\n *\n * To use this package within the `web3` object use:\n * ```ts\n * import Web3 from 'web3';\n *\n * const web3 = new Web3(Web3.givenProvider || 'ws://some.local-or-remote.node:8546');\n * web3.eth.getBalance('0x407d73d8a49eeb85d32cf465507dd71d507100c1').then(console.log);\n * > 1000000000000n\n *```\n *\n * With `web3-eth` you can also subscribe (if supported by provider) to events in the Ethereum Blockchain, using the `subscribe` function. See more at the {@link Web3Eth.subscribe} function.\n */\n/**\n *\n */\n__webpack_require__(/*! setimmediate */ \"(api)/./node_modules/next/dist/compiled/setimmediate/setImmediate.js\");\nconst web3_eth_js_1 = __webpack_require__(/*! ./web3_eth.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/web3_eth.js\");\n__exportStar(__webpack_require__(/*! ./web3_eth.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/web3_eth.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils/decoding.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/decoding.js\"), exports);\n__exportStar(__webpack_require__(/*! ./schemas.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/schemas.js\"), exports);\n__exportStar(__webpack_require__(/*! ./constants.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/constants.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./validation.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/validation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./rpc_method_wrappers.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/rpc_method_wrappers.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils/format_transaction.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/format_transaction.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils/prepare_transaction_for_signing.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/prepare_transaction_for_signing.js\"), exports);\n__exportStar(__webpack_require__(/*! ./web3_subscriptions.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/web3_subscriptions.js\"), exports);\nvar detect_transaction_type_js_1 = __webpack_require__(/*! ./utils/detect_transaction_type.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/detect_transaction_type.js\");\nObject.defineProperty(exports, \"detectTransactionType\", ({ enumerable: true, get: function () { return detect_transaction_type_js_1.detectTransactionType; } }));\nvar transaction_builder_js_1 = __webpack_require__(/*! ./utils/transaction_builder.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/transaction_builder.js\");\nObject.defineProperty(exports, \"transactionBuilder\", ({ enumerable: true, get: function () { return transaction_builder_js_1.transactionBuilder; } }));\nexports[\"default\"] = web3_eth_js_1.Web3Eth;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixHQUFHLDZCQUE2QjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCLFlBQVksWUFBWTtBQUN4QixZQUFZLHdCQUF3QjtBQUNwQyxZQUFZLFlBQVk7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0SkFBNEoseUJBQXlCO0FBQ3JMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQU8sQ0FBQywwRkFBYztBQUN0QixzQkFBc0IsbUJBQU8sQ0FBQywyRkFBZTtBQUM3QyxhQUFhLG1CQUFPLENBQUMsMkZBQWU7QUFDcEMsYUFBYSxtQkFBTyxDQUFDLHVHQUFxQjtBQUMxQyxhQUFhLG1CQUFPLENBQUMseUZBQWM7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLDZGQUFnQjtBQUNyQyxhQUFhLG1CQUFPLENBQUMscUZBQVk7QUFDakMsYUFBYSxtQkFBTyxDQUFDLCtGQUFpQjtBQUN0QyxhQUFhLG1CQUFPLENBQUMsaUhBQTBCO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQywySEFBK0I7QUFDcEQsYUFBYSxtQkFBTyxDQUFDLHFKQUE0QztBQUNqRSxhQUFhLG1CQUFPLENBQUMsK0dBQXlCO0FBQzlDLG1DQUFtQyxtQkFBTyxDQUFDLHFJQUFvQztBQUMvRSx5REFBd0QsRUFBRSxxQ0FBcUMsOERBQThELEVBQUM7QUFDOUosK0JBQStCLG1CQUFPLENBQUMsNkhBQWdDO0FBQ3ZFLHNEQUFxRCxFQUFFLHFDQUFxQyx1REFBdUQsRUFBQztBQUNwSixrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXNzdWVyX2hvbGRlcl92ZXJpZmllci8uL3NyYy9wYWdlcy9hcGkvbm9kZV9tb2R1bGVzL3dlYjMtZXRoL2xpYi9jb21tb25qcy9pbmRleC5qcz83YjRmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudHJhbnNhY3Rpb25CdWlsZGVyID0gZXhwb3J0cy5kZXRlY3RUcmFuc2FjdGlvblR5cGUgPSB2b2lkIDA7XG4vKipcbiAqIFRoZSBgd2ViMy1ldGhgIHBhY2thZ2UgYWxsb3dzIHlvdSB0byBpbnRlcmFjdCB3aXRoIGFuIEV0aGVyZXVtIGJsb2NrY2hhaW4gYW5kIEV0aGVyZXVtIHNtYXJ0IGNvbnRyYWN0cy5cbiAqXG4gKiBUbyB1c2UgdGhpcyBwYWNrYWdlIHN0YW5kYWxvbmUgYW5kIHVzZSBpdHMgbWV0aG9kcyB1c2U6XG4gKiBgYGB0c1xuICogaW1wb3J0IHsgV2ViM0NvbnRleHQgfSBmcm9tICd3ZWIzLWNvcmUnO1xuICogaW1wb3J0IHsgQmxvY2tUYWdzIH0gZnJvbSAnd2ViMy10eXBlcyc7XG4gKiBpbXBvcnQgeyBERUZBVUxUX1JFVFVSTl9GT1JNQVQgfSBmcm9tICd3ZWIzLXR5cGVzJztcbiAqIGltcG9ydCB7IGdldEJhbGFuY2V9IGZyb20gJ3dlYjMtZXRoJztcbiAqXG4gKiBnZXRCYWxhbmNlKFxuICogICAgICBuZXcgV2ViM0NvbnRleHQoJ2h0dHA6Ly8xMjcuMC4wLjE6ODU0NScpLFxuICogICAgICAnMHg0MDdkNzNkOGE0OWVlYjg1ZDMyY2Y0NjU1MDdkZDcxZDUwNzEwMGMxJyxcbiAqICAgICAgQmxvY2tUYWdzLkxBVEVTVCxcbiAqICAgICAgREVGQVVMVF9SRVRVUk5fRk9STUFUXG4gKiApLnRoZW4oY29uc29sZS5sb2cpO1xuICogPiAxMDAwMDAwMDAwMDAwblxuICogYGBgXG4gKlxuICogVG8gdXNlIHRoaXMgcGFja2FnZSB3aXRoaW4gdGhlIGB3ZWIzYCBvYmplY3QgdXNlOlxuICogYGBgdHNcbiAqIGltcG9ydCBXZWIzIGZyb20gJ3dlYjMnO1xuICpcbiAqIGNvbnN0IHdlYjMgPSBuZXcgV2ViMyhXZWIzLmdpdmVuUHJvdmlkZXIgfHwgJ3dzOi8vc29tZS5sb2NhbC1vci1yZW1vdGUubm9kZTo4NTQ2Jyk7XG4gKiB3ZWIzLmV0aC5nZXRCYWxhbmNlKCcweDQwN2Q3M2Q4YTQ5ZWViODVkMzJjZjQ2NTUwN2RkNzFkNTA3MTAwYzEnKS50aGVuKGNvbnNvbGUubG9nKTtcbiAqID4gMTAwMDAwMDAwMDAwMG5cbiAqYGBgXG4gKlxuICogV2l0aCBgd2ViMy1ldGhgIHlvdSBjYW4gYWxzbyBzdWJzY3JpYmUgKGlmIHN1cHBvcnRlZCBieSBwcm92aWRlcikgdG8gZXZlbnRzIGluIHRoZSBFdGhlcmV1bSBCbG9ja2NoYWluLCB1c2luZyB0aGUgYHN1YnNjcmliZWAgZnVuY3Rpb24uIFNlZSBtb3JlIGF0IHRoZSB7QGxpbmsgV2ViM0V0aC5zdWJzY3JpYmV9IGZ1bmN0aW9uLlxuICovXG4vKipcbiAqXG4gKi9cbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG5jb25zdCB3ZWIzX2V0aF9qc18xID0gcmVxdWlyZShcIi4vd2ViM19ldGguanNcIik7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vd2ViM19ldGguanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzL2RlY29kaW5nLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zY2hlbWFzLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25zdGFudHMuanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi92YWxpZGF0aW9uLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ycGNfbWV0aG9kX3dyYXBwZXJzLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91dGlscy9mb3JtYXRfdHJhbnNhY3Rpb24uanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzL3ByZXBhcmVfdHJhbnNhY3Rpb25fZm9yX3NpZ25pbmcuanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3dlYjNfc3Vic2NyaXB0aW9ucy5qc1wiKSwgZXhwb3J0cyk7XG52YXIgZGV0ZWN0X3RyYW5zYWN0aW9uX3R5cGVfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL2RldGVjdF90cmFuc2FjdGlvbl90eXBlLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGV0ZWN0VHJhbnNhY3Rpb25UeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZXRlY3RfdHJhbnNhY3Rpb25fdHlwZV9qc18xLmRldGVjdFRyYW5zYWN0aW9uVHlwZTsgfSB9KTtcbnZhciB0cmFuc2FjdGlvbl9idWlsZGVyX2pzXzEgPSByZXF1aXJlKFwiLi91dGlscy90cmFuc2FjdGlvbl9idWlsZGVyLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidHJhbnNhY3Rpb25CdWlsZGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cmFuc2FjdGlvbl9idWlsZGVyX2pzXzEudHJhbnNhY3Rpb25CdWlsZGVyOyB9IH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gd2ViM19ldGhfanNfMS5XZWIzRXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/index.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/rpc_method_wrappers.js":
/*!*********************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/rpc_method_wrappers.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.signTypedData = exports.createAccessList = exports.getFeeHistory = exports.getProof = exports.getChainId = exports.getLogs = exports.estimateGas = exports.call = exports.signTransaction = exports.sign = exports.sendSignedTransaction = exports.sendTransaction = exports.getTransactionCount = exports.getTransactionReceipt = exports.getTransactionFromBlock = exports.getPendingTransactions = exports.getTransaction = exports.getUncle = exports.getBlockUncleCount = exports.getBlockTransactionCount = exports.getBlock = exports.getCode = exports.getStorageAt = exports.getBalance = exports.getBlockNumber = exports.getGasPrice = exports.getHashRate = exports.isMining = exports.getCoinbase = exports.isSyncing = exports.getProtocolVersion = void 0;\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nconst web3_types_1 = __webpack_require__(/*! web3-types */ \"(api)/./src/pages/api/node_modules/web3-types/lib/commonjs/index.js\");\nconst web3_core_1 = __webpack_require__(/*! web3-core */ \"(api)/./src/pages/api/node_modules/web3-core/lib/commonjs/index.js\");\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst web3_eth_accounts_1 = __webpack_require__(/*! web3-eth-accounts */ \"(api)/./src/pages/api/node_modules/web3-eth-accounts/lib/commonjs/index.js\");\nconst web3_validator_1 = __webpack_require__(/*! web3-validator */ \"(api)/./src/pages/api/node_modules/web3-validator/lib/commonjs/index.js\");\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\nconst web3_rpc_methods_1 = __webpack_require__(/*! web3-rpc-methods */ \"(api)/./src/pages/api/node_modules/web3-rpc-methods/lib/commonjs/index.js\");\nconst decode_signed_transaction_js_1 = __webpack_require__(/*! ./utils/decode_signed_transaction.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/decode_signed_transaction.js\");\nconst schemas_js_1 = __webpack_require__(/*! ./schemas.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/schemas.js\");\n// eslint-disable-next-line import/no-cycle\nconst transaction_builder_js_1 = __webpack_require__(/*! ./utils/transaction_builder.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/transaction_builder.js\");\nconst format_transaction_js_1 = __webpack_require__(/*! ./utils/format_transaction.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/format_transaction.js\");\n// eslint-disable-next-line import/no-cycle\nconst try_send_transaction_js_1 = __webpack_require__(/*! ./utils/try_send_transaction.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/try_send_transaction.js\");\n// eslint-disable-next-line import/no-cycle\nconst wait_for_transaction_receipt_js_1 = __webpack_require__(/*! ./utils/wait_for_transaction_receipt.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/wait_for_transaction_receipt.js\");\nconst constants_js_1 = __webpack_require__(/*! ./constants.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/constants.js\");\n// eslint-disable-next-line import/no-cycle\nconst send_tx_helper_js_1 = __webpack_require__(/*! ./utils/send_tx_helper.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/send_tx_helper.js\");\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst getProtocolVersion = (web3Context) => __awaiter(void 0, void 0, void 0, function* () { return web3_rpc_methods_1.ethRpcMethods.getProtocolVersion(web3Context.requestManager); });\nexports.getProtocolVersion = getProtocolVersion;\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst isSyncing = (web3Context) => __awaiter(void 0, void 0, void 0, function* () { return web3_rpc_methods_1.ethRpcMethods.getSyncing(web3Context.requestManager); });\nexports.isSyncing = isSyncing;\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst getCoinbase = (web3Context) => __awaiter(void 0, void 0, void 0, function* () { return web3_rpc_methods_1.ethRpcMethods.getCoinbase(web3Context.requestManager); });\nexports.getCoinbase = getCoinbase;\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst isMining = (web3Context) => __awaiter(void 0, void 0, void 0, function* () { return web3_rpc_methods_1.ethRpcMethods.getMining(web3Context.requestManager); });\nexports.isMining = isMining;\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getHashRate(web3Context, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getHashRate(web3Context.requestManager);\n        return (0, web3_utils_1.format)({ format: 'uint' }, response, returnFormat);\n    });\n}\nexports.getHashRate = getHashRate;\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getGasPrice(web3Context, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getGasPrice(web3Context.requestManager);\n        return (0, web3_utils_1.format)({ format: 'uint' }, response, returnFormat);\n    });\n}\nexports.getGasPrice = getGasPrice;\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlockNumber(web3Context, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getBlockNumber(web3Context.requestManager);\n        return (0, web3_utils_1.format)({ format: 'uint' }, response, returnFormat);\n    });\n}\nexports.getBlockNumber = getBlockNumber;\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBalance(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber)\n            ? blockNumber\n            : (0, web3_utils_1.format)({ format: 'uint' }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getBalance(web3Context.requestManager, address, blockNumberFormatted);\n        return (0, web3_utils_1.format)({ format: 'uint' }, response, returnFormat);\n    });\n}\nexports.getBalance = getBalance;\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getStorageAt(web3Context, address, storageSlot, blockNumber = web3Context.defaultBlock, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const storageSlotFormatted = (0, web3_utils_1.format)({ format: 'uint' }, storageSlot, web3_types_1.ETH_DATA_FORMAT);\n        const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber)\n            ? blockNumber\n            : (0, web3_utils_1.format)({ format: 'uint' }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);\n        return (0, web3_utils_1.format)({ format: 'bytes' }, response, returnFormat);\n    });\n}\nexports.getStorageAt = getStorageAt;\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getCode(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber)\n            ? blockNumber\n            : (0, web3_utils_1.format)({ format: 'uint' }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getCode(web3Context.requestManager, address, blockNumberFormatted);\n        return (0, web3_utils_1.format)({ format: 'bytes' }, response, returnFormat);\n    });\n}\nexports.getCode = getCode;\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlock(web3Context, block = web3Context.defaultBlock, hydrated = false, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let response;\n        if ((0, web3_validator_1.isBytes)(block)) {\n            const blockHashFormatted = (0, web3_utils_1.format)({ format: 'bytes32' }, block, web3_types_1.ETH_DATA_FORMAT);\n            response = yield web3_rpc_methods_1.ethRpcMethods.getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);\n        }\n        else {\n            const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block)\n                ? block\n                : (0, web3_utils_1.format)({ format: 'uint' }, block, web3_types_1.ETH_DATA_FORMAT);\n            response = yield web3_rpc_methods_1.ethRpcMethods.getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);\n        }\n        return (0, web3_utils_1.format)(schemas_js_1.blockSchema, response, returnFormat);\n    });\n}\nexports.getBlock = getBlock;\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlockTransactionCount(web3Context, block = web3Context.defaultBlock, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let response;\n        if ((0, web3_validator_1.isBytes)(block)) {\n            const blockHashFormatted = (0, web3_utils_1.format)({ format: 'bytes32' }, block, web3_types_1.ETH_DATA_FORMAT);\n            response = yield web3_rpc_methods_1.ethRpcMethods.getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);\n        }\n        else {\n            const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block)\n                ? block\n                : (0, web3_utils_1.format)({ format: 'uint' }, block, web3_types_1.ETH_DATA_FORMAT);\n            response = yield web3_rpc_methods_1.ethRpcMethods.getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);\n        }\n        return (0, web3_utils_1.format)({ format: 'uint' }, response, returnFormat);\n    });\n}\nexports.getBlockTransactionCount = getBlockTransactionCount;\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlockUncleCount(web3Context, block = web3Context.defaultBlock, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let response;\n        if ((0, web3_validator_1.isBytes)(block)) {\n            const blockHashFormatted = (0, web3_utils_1.format)({ format: 'bytes32' }, block, web3_types_1.ETH_DATA_FORMAT);\n            response = yield web3_rpc_methods_1.ethRpcMethods.getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);\n        }\n        else {\n            const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block)\n                ? block\n                : (0, web3_utils_1.format)({ format: 'uint' }, block, web3_types_1.ETH_DATA_FORMAT);\n            response = yield web3_rpc_methods_1.ethRpcMethods.getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);\n        }\n        return (0, web3_utils_1.format)({ format: 'uint' }, response, returnFormat);\n    });\n}\nexports.getBlockUncleCount = getBlockUncleCount;\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getUncle(web3Context, block = web3Context.defaultBlock, uncleIndex, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const uncleIndexFormatted = (0, web3_utils_1.format)({ format: 'uint' }, uncleIndex, web3_types_1.ETH_DATA_FORMAT);\n        let response;\n        if ((0, web3_validator_1.isBytes)(block)) {\n            const blockHashFormatted = (0, web3_utils_1.format)({ format: 'bytes32' }, block, web3_types_1.ETH_DATA_FORMAT);\n            response = yield web3_rpc_methods_1.ethRpcMethods.getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);\n        }\n        else {\n            const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block)\n                ? block\n                : (0, web3_utils_1.format)({ format: 'uint' }, block, web3_types_1.ETH_DATA_FORMAT);\n            response = yield web3_rpc_methods_1.ethRpcMethods.getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);\n        }\n        return (0, web3_utils_1.format)(schemas_js_1.blockSchema, response, returnFormat);\n    });\n}\nexports.getUncle = getUncle;\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransaction(web3Context, transactionHash, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const transactionHashFormatted = (0, web3_utils_1.format)({ format: 'bytes32' }, transactionHash, web3_types_1.DEFAULT_RETURN_FORMAT);\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByHash(web3Context.requestManager, transactionHashFormatted);\n        return (0, web3_validator_1.isNullish)(response)\n            ? response\n            : (0, format_transaction_js_1.formatTransaction)(response, returnFormat, { fillInputAndData: true });\n    });\n}\nexports.getTransaction = getTransaction;\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getPendingTransactions(web3Context, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n        return response.map(transaction => (0, format_transaction_js_1.formatTransaction)(transaction, returnFormat, {\n            fillInputAndData: true,\n        }));\n    });\n}\nexports.getPendingTransactions = getPendingTransactions;\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransactionFromBlock(web3Context, block = web3Context.defaultBlock, transactionIndex, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const transactionIndexFormatted = (0, web3_utils_1.format)({ format: 'uint' }, transactionIndex, web3_types_1.ETH_DATA_FORMAT);\n        let response;\n        if ((0, web3_validator_1.isBytes)(block)) {\n            const blockHashFormatted = (0, web3_utils_1.format)({ format: 'bytes32' }, block, web3_types_1.ETH_DATA_FORMAT);\n            response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);\n        }\n        else {\n            const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block)\n                ? block\n                : (0, web3_utils_1.format)({ format: 'uint' }, block, web3_types_1.ETH_DATA_FORMAT);\n            response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);\n        }\n        return (0, web3_validator_1.isNullish)(response)\n            ? response\n            : (0, format_transaction_js_1.formatTransaction)(response, returnFormat, { fillInputAndData: true });\n    });\n}\nexports.getTransactionFromBlock = getTransactionFromBlock;\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransactionReceipt(web3Context, transactionHash, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const transactionHashFormatted = (0, web3_utils_1.format)({ format: 'bytes32' }, transactionHash, web3_types_1.DEFAULT_RETURN_FORMAT);\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);\n        return (0, web3_validator_1.isNullish)(response)\n            ? response\n            : (0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, response, returnFormat);\n    });\n}\nexports.getTransactionReceipt = getTransactionReceipt;\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransactionCount(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber)\n            ? blockNumber\n            : (0, web3_utils_1.format)({ format: 'uint' }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);\n        return (0, web3_utils_1.format)({ format: 'uint' }, response, returnFormat);\n    });\n}\nexports.getTransactionCount = getTransactionCount;\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction sendTransaction(web3Context, transaction, returnFormat, options = { checkRevertBeforeSending: true }) {\n    const promiEvent = new web3_core_1.Web3PromiEvent((resolve, reject) => {\n        setImmediate(() => {\n            (() => __awaiter(this, void 0, void 0, function* () {\n                const sendTxHelper = new send_tx_helper_js_1.SendTxHelper({\n                    web3Context,\n                    promiEvent,\n                    options,\n                    returnFormat,\n                });\n                let transactionFormatted = (0, format_transaction_js_1.formatTransaction)(Object.assign(Object.assign({}, transaction), { from: (0, transaction_builder_js_1.getTransactionFromOrToAttr)('from', web3Context, transaction), to: (0, transaction_builder_js_1.getTransactionFromOrToAttr)('to', web3Context, transaction) }), web3_types_1.ETH_DATA_FORMAT);\n                try {\n                    transactionFormatted = yield sendTxHelper.populateGasPrice({\n                        transaction,\n                        transactionFormatted,\n                    });\n                    yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);\n                    sendTxHelper.emitSending(transactionFormatted);\n                    let wallet;\n                    if (web3Context.wallet && !(0, web3_validator_1.isNullish)(transactionFormatted.from)) {\n                        wallet = web3Context.wallet.get(transactionFormatted.from);\n                    }\n                    const transactionHash = yield sendTxHelper.signAndSend({\n                        wallet,\n                        tx: transactionFormatted,\n                    });\n                    const transactionHashFormatted = (0, web3_utils_1.format)({ format: 'bytes32' }, transactionHash, returnFormat);\n                    sendTxHelper.emitSent(transactionFormatted);\n                    sendTxHelper.emitTransactionHash(transactionHashFormatted);\n                    const transactionReceipt = yield (0, wait_for_transaction_receipt_js_1.waitForTransactionReceipt)(web3Context, transactionHash, returnFormat);\n                    const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents((0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat));\n                    sendTxHelper.emitReceipt(transactionReceiptFormatted);\n                    resolve(yield sendTxHelper.handleResolve({\n                        receipt: transactionReceiptFormatted,\n                        tx: transactionFormatted,\n                    }));\n                    sendTxHelper.emitConfirmation({\n                        receipt: transactionReceiptFormatted,\n                        transactionHash,\n                    });\n                }\n                catch (error) {\n                    reject(yield sendTxHelper.handleError({\n                        error,\n                        tx: transactionFormatted,\n                    }));\n                }\n            }))();\n        });\n    });\n    return promiEvent;\n}\nexports.sendTransaction = sendTransaction;\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction sendSignedTransaction(web3Context, signedTransaction, returnFormat, options = { checkRevertBeforeSending: true }) {\n    // TODO - Promise returned in function argument where a void return was expected\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const promiEvent = new web3_core_1.Web3PromiEvent((resolve, reject) => {\n        setImmediate(() => {\n            (() => __awaiter(this, void 0, void 0, function* () {\n                const sendTxHelper = new send_tx_helper_js_1.SendTxHelper({\n                    web3Context,\n                    promiEvent,\n                    options,\n                    returnFormat,\n                });\n                // Formatting signedTransaction to be send to RPC endpoint\n                const signedTransactionFormattedHex = (0, web3_utils_1.format)({ format: 'bytes' }, signedTransaction, web3_types_1.ETH_DATA_FORMAT);\n                const unSerializedTransaction = web3_eth_accounts_1.TransactionFactory.fromSerializedData((0, web3_utils_1.bytesToUint8Array)((0, web3_utils_1.hexToBytes)(signedTransactionFormattedHex)));\n                const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), { \n                    // Some providers will default `from` to address(0) causing the error\n                    // reported from `eth_call` to not be the reason the user's tx failed\n                    // e.g. `eth_call` will return an Out of Gas error for a failed\n                    // smart contract execution contract, because the sender, address(0),\n                    // has no balance to pay for the gas of the transaction execution\n                    from: unSerializedTransaction.getSenderAddress().toString() });\n                try {\n                    const { v, r, s } = unSerializedTransactionWithFrom, txWithoutSigParams = __rest(unSerializedTransactionWithFrom, [\"v\", \"r\", \"s\"]);\n                    yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);\n                    sendTxHelper.emitSending(signedTransactionFormattedHex);\n                    const transactionHash = yield (0, try_send_transaction_js_1.trySendTransaction)(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n                        return web3_rpc_methods_1.ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);\n                    }));\n                    sendTxHelper.emitSent(signedTransactionFormattedHex);\n                    const transactionHashFormatted = (0, web3_utils_1.format)({ format: 'bytes32' }, transactionHash, returnFormat);\n                    sendTxHelper.emitTransactionHash(transactionHashFormatted);\n                    const transactionReceipt = yield (0, wait_for_transaction_receipt_js_1.waitForTransactionReceipt)(web3Context, transactionHash, returnFormat);\n                    const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents((0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat));\n                    sendTxHelper.emitReceipt(transactionReceiptFormatted);\n                    resolve(yield sendTxHelper.handleResolve({\n                        receipt: transactionReceiptFormatted,\n                        tx: unSerializedTransactionWithFrom,\n                    }));\n                    sendTxHelper.emitConfirmation({\n                        receipt: transactionReceiptFormatted,\n                        transactionHash,\n                    });\n                }\n                catch (error) {\n                    reject(yield sendTxHelper.handleError({\n                        error,\n                        tx: unSerializedTransactionWithFrom,\n                    }));\n                }\n            }))();\n        });\n    });\n    return promiEvent;\n}\nexports.sendSignedTransaction = sendSignedTransaction;\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction sign(web3Context, message, addressOrIndex, returnFormat) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const messageFormatted = (0, web3_utils_1.format)({ format: 'bytes' }, message, web3_types_1.DEFAULT_RETURN_FORMAT);\n        if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {\n            const wallet = web3Context.wallet.get(addressOrIndex);\n            const signed = wallet.sign(messageFormatted);\n            return (0, web3_utils_1.format)(schemas_js_1.SignatureObjectSchema, signed, returnFormat);\n        }\n        if (typeof addressOrIndex === 'number') {\n            throw new web3_errors_1.SignatureError(message, 'RPC method \"eth_sign\" does not support index signatures');\n        }\n        const response = yield web3_rpc_methods_1.ethRpcMethods.sign(web3Context.requestManager, addressOrIndex, messageFormatted);\n        return (0, web3_utils_1.format)({ format: 'bytes' }, response, returnFormat);\n    });\n}\nexports.sign = sign;\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction signTransaction(web3Context, transaction, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield web3_rpc_methods_1.ethRpcMethods.signTransaction(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT));\n        // Some clients only return the encoded signed transaction (e.g. Ganache)\n        // while clients such as Geth return the desired SignedTransactionInfoAPI object\n        return (0, web3_validator_1.isString)(response)\n            ? (0, decode_signed_transaction_js_1.decodeSignedTransaction)(response, returnFormat, {\n                fillInputAndData: true,\n            })\n            : {\n                raw: (0, web3_utils_1.format)({ format: 'bytes' }, response.raw, returnFormat),\n                tx: (0, format_transaction_js_1.formatTransaction)(response.tx, returnFormat, {\n                    fillInputAndData: true,\n                }),\n            };\n    });\n}\nexports.signTransaction = signTransaction;\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction call(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber)\n            ? blockNumber\n            : (0, web3_utils_1.format)({ format: 'uint' }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n        const response = yield web3_rpc_methods_1.ethRpcMethods.call(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT), blockNumberFormatted);\n        return (0, web3_utils_1.format)({ format: 'bytes' }, response, returnFormat);\n    });\n}\nexports.call = call;\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction estimateGas(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const transactionFormatted = (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT);\n        const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber)\n            ? blockNumber\n            : (0, web3_utils_1.format)({ format: 'uint' }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n        const response = yield web3_rpc_methods_1.ethRpcMethods.estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);\n        return (0, web3_utils_1.format)({ format: 'uint' }, response, returnFormat);\n    });\n}\nexports.estimateGas = estimateGas;\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getLogs(web3Context, filter, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // format type bigint or number toBlock and fromBlock to hexstring.\n        let { toBlock, fromBlock } = filter;\n        if (!(0, web3_validator_1.isNullish)(toBlock)) {\n            if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n                toBlock = (0, web3_utils_1.numberToHex)(toBlock);\n            }\n        }\n        if (!(0, web3_validator_1.isNullish)(fromBlock)) {\n            if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n                fromBlock = (0, web3_utils_1.numberToHex)(fromBlock);\n            }\n        }\n        const formattedFilter = Object.assign(Object.assign({}, filter), { fromBlock, toBlock });\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n        const result = response.map(res => {\n            if (typeof res === 'string') {\n                return res;\n            }\n            return (0, web3_utils_1.format)(schemas_js_1.logSchema, res, returnFormat);\n        });\n        return result;\n    });\n}\nexports.getLogs = getLogs;\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getChainId(web3Context, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getChainId(web3Context.requestManager);\n        return (0, web3_utils_1.format)({ format: 'uint' }, \n        // Response is number in hex formatted string\n        response, returnFormat);\n    });\n}\nexports.getChainId = getChainId;\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getProof(web3Context, address, storageKeys, blockNumber = web3Context.defaultBlock, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const storageKeysFormatted = storageKeys.map(storageKey => (0, web3_utils_1.format)({ format: 'bytes' }, storageKey, web3_types_1.ETH_DATA_FORMAT));\n        const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber)\n            ? blockNumber\n            : (0, web3_utils_1.format)({ format: 'uint' }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);\n        return (0, web3_utils_1.format)(schemas_js_1.accountSchema, response, returnFormat);\n    });\n}\nexports.getProof = getProof;\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getFeeHistory(web3Context, blockCount, newestBlock = web3Context.defaultBlock, rewardPercentiles, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const blockCountFormatted = (0, web3_utils_1.format)({ format: 'uint' }, blockCount, web3_types_1.ETH_DATA_FORMAT);\n        const newestBlockFormatted = (0, web3_validator_1.isBlockTag)(newestBlock)\n            ? newestBlock\n            : (0, web3_utils_1.format)({ format: 'uint' }, newestBlock, web3_types_1.ETH_DATA_FORMAT);\n        const rewardPercentilesFormatted = (0, web3_utils_1.format)({\n            type: 'array',\n            items: {\n                format: 'uint',\n            },\n        }, rewardPercentiles, constants_js_1.NUMBER_DATA_FORMAT);\n        const response = yield web3_rpc_methods_1.ethRpcMethods.getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);\n        return (0, web3_utils_1.format)(schemas_js_1.feeHistorySchema, response, returnFormat);\n    });\n}\nexports.getFeeHistory = getFeeHistory;\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction createAccessList(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber)\n            ? blockNumber\n            : (0, web3_utils_1.format)({ format: 'uint' }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n        const response = (yield web3_rpc_methods_1.ethRpcMethods.createAccessList(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT), blockNumberFormatted));\n        return (0, web3_utils_1.format)(schemas_js_1.accessListResultSchema, response, returnFormat);\n    });\n}\nexports.createAccessList = createAccessList;\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield web3_rpc_methods_1.ethRpcMethods.signTypedData(web3Context.requestManager, address, typedData, useLegacy);\n        return (0, web3_utils_1.format)({ format: 'bytes' }, response, returnFormat);\n    });\n}\nexports.signTypedData = signTypedData;\n//# sourceMappingURL=rpc_method_wrappers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvcnBjX21ldGhvZF93cmFwcGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxjQUFjO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCLEdBQUcsd0JBQXdCLEdBQUcscUJBQXFCLEdBQUcsZ0JBQWdCLEdBQUcsa0JBQWtCLEdBQUcsZUFBZSxHQUFHLG1CQUFtQixHQUFHLFlBQVksR0FBRyx1QkFBdUIsR0FBRyxZQUFZLEdBQUcsNkJBQTZCLEdBQUcsdUJBQXVCLEdBQUcsMkJBQTJCLEdBQUcsNkJBQTZCLEdBQUcsK0JBQStCLEdBQUcsOEJBQThCLEdBQUcsc0JBQXNCLEdBQUcsZ0JBQWdCLEdBQUcsMEJBQTBCLEdBQUcsZ0NBQWdDLEdBQUcsZ0JBQWdCLEdBQUcsZUFBZSxHQUFHLG9CQUFvQixHQUFHLGtCQUFrQixHQUFHLHNCQUFzQixHQUFHLG1CQUFtQixHQUFHLG1CQUFtQixHQUFHLGdCQUFnQixHQUFHLG1CQUFtQixHQUFHLGlCQUFpQixHQUFHLDBCQUEwQjtBQUN2dUI7QUFDQTtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHVGQUFZO0FBQ3pDLG9CQUFvQixtQkFBTyxDQUFDLHFGQUFXO0FBQ3ZDLHFCQUFxQixtQkFBTyxDQUFDLHVGQUFZO0FBQ3pDLDRCQUE0QixtQkFBTyxDQUFDLHFHQUFtQjtBQUN2RCx5QkFBeUIsbUJBQU8sQ0FBQywrRkFBZ0I7QUFDakQsc0JBQXNCLG1CQUFPLENBQUMseUZBQWE7QUFDM0MsMkJBQTJCLG1CQUFPLENBQUMsbUdBQWtCO0FBQ3JELHVDQUF1QyxtQkFBTyxDQUFDLHlJQUFzQztBQUNyRixxQkFBcUIsbUJBQU8sQ0FBQyx5RkFBYztBQUMzQztBQUNBLGlDQUFpQyxtQkFBTyxDQUFDLDZIQUFnQztBQUN6RSxnQ0FBZ0MsbUJBQU8sQ0FBQywySEFBK0I7QUFDdkU7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQywrSEFBaUM7QUFDM0U7QUFDQSwwQ0FBMEMsbUJBQU8sQ0FBQywrSUFBeUM7QUFDM0YsdUJBQXVCLG1CQUFPLENBQUMsNkZBQWdCO0FBQy9DO0FBQ0EsNEJBQTRCLG1CQUFPLENBQUMsbUhBQTJCO0FBQy9EO0FBQ0EseUNBQXlDO0FBQ3pDLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQSw2RkFBNkYseUZBQXlGO0FBQ3RMLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQSxvRkFBb0YsaUZBQWlGO0FBQ3JLLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQSxzRkFBc0Ysa0ZBQWtGO0FBQ3hLLG1CQUFtQjtBQUNuQjtBQUNBLHlDQUF5QztBQUN6Qyx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0EsbUZBQW1GLGdGQUFnRjtBQUNuSyxnQkFBZ0I7QUFDaEI7QUFDQSx5Q0FBeUM7QUFDekMsd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxnQkFBZ0I7QUFDMUQsS0FBSztBQUNMO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0EseUNBQXlDO0FBQ3pDLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsZ0JBQWdCO0FBQzFELEtBQUs7QUFDTDtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLHlDQUF5QztBQUN6Qyx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGdCQUFnQjtBQUMxRCxLQUFLO0FBQ0w7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSx5Q0FBeUM7QUFDekMsd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGdCQUFnQjtBQUN6RDtBQUNBLDBDQUEwQyxnQkFBZ0I7QUFDMUQsS0FBSztBQUNMO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EseUNBQXlDO0FBQ3pDLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLGdCQUFnQjtBQUNoRjtBQUNBO0FBQ0EseUNBQXlDLGdCQUFnQjtBQUN6RDtBQUNBLDBDQUEwQyxpQkFBaUI7QUFDM0QsS0FBSztBQUNMO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EseUNBQXlDO0FBQ3pDLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxnQkFBZ0I7QUFDekQ7QUFDQSwwQ0FBMEMsaUJBQWlCO0FBQzNELEtBQUs7QUFDTDtBQUNBLGVBQWU7QUFDZjtBQUNBLHlDQUF5QztBQUN6Qyx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsbUJBQW1CO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsZ0JBQWdCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLHlDQUF5QztBQUN6Qyx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsbUJBQW1CO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsZ0JBQWdCO0FBQzdEO0FBQ0E7QUFDQSwwQ0FBMEMsZ0JBQWdCO0FBQzFELEtBQUs7QUFDTDtBQUNBLGdDQUFnQztBQUNoQztBQUNBLHlDQUF5QztBQUN6Qyx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsbUJBQW1CO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsZ0JBQWdCO0FBQzdEO0FBQ0E7QUFDQSwwQ0FBMEMsZ0JBQWdCO0FBQzFELEtBQUs7QUFDTDtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLHlDQUF5QztBQUN6Qyx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxnQkFBZ0I7QUFDL0U7QUFDQTtBQUNBLGtFQUFrRSxtQkFBbUI7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxnQkFBZ0I7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EseUNBQXlDO0FBQ3pDLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLG1CQUFtQjtBQUN2RjtBQUNBO0FBQ0E7QUFDQSx1RkFBdUYsd0JBQXdCO0FBQy9HLEtBQUs7QUFDTDtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLHlDQUF5QztBQUN6Qyx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSx5Q0FBeUM7QUFDekMsd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsZ0JBQWdCO0FBQ3JGO0FBQ0E7QUFDQSxrRUFBa0UsbUJBQW1CO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsZ0JBQWdCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLHdCQUF3QjtBQUMvRyxLQUFLO0FBQ0w7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQSx5Q0FBeUM7QUFDekMsd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSxvRUFBb0UsbUJBQW1CO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0EseUNBQXlDO0FBQ3pDLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxnQkFBZ0I7QUFDekQ7QUFDQSwwQ0FBMEMsZ0JBQWdCO0FBQzFELEtBQUs7QUFDTDtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBLHlDQUF5QztBQUN6Qyx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0EsNkVBQTZFLGdDQUFnQztBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLHdIQUF3SCxrQkFBa0IsZ01BQWdNO0FBQzFVO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixnRkFBZ0YsbUJBQW1CO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0EseUNBQXlDO0FBQ3pDLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQSx5RkFBeUYsZ0NBQWdDO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUZBQWlGLGlCQUFpQjtBQUNsRztBQUNBLHNGQUFzRjtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0EsNEJBQTRCLFVBQVU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxnRkFBZ0YsbUJBQW1CO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBLHlDQUF5QztBQUN6Qyx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELGlCQUFpQjtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsaUJBQWlCO0FBQzNELEtBQUs7QUFDTDtBQUNBLFlBQVk7QUFDWjtBQUNBLHlDQUF5QztBQUN6Qyx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGdEQUFnRCxpQkFBaUI7QUFDakU7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLEtBQUs7QUFDTDtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekMsd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGdCQUFnQjtBQUN6RDtBQUNBLDBDQUEwQyxpQkFBaUI7QUFDM0QsS0FBSztBQUNMO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekMsd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsZ0JBQWdCO0FBQ3pEO0FBQ0EsMENBQTBDLGdCQUFnQjtBQUMxRCxLQUFLO0FBQ0w7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLHlDQUF5QztBQUN6Qyx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxxQkFBcUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsYUFBYSxvQkFBb0I7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZUFBZTtBQUNmO0FBQ0EseUNBQXlDO0FBQ3pDLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsZ0JBQWdCO0FBQzFEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSx5Q0FBeUM7QUFDekMsd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSw4RkFBOEYsaUJBQWlCO0FBQy9HO0FBQ0E7QUFDQSx5Q0FBeUMsZ0JBQWdCO0FBQ3pEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLHdCQUF3QixrQkFBa0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsK0RBQStELGdCQUFnQjtBQUMvRTtBQUNBO0FBQ0EseUNBQXlDLGdCQUFnQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLHlDQUF5QztBQUN6Qyx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsZ0JBQWdCO0FBQ3pEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSx5Q0FBeUM7QUFDekMsd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxpQkFBaUI7QUFDM0QsS0FBSztBQUNMO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXNzdWVyX2hvbGRlcl92ZXJpZmllci8uL3NyYy9wYWdlcy9hcGkvbm9kZV9tb2R1bGVzL3dlYjMtZXRoL2xpYi9jb21tb25qcy9ycGNfbWV0aG9kX3dyYXBwZXJzLmpzPzY3YjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxud2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG5pdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbnRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4oYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG53ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG5idXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbllvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaWduVHlwZWREYXRhID0gZXhwb3J0cy5jcmVhdGVBY2Nlc3NMaXN0ID0gZXhwb3J0cy5nZXRGZWVIaXN0b3J5ID0gZXhwb3J0cy5nZXRQcm9vZiA9IGV4cG9ydHMuZ2V0Q2hhaW5JZCA9IGV4cG9ydHMuZ2V0TG9ncyA9IGV4cG9ydHMuZXN0aW1hdGVHYXMgPSBleHBvcnRzLmNhbGwgPSBleHBvcnRzLnNpZ25UcmFuc2FjdGlvbiA9IGV4cG9ydHMuc2lnbiA9IGV4cG9ydHMuc2VuZFNpZ25lZFRyYW5zYWN0aW9uID0gZXhwb3J0cy5zZW5kVHJhbnNhY3Rpb24gPSBleHBvcnRzLmdldFRyYW5zYWN0aW9uQ291bnQgPSBleHBvcnRzLmdldFRyYW5zYWN0aW9uUmVjZWlwdCA9IGV4cG9ydHMuZ2V0VHJhbnNhY3Rpb25Gcm9tQmxvY2sgPSBleHBvcnRzLmdldFBlbmRpbmdUcmFuc2FjdGlvbnMgPSBleHBvcnRzLmdldFRyYW5zYWN0aW9uID0gZXhwb3J0cy5nZXRVbmNsZSA9IGV4cG9ydHMuZ2V0QmxvY2tVbmNsZUNvdW50ID0gZXhwb3J0cy5nZXRCbG9ja1RyYW5zYWN0aW9uQ291bnQgPSBleHBvcnRzLmdldEJsb2NrID0gZXhwb3J0cy5nZXRDb2RlID0gZXhwb3J0cy5nZXRTdG9yYWdlQXQgPSBleHBvcnRzLmdldEJhbGFuY2UgPSBleHBvcnRzLmdldEJsb2NrTnVtYmVyID0gZXhwb3J0cy5nZXRHYXNQcmljZSA9IGV4cG9ydHMuZ2V0SGFzaFJhdGUgPSBleHBvcnRzLmlzTWluaW5nID0gZXhwb3J0cy5nZXRDb2luYmFzZSA9IGV4cG9ydHMuaXNTeW5jaW5nID0gZXhwb3J0cy5nZXRQcm90b2NvbFZlcnNpb24gPSB2b2lkIDA7XG4vLyBEaXNhYmxpbmcgYmVjYXVzZSByZXR1cm5UeXBlcyBtdXN0IGJlIGxhc3QgcGFyYW0gdG8gbWF0Y2ggMS54IHBhcmFtc1xuLyogZXNsaW50LWRpc2FibGUgZGVmYXVsdC1wYXJhbS1sYXN0ICovXG5jb25zdCB3ZWIzX3R5cGVzXzEgPSByZXF1aXJlKFwid2ViMy10eXBlc1wiKTtcbmNvbnN0IHdlYjNfY29yZV8xID0gcmVxdWlyZShcIndlYjMtY29yZVwiKTtcbmNvbnN0IHdlYjNfdXRpbHNfMSA9IHJlcXVpcmUoXCJ3ZWIzLXV0aWxzXCIpO1xuY29uc3Qgd2ViM19ldGhfYWNjb3VudHNfMSA9IHJlcXVpcmUoXCJ3ZWIzLWV0aC1hY2NvdW50c1wiKTtcbmNvbnN0IHdlYjNfdmFsaWRhdG9yXzEgPSByZXF1aXJlKFwid2ViMy12YWxpZGF0b3JcIik7XG5jb25zdCB3ZWIzX2Vycm9yc18xID0gcmVxdWlyZShcIndlYjMtZXJyb3JzXCIpO1xuY29uc3Qgd2ViM19ycGNfbWV0aG9kc18xID0gcmVxdWlyZShcIndlYjMtcnBjLW1ldGhvZHNcIik7XG5jb25zdCBkZWNvZGVfc2lnbmVkX3RyYW5zYWN0aW9uX2pzXzEgPSByZXF1aXJlKFwiLi91dGlscy9kZWNvZGVfc2lnbmVkX3RyYW5zYWN0aW9uLmpzXCIpO1xuY29uc3Qgc2NoZW1hc19qc18xID0gcmVxdWlyZShcIi4vc2NoZW1hcy5qc1wiKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcbmNvbnN0IHRyYW5zYWN0aW9uX2J1aWxkZXJfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL3RyYW5zYWN0aW9uX2J1aWxkZXIuanNcIik7XG5jb25zdCBmb3JtYXRfdHJhbnNhY3Rpb25fanNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL2Zvcm1hdF90cmFuc2FjdGlvbi5qc1wiKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcbmNvbnN0IHRyeV9zZW5kX3RyYW5zYWN0aW9uX2pzXzEgPSByZXF1aXJlKFwiLi91dGlscy90cnlfc2VuZF90cmFuc2FjdGlvbi5qc1wiKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcbmNvbnN0IHdhaXRfZm9yX3RyYW5zYWN0aW9uX3JlY2VpcHRfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL3dhaXRfZm9yX3RyYW5zYWN0aW9uX3JlY2VpcHQuanNcIik7XG5jb25zdCBjb25zdGFudHNfanNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50cy5qc1wiKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcbmNvbnN0IHNlbmRfdHhfaGVscGVyX2pzXzEgPSByZXF1aXJlKFwiLi91dGlscy9zZW5kX3R4X2hlbHBlci5qc1wiKTtcbi8qKlxuICogVmlldyBhZGRpdGlvbmFsIGRvY3VtZW50YXRpb25zIGhlcmU6IHtAbGluayBXZWIzRXRoLmdldFByb3RvY29sVmVyc2lvbn1cbiAqIEBwYXJhbSB3ZWIzQ29udGV4dCAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqL1xuY29uc3QgZ2V0UHJvdG9jb2xWZXJzaW9uID0gKHdlYjNDb250ZXh0KSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsgcmV0dXJuIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldFByb3RvY29sVmVyc2lvbih3ZWIzQ29udGV4dC5yZXF1ZXN0TWFuYWdlcik7IH0pO1xuZXhwb3J0cy5nZXRQcm90b2NvbFZlcnNpb24gPSBnZXRQcm90b2NvbFZlcnNpb247XG4vLyBUT0RPIEFkZCByZXR1cm5Gb3JtYXQgcGFyYW1ldGVyXG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5pc1N5bmNpbmd9XG4gKiBAcGFyYW0gd2ViM0NvbnRleHQgKHtAbGluayBXZWIzQ29udGV4dH0pIFdlYjMgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGluZ3Mgc3VjaCBhcyB0aGUgcHJvdmlkZXIsIHJlcXVlc3QgbWFuYWdlciwgd2FsbGV0LCBldGMuXG4gKi9cbmNvbnN0IGlzU3luY2luZyA9ICh3ZWIzQ29udGV4dCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7IHJldHVybiB3ZWIzX3JwY19tZXRob2RzXzEuZXRoUnBjTWV0aG9kcy5nZXRTeW5jaW5nKHdlYjNDb250ZXh0LnJlcXVlc3RNYW5hZ2VyKTsgfSk7XG5leHBvcnRzLmlzU3luY2luZyA9IGlzU3luY2luZztcbi8vIFRPRE8gY29uc2lkZXIgYWRkaW5nIHJldHVybkZvcm1hdCBwYXJhbWV0ZXIgKHRvIGZvcm1hdCBhZGRyZXNzIGFzIGJ5dGVzKVxuLyoqXG4gKiBWaWV3IGFkZGl0aW9uYWwgZG9jdW1lbnRhdGlvbnMgaGVyZToge0BsaW5rIFdlYjNFdGguZ2V0Q29pbmJhc2V9XG4gKiBAcGFyYW0gd2ViM0NvbnRleHQgKHtAbGluayBXZWIzQ29udGV4dH0pIFdlYjMgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGluZ3Mgc3VjaCBhcyB0aGUgcHJvdmlkZXIsIHJlcXVlc3QgbWFuYWdlciwgd2FsbGV0LCBldGMuXG4gKi9cbmNvbnN0IGdldENvaW5iYXNlID0gKHdlYjNDb250ZXh0KSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsgcmV0dXJuIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldENvaW5iYXNlKHdlYjNDb250ZXh0LnJlcXVlc3RNYW5hZ2VyKTsgfSk7XG5leHBvcnRzLmdldENvaW5iYXNlID0gZ2V0Q29pbmJhc2U7XG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5pc01pbmluZ31cbiAqIEBwYXJhbSB3ZWIzQ29udGV4dCAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqL1xuY29uc3QgaXNNaW5pbmcgPSAod2ViM0NvbnRleHQpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgeyByZXR1cm4gd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuZ2V0TWluaW5nKHdlYjNDb250ZXh0LnJlcXVlc3RNYW5hZ2VyKTsgfSk7XG5leHBvcnRzLmlzTWluaW5nID0gaXNNaW5pbmc7XG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5nZXRIYXNoUmF0ZX1cbiAqIEBwYXJhbSB3ZWIzQ29udGV4dCAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqL1xuZnVuY3Rpb24gZ2V0SGFzaFJhdGUod2ViM0NvbnRleHQsIHJldHVybkZvcm1hdCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuZ2V0SGFzaFJhdGUod2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIpO1xuICAgICAgICByZXR1cm4gKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgcmVzcG9uc2UsIHJldHVybkZvcm1hdCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmdldEhhc2hSYXRlID0gZ2V0SGFzaFJhdGU7XG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5nZXRHYXNQcmljZX1cbiAqIEBwYXJhbSB3ZWIzQ29udGV4dCAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqL1xuZnVuY3Rpb24gZ2V0R2FzUHJpY2Uod2ViM0NvbnRleHQsIHJldHVybkZvcm1hdCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuZ2V0R2FzUHJpY2Uod2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIpO1xuICAgICAgICByZXR1cm4gKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgcmVzcG9uc2UsIHJldHVybkZvcm1hdCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmdldEdhc1ByaWNlID0gZ2V0R2FzUHJpY2U7XG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5nZXRCbG9ja051bWJlcn1cbiAqIEBwYXJhbSB3ZWIzQ29udGV4dCAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqL1xuZnVuY3Rpb24gZ2V0QmxvY2tOdW1iZXIod2ViM0NvbnRleHQsIHJldHVybkZvcm1hdCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuZ2V0QmxvY2tOdW1iZXIod2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIpO1xuICAgICAgICByZXR1cm4gKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgcmVzcG9uc2UsIHJldHVybkZvcm1hdCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmdldEJsb2NrTnVtYmVyID0gZ2V0QmxvY2tOdW1iZXI7XG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5nZXRCYWxhbmNlfVxuICogQHBhcmFtIHdlYjNDb250ZXh0ICh7QGxpbmsgV2ViM0NvbnRleHR9KSBXZWIzIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpbmdzIHN1Y2ggYXMgdGhlIHByb3ZpZGVyLCByZXF1ZXN0IG1hbmFnZXIsIHdhbGxldCwgZXRjLlxuICovXG5mdW5jdGlvbiBnZXRCYWxhbmNlKHdlYjNDb250ZXh0LCBhZGRyZXNzLCBibG9ja051bWJlciA9IHdlYjNDb250ZXh0LmRlZmF1bHRCbG9jaywgcmV0dXJuRm9ybWF0KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgYmxvY2tOdW1iZXJGb3JtYXR0ZWQgPSAoMCwgd2ViM192YWxpZGF0b3JfMS5pc0Jsb2NrVGFnKShibG9ja051bWJlcilcbiAgICAgICAgICAgID8gYmxvY2tOdW1iZXJcbiAgICAgICAgICAgIDogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgYmxvY2tOdW1iZXIsIHdlYjNfdHlwZXNfMS5FVEhfREFUQV9GT1JNQVQpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldEJhbGFuY2Uod2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIsIGFkZHJlc3MsIGJsb2NrTnVtYmVyRm9ybWF0dGVkKTtcbiAgICAgICAgcmV0dXJuICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ3VpbnQnIH0sIHJlc3BvbnNlLCByZXR1cm5Gb3JtYXQpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRCYWxhbmNlID0gZ2V0QmFsYW5jZTtcbi8qKlxuICogVmlldyBhZGRpdGlvbmFsIGRvY3VtZW50YXRpb25zIGhlcmU6IHtAbGluayBXZWIzRXRoLmdldFN0b3JhZ2VBdH1cbiAqIEBwYXJhbSB3ZWIzQ29udGV4dCAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqL1xuZnVuY3Rpb24gZ2V0U3RvcmFnZUF0KHdlYjNDb250ZXh0LCBhZGRyZXNzLCBzdG9yYWdlU2xvdCwgYmxvY2tOdW1iZXIgPSB3ZWIzQ29udGV4dC5kZWZhdWx0QmxvY2ssIHJldHVybkZvcm1hdCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHN0b3JhZ2VTbG90Rm9ybWF0dGVkID0gKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgc3RvcmFnZVNsb3QsIHdlYjNfdHlwZXNfMS5FVEhfREFUQV9GT1JNQVQpO1xuICAgICAgICBjb25zdCBibG9ja051bWJlckZvcm1hdHRlZCA9ICgwLCB3ZWIzX3ZhbGlkYXRvcl8xLmlzQmxvY2tUYWcpKGJsb2NrTnVtYmVyKVxuICAgICAgICAgICAgPyBibG9ja051bWJlclxuICAgICAgICAgICAgOiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICd1aW50JyB9LCBibG9ja051bWJlciwgd2ViM190eXBlc18xLkVUSF9EQVRBX0ZPUk1BVCk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuZ2V0U3RvcmFnZUF0KHdlYjNDb250ZXh0LnJlcXVlc3RNYW5hZ2VyLCBhZGRyZXNzLCBzdG9yYWdlU2xvdEZvcm1hdHRlZCwgYmxvY2tOdW1iZXJGb3JtYXR0ZWQpO1xuICAgICAgICByZXR1cm4gKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAnYnl0ZXMnIH0sIHJlc3BvbnNlLCByZXR1cm5Gb3JtYXQpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRTdG9yYWdlQXQgPSBnZXRTdG9yYWdlQXQ7XG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5nZXRDb2RlfVxuICogQHBhcmFtIHdlYjNDb250ZXh0ICh7QGxpbmsgV2ViM0NvbnRleHR9KSBXZWIzIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpbmdzIHN1Y2ggYXMgdGhlIHByb3ZpZGVyLCByZXF1ZXN0IG1hbmFnZXIsIHdhbGxldCwgZXRjLlxuICovXG5mdW5jdGlvbiBnZXRDb2RlKHdlYjNDb250ZXh0LCBhZGRyZXNzLCBibG9ja051bWJlciA9IHdlYjNDb250ZXh0LmRlZmF1bHRCbG9jaywgcmV0dXJuRm9ybWF0KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgYmxvY2tOdW1iZXJGb3JtYXR0ZWQgPSAoMCwgd2ViM192YWxpZGF0b3JfMS5pc0Jsb2NrVGFnKShibG9ja051bWJlcilcbiAgICAgICAgICAgID8gYmxvY2tOdW1iZXJcbiAgICAgICAgICAgIDogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgYmxvY2tOdW1iZXIsIHdlYjNfdHlwZXNfMS5FVEhfREFUQV9GT1JNQVQpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldENvZGUod2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIsIGFkZHJlc3MsIGJsb2NrTnVtYmVyRm9ybWF0dGVkKTtcbiAgICAgICAgcmV0dXJuICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ2J5dGVzJyB9LCByZXNwb25zZSwgcmV0dXJuRm9ybWF0KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0Q29kZSA9IGdldENvZGU7XG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5nZXRCbG9ja31cbiAqIEBwYXJhbSB3ZWIzQ29udGV4dCAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqL1xuZnVuY3Rpb24gZ2V0QmxvY2sod2ViM0NvbnRleHQsIGJsb2NrID0gd2ViM0NvbnRleHQuZGVmYXVsdEJsb2NrLCBoeWRyYXRlZCA9IGZhbHNlLCByZXR1cm5Gb3JtYXQpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBsZXQgcmVzcG9uc2U7XG4gICAgICAgIGlmICgoMCwgd2ViM192YWxpZGF0b3JfMS5pc0J5dGVzKShibG9jaykpIHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrSGFzaEZvcm1hdHRlZCA9ICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ2J5dGVzMzInIH0sIGJsb2NrLCB3ZWIzX3R5cGVzXzEuRVRIX0RBVEFfRk9STUFUKTtcbiAgICAgICAgICAgIHJlc3BvbnNlID0geWllbGQgd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuZ2V0QmxvY2tCeUhhc2god2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIsIGJsb2NrSGFzaEZvcm1hdHRlZCwgaHlkcmF0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgYmxvY2tOdW1iZXJGb3JtYXR0ZWQgPSAoMCwgd2ViM192YWxpZGF0b3JfMS5pc0Jsb2NrVGFnKShibG9jaylcbiAgICAgICAgICAgICAgICA/IGJsb2NrXG4gICAgICAgICAgICAgICAgOiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICd1aW50JyB9LCBibG9jaywgd2ViM190eXBlc18xLkVUSF9EQVRBX0ZPUk1BVCk7XG4gICAgICAgICAgICByZXNwb25zZSA9IHlpZWxkIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldEJsb2NrQnlOdW1iZXIod2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIsIGJsb2NrTnVtYmVyRm9ybWF0dGVkLCBoeWRyYXRlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KShzY2hlbWFzX2pzXzEuYmxvY2tTY2hlbWEsIHJlc3BvbnNlLCByZXR1cm5Gb3JtYXQpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRCbG9jayA9IGdldEJsb2NrO1xuLyoqXG4gKiBWaWV3IGFkZGl0aW9uYWwgZG9jdW1lbnRhdGlvbnMgaGVyZToge0BsaW5rIFdlYjNFdGguZ2V0QmxvY2tUcmFuc2FjdGlvbkNvdW50fVxuICogQHBhcmFtIHdlYjNDb250ZXh0ICh7QGxpbmsgV2ViM0NvbnRleHR9KSBXZWIzIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpbmdzIHN1Y2ggYXMgdGhlIHByb3ZpZGVyLCByZXF1ZXN0IG1hbmFnZXIsIHdhbGxldCwgZXRjLlxuICovXG5mdW5jdGlvbiBnZXRCbG9ja1RyYW5zYWN0aW9uQ291bnQod2ViM0NvbnRleHQsIGJsb2NrID0gd2ViM0NvbnRleHQuZGVmYXVsdEJsb2NrLCByZXR1cm5Gb3JtYXQpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBsZXQgcmVzcG9uc2U7XG4gICAgICAgIGlmICgoMCwgd2ViM192YWxpZGF0b3JfMS5pc0J5dGVzKShibG9jaykpIHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrSGFzaEZvcm1hdHRlZCA9ICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ2J5dGVzMzInIH0sIGJsb2NrLCB3ZWIzX3R5cGVzXzEuRVRIX0RBVEFfRk9STUFUKTtcbiAgICAgICAgICAgIHJlc3BvbnNlID0geWllbGQgd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuZ2V0QmxvY2tUcmFuc2FjdGlvbkNvdW50QnlIYXNoKHdlYjNDb250ZXh0LnJlcXVlc3RNYW5hZ2VyLCBibG9ja0hhc2hGb3JtYXR0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgYmxvY2tOdW1iZXJGb3JtYXR0ZWQgPSAoMCwgd2ViM192YWxpZGF0b3JfMS5pc0Jsb2NrVGFnKShibG9jaylcbiAgICAgICAgICAgICAgICA/IGJsb2NrXG4gICAgICAgICAgICAgICAgOiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICd1aW50JyB9LCBibG9jaywgd2ViM190eXBlc18xLkVUSF9EQVRBX0ZPUk1BVCk7XG4gICAgICAgICAgICByZXNwb25zZSA9IHlpZWxkIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldEJsb2NrVHJhbnNhY3Rpb25Db3VudEJ5TnVtYmVyKHdlYjNDb250ZXh0LnJlcXVlc3RNYW5hZ2VyLCBibG9ja051bWJlckZvcm1hdHRlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ3VpbnQnIH0sIHJlc3BvbnNlLCByZXR1cm5Gb3JtYXQpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRCbG9ja1RyYW5zYWN0aW9uQ291bnQgPSBnZXRCbG9ja1RyYW5zYWN0aW9uQ291bnQ7XG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5nZXRCbG9ja1VuY2xlQ291bnR9XG4gKiBAcGFyYW0gd2ViM0NvbnRleHQgKHtAbGluayBXZWIzQ29udGV4dH0pIFdlYjMgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGluZ3Mgc3VjaCBhcyB0aGUgcHJvdmlkZXIsIHJlcXVlc3QgbWFuYWdlciwgd2FsbGV0LCBldGMuXG4gKi9cbmZ1bmN0aW9uIGdldEJsb2NrVW5jbGVDb3VudCh3ZWIzQ29udGV4dCwgYmxvY2sgPSB3ZWIzQ29udGV4dC5kZWZhdWx0QmxvY2ssIHJldHVybkZvcm1hdCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGxldCByZXNwb25zZTtcbiAgICAgICAgaWYgKCgwLCB3ZWIzX3ZhbGlkYXRvcl8xLmlzQnl0ZXMpKGJsb2NrKSkge1xuICAgICAgICAgICAgY29uc3QgYmxvY2tIYXNoRm9ybWF0dGVkID0gKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAnYnl0ZXMzMicgfSwgYmxvY2ssIHdlYjNfdHlwZXNfMS5FVEhfREFUQV9GT1JNQVQpO1xuICAgICAgICAgICAgcmVzcG9uc2UgPSB5aWVsZCB3ZWIzX3JwY19tZXRob2RzXzEuZXRoUnBjTWV0aG9kcy5nZXRVbmNsZUNvdW50QnlCbG9ja0hhc2god2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIsIGJsb2NrSGFzaEZvcm1hdHRlZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBibG9ja051bWJlckZvcm1hdHRlZCA9ICgwLCB3ZWIzX3ZhbGlkYXRvcl8xLmlzQmxvY2tUYWcpKGJsb2NrKVxuICAgICAgICAgICAgICAgID8gYmxvY2tcbiAgICAgICAgICAgICAgICA6ICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ3VpbnQnIH0sIGJsb2NrLCB3ZWIzX3R5cGVzXzEuRVRIX0RBVEFfRk9STUFUKTtcbiAgICAgICAgICAgIHJlc3BvbnNlID0geWllbGQgd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuZ2V0VW5jbGVDb3VudEJ5QmxvY2tOdW1iZXIod2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIsIGJsb2NrTnVtYmVyRm9ybWF0dGVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgcmVzcG9uc2UsIHJldHVybkZvcm1hdCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmdldEJsb2NrVW5jbGVDb3VudCA9IGdldEJsb2NrVW5jbGVDb3VudDtcbi8qKlxuICogVmlldyBhZGRpdGlvbmFsIGRvY3VtZW50YXRpb25zIGhlcmU6IHtAbGluayBXZWIzRXRoLmdldFVuY2xlfVxuICogQHBhcmFtIHdlYjNDb250ZXh0ICh7QGxpbmsgV2ViM0NvbnRleHR9KSBXZWIzIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpbmdzIHN1Y2ggYXMgdGhlIHByb3ZpZGVyLCByZXF1ZXN0IG1hbmFnZXIsIHdhbGxldCwgZXRjLlxuICovXG5mdW5jdGlvbiBnZXRVbmNsZSh3ZWIzQ29udGV4dCwgYmxvY2sgPSB3ZWIzQ29udGV4dC5kZWZhdWx0QmxvY2ssIHVuY2xlSW5kZXgsIHJldHVybkZvcm1hdCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHVuY2xlSW5kZXhGb3JtYXR0ZWQgPSAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICd1aW50JyB9LCB1bmNsZUluZGV4LCB3ZWIzX3R5cGVzXzEuRVRIX0RBVEFfRk9STUFUKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlO1xuICAgICAgICBpZiAoKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNCeXRlcykoYmxvY2spKSB7XG4gICAgICAgICAgICBjb25zdCBibG9ja0hhc2hGb3JtYXR0ZWQgPSAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICdieXRlczMyJyB9LCBibG9jaywgd2ViM190eXBlc18xLkVUSF9EQVRBX0ZPUk1BVCk7XG4gICAgICAgICAgICByZXNwb25zZSA9IHlpZWxkIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldFVuY2xlQnlCbG9ja0hhc2hBbmRJbmRleCh3ZWIzQ29udGV4dC5yZXF1ZXN0TWFuYWdlciwgYmxvY2tIYXNoRm9ybWF0dGVkLCB1bmNsZUluZGV4Rm9ybWF0dGVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyRm9ybWF0dGVkID0gKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNCbG9ja1RhZykoYmxvY2spXG4gICAgICAgICAgICAgICAgPyBibG9ja1xuICAgICAgICAgICAgICAgIDogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgYmxvY2ssIHdlYjNfdHlwZXNfMS5FVEhfREFUQV9GT1JNQVQpO1xuICAgICAgICAgICAgcmVzcG9uc2UgPSB5aWVsZCB3ZWIzX3JwY19tZXRob2RzXzEuZXRoUnBjTWV0aG9kcy5nZXRVbmNsZUJ5QmxvY2tOdW1iZXJBbmRJbmRleCh3ZWIzQ29udGV4dC5yZXF1ZXN0TWFuYWdlciwgYmxvY2tOdW1iZXJGb3JtYXR0ZWQsIHVuY2xlSW5kZXhGb3JtYXR0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoc2NoZW1hc19qc18xLmJsb2NrU2NoZW1hLCByZXNwb25zZSwgcmV0dXJuRm9ybWF0KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0VW5jbGUgPSBnZXRVbmNsZTtcbi8qKlxuICogVmlldyBhZGRpdGlvbmFsIGRvY3VtZW50YXRpb25zIGhlcmU6IHtAbGluayBXZWIzRXRoLmdldFRyYW5zYWN0aW9ufVxuICogQHBhcmFtIHdlYjNDb250ZXh0ICh7QGxpbmsgV2ViM0NvbnRleHR9KSBXZWIzIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpbmdzIHN1Y2ggYXMgdGhlIHByb3ZpZGVyLCByZXF1ZXN0IG1hbmFnZXIsIHdhbGxldCwgZXRjLlxuICovXG5mdW5jdGlvbiBnZXRUcmFuc2FjdGlvbih3ZWIzQ29udGV4dCwgdHJhbnNhY3Rpb25IYXNoLCByZXR1cm5Gb3JtYXQpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCB0cmFuc2FjdGlvbkhhc2hGb3JtYXR0ZWQgPSAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICdieXRlczMyJyB9LCB0cmFuc2FjdGlvbkhhc2gsIHdlYjNfdHlwZXNfMS5ERUZBVUxUX1JFVFVSTl9GT1JNQVQpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldFRyYW5zYWN0aW9uQnlIYXNoKHdlYjNDb250ZXh0LnJlcXVlc3RNYW5hZ2VyLCB0cmFuc2FjdGlvbkhhc2hGb3JtYXR0ZWQpO1xuICAgICAgICByZXR1cm4gKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNOdWxsaXNoKShyZXNwb25zZSlcbiAgICAgICAgICAgID8gcmVzcG9uc2VcbiAgICAgICAgICAgIDogKDAsIGZvcm1hdF90cmFuc2FjdGlvbl9qc18xLmZvcm1hdFRyYW5zYWN0aW9uKShyZXNwb25zZSwgcmV0dXJuRm9ybWF0LCB7IGZpbGxJbnB1dEFuZERhdGE6IHRydWUgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmdldFRyYW5zYWN0aW9uID0gZ2V0VHJhbnNhY3Rpb247XG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5nZXRQZW5kaW5nVHJhbnNhY3Rpb25zfVxuICogQHBhcmFtIHdlYjNDb250ZXh0ICh7QGxpbmsgV2ViM0NvbnRleHR9KSBXZWIzIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpbmdzIHN1Y2ggYXMgdGhlIHByb3ZpZGVyLCByZXF1ZXN0IG1hbmFnZXIsIHdhbGxldCwgZXRjLlxuICovXG5mdW5jdGlvbiBnZXRQZW5kaW5nVHJhbnNhY3Rpb25zKHdlYjNDb250ZXh0LCByZXR1cm5Gb3JtYXQpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldFBlbmRpbmdUcmFuc2FjdGlvbnMod2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UubWFwKHRyYW5zYWN0aW9uID0+ICgwLCBmb3JtYXRfdHJhbnNhY3Rpb25fanNfMS5mb3JtYXRUcmFuc2FjdGlvbikodHJhbnNhY3Rpb24sIHJldHVybkZvcm1hdCwge1xuICAgICAgICAgICAgZmlsbElucHV0QW5kRGF0YTogdHJ1ZSxcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRQZW5kaW5nVHJhbnNhY3Rpb25zID0gZ2V0UGVuZGluZ1RyYW5zYWN0aW9ucztcbi8qKlxuICogVmlldyBhZGRpdGlvbmFsIGRvY3VtZW50YXRpb25zIGhlcmU6IHtAbGluayBXZWIzRXRoLmdldFRyYW5zYWN0aW9uRnJvbUJsb2NrfVxuICogQHBhcmFtIHdlYjNDb250ZXh0ICh7QGxpbmsgV2ViM0NvbnRleHR9KSBXZWIzIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpbmdzIHN1Y2ggYXMgdGhlIHByb3ZpZGVyLCByZXF1ZXN0IG1hbmFnZXIsIHdhbGxldCwgZXRjLlxuICovXG5mdW5jdGlvbiBnZXRUcmFuc2FjdGlvbkZyb21CbG9jayh3ZWIzQ29udGV4dCwgYmxvY2sgPSB3ZWIzQ29udGV4dC5kZWZhdWx0QmxvY2ssIHRyYW5zYWN0aW9uSW5kZXgsIHJldHVybkZvcm1hdCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uSW5kZXhGb3JtYXR0ZWQgPSAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICd1aW50JyB9LCB0cmFuc2FjdGlvbkluZGV4LCB3ZWIzX3R5cGVzXzEuRVRIX0RBVEFfRk9STUFUKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlO1xuICAgICAgICBpZiAoKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNCeXRlcykoYmxvY2spKSB7XG4gICAgICAgICAgICBjb25zdCBibG9ja0hhc2hGb3JtYXR0ZWQgPSAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICdieXRlczMyJyB9LCBibG9jaywgd2ViM190eXBlc18xLkVUSF9EQVRBX0ZPUk1BVCk7XG4gICAgICAgICAgICByZXNwb25zZSA9IHlpZWxkIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldFRyYW5zYWN0aW9uQnlCbG9ja0hhc2hBbmRJbmRleCh3ZWIzQ29udGV4dC5yZXF1ZXN0TWFuYWdlciwgYmxvY2tIYXNoRm9ybWF0dGVkLCB0cmFuc2FjdGlvbkluZGV4Rm9ybWF0dGVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyRm9ybWF0dGVkID0gKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNCbG9ja1RhZykoYmxvY2spXG4gICAgICAgICAgICAgICAgPyBibG9ja1xuICAgICAgICAgICAgICAgIDogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgYmxvY2ssIHdlYjNfdHlwZXNfMS5FVEhfREFUQV9GT1JNQVQpO1xuICAgICAgICAgICAgcmVzcG9uc2UgPSB5aWVsZCB3ZWIzX3JwY19tZXRob2RzXzEuZXRoUnBjTWV0aG9kcy5nZXRUcmFuc2FjdGlvbkJ5QmxvY2tOdW1iZXJBbmRJbmRleCh3ZWIzQ29udGV4dC5yZXF1ZXN0TWFuYWdlciwgYmxvY2tOdW1iZXJGb3JtYXR0ZWQsIHRyYW5zYWN0aW9uSW5kZXhGb3JtYXR0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgd2ViM192YWxpZGF0b3JfMS5pc051bGxpc2gpKHJlc3BvbnNlKVxuICAgICAgICAgICAgPyByZXNwb25zZVxuICAgICAgICAgICAgOiAoMCwgZm9ybWF0X3RyYW5zYWN0aW9uX2pzXzEuZm9ybWF0VHJhbnNhY3Rpb24pKHJlc3BvbnNlLCByZXR1cm5Gb3JtYXQsIHsgZmlsbElucHV0QW5kRGF0YTogdHJ1ZSB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0VHJhbnNhY3Rpb25Gcm9tQmxvY2sgPSBnZXRUcmFuc2FjdGlvbkZyb21CbG9jaztcbi8qKlxuICogVmlldyBhZGRpdGlvbmFsIGRvY3VtZW50YXRpb25zIGhlcmU6IHtAbGluayBXZWIzRXRoLmdldFRyYW5zYWN0aW9uUmVjZWlwdH1cbiAqIEBwYXJhbSB3ZWIzQ29udGV4dCAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqL1xuZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KHdlYjNDb250ZXh0LCB0cmFuc2FjdGlvbkhhc2gsIHJldHVybkZvcm1hdCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uSGFzaEZvcm1hdHRlZCA9ICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ2J5dGVzMzInIH0sIHRyYW5zYWN0aW9uSGFzaCwgd2ViM190eXBlc18xLkRFRkFVTFRfUkVUVVJOX0ZPUk1BVCk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KHdlYjNDb250ZXh0LnJlcXVlc3RNYW5hZ2VyLCB0cmFuc2FjdGlvbkhhc2hGb3JtYXR0ZWQpO1xuICAgICAgICByZXR1cm4gKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNOdWxsaXNoKShyZXNwb25zZSlcbiAgICAgICAgICAgID8gcmVzcG9uc2VcbiAgICAgICAgICAgIDogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHNjaGVtYXNfanNfMS50cmFuc2FjdGlvblJlY2VpcHRTY2hlbWEsIHJlc3BvbnNlLCByZXR1cm5Gb3JtYXQpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRUcmFuc2FjdGlvblJlY2VpcHQgPSBnZXRUcmFuc2FjdGlvblJlY2VpcHQ7XG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5nZXRUcmFuc2FjdGlvbkNvdW50fVxuICogQHBhcmFtIHdlYjNDb250ZXh0ICh7QGxpbmsgV2ViM0NvbnRleHR9KSBXZWIzIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpbmdzIHN1Y2ggYXMgdGhlIHByb3ZpZGVyLCByZXF1ZXN0IG1hbmFnZXIsIHdhbGxldCwgZXRjLlxuICovXG5mdW5jdGlvbiBnZXRUcmFuc2FjdGlvbkNvdW50KHdlYjNDb250ZXh0LCBhZGRyZXNzLCBibG9ja051bWJlciA9IHdlYjNDb250ZXh0LmRlZmF1bHRCbG9jaywgcmV0dXJuRm9ybWF0KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgYmxvY2tOdW1iZXJGb3JtYXR0ZWQgPSAoMCwgd2ViM192YWxpZGF0b3JfMS5pc0Jsb2NrVGFnKShibG9ja051bWJlcilcbiAgICAgICAgICAgID8gYmxvY2tOdW1iZXJcbiAgICAgICAgICAgIDogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgYmxvY2tOdW1iZXIsIHdlYjNfdHlwZXNfMS5FVEhfREFUQV9GT1JNQVQpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldFRyYW5zYWN0aW9uQ291bnQod2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIsIGFkZHJlc3MsIGJsb2NrTnVtYmVyRm9ybWF0dGVkKTtcbiAgICAgICAgcmV0dXJuICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ3VpbnQnIH0sIHJlc3BvbnNlLCByZXR1cm5Gb3JtYXQpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRUcmFuc2FjdGlvbkNvdW50ID0gZ2V0VHJhbnNhY3Rpb25Db3VudDtcbi8qKlxuICogVmlldyBhZGRpdGlvbmFsIGRvY3VtZW50YXRpb25zIGhlcmU6IHtAbGluayBXZWIzRXRoLnNlbmRUcmFuc2FjdGlvbn1cbiAqIEBwYXJhbSB3ZWIzQ29udGV4dCAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqL1xuZnVuY3Rpb24gc2VuZFRyYW5zYWN0aW9uKHdlYjNDb250ZXh0LCB0cmFuc2FjdGlvbiwgcmV0dXJuRm9ybWF0LCBvcHRpb25zID0geyBjaGVja1JldmVydEJlZm9yZVNlbmRpbmc6IHRydWUgfSkge1xuICAgIGNvbnN0IHByb21pRXZlbnQgPSBuZXcgd2ViM19jb3JlXzEuV2ViM1Byb21pRXZlbnQoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBzZXRJbW1lZGlhdGUoKCkgPT4ge1xuICAgICAgICAgICAgKCgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZW5kVHhIZWxwZXIgPSBuZXcgc2VuZF90eF9oZWxwZXJfanNfMS5TZW5kVHhIZWxwZXIoe1xuICAgICAgICAgICAgICAgICAgICB3ZWIzQ29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRm9ybWF0LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGxldCB0cmFuc2FjdGlvbkZvcm1hdHRlZCA9ICgwLCBmb3JtYXRfdHJhbnNhY3Rpb25fanNfMS5mb3JtYXRUcmFuc2FjdGlvbikoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0cmFuc2FjdGlvbiksIHsgZnJvbTogKDAsIHRyYW5zYWN0aW9uX2J1aWxkZXJfanNfMS5nZXRUcmFuc2FjdGlvbkZyb21PclRvQXR0cikoJ2Zyb20nLCB3ZWIzQ29udGV4dCwgdHJhbnNhY3Rpb24pLCB0bzogKDAsIHRyYW5zYWN0aW9uX2J1aWxkZXJfanNfMS5nZXRUcmFuc2FjdGlvbkZyb21PclRvQXR0cikoJ3RvJywgd2ViM0NvbnRleHQsIHRyYW5zYWN0aW9uKSB9KSwgd2ViM190eXBlc18xLkVUSF9EQVRBX0ZPUk1BVCk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25Gb3JtYXR0ZWQgPSB5aWVsZCBzZW5kVHhIZWxwZXIucG9wdWxhdGVHYXNQcmljZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uRm9ybWF0dGVkLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgc2VuZFR4SGVscGVyLmNoZWNrUmV2ZXJ0QmVmb3JlU2VuZGluZyh0cmFuc2FjdGlvbkZvcm1hdHRlZCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbmRUeEhlbHBlci5lbWl0U2VuZGluZyh0cmFuc2FjdGlvbkZvcm1hdHRlZCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB3YWxsZXQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3ZWIzQ29udGV4dC53YWxsZXQgJiYgISgwLCB3ZWIzX3ZhbGlkYXRvcl8xLmlzTnVsbGlzaCkodHJhbnNhY3Rpb25Gb3JtYXR0ZWQuZnJvbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxldCA9IHdlYjNDb250ZXh0LndhbGxldC5nZXQodHJhbnNhY3Rpb25Gb3JtYXR0ZWQuZnJvbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25IYXNoID0geWllbGQgc2VuZFR4SGVscGVyLnNpZ25BbmRTZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhbGxldCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR4OiB0cmFuc2FjdGlvbkZvcm1hdHRlZCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uSGFzaEZvcm1hdHRlZCA9ICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ2J5dGVzMzInIH0sIHRyYW5zYWN0aW9uSGFzaCwgcmV0dXJuRm9ybWF0KTtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFR4SGVscGVyLmVtaXRTZW50KHRyYW5zYWN0aW9uRm9ybWF0dGVkKTtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFR4SGVscGVyLmVtaXRUcmFuc2FjdGlvbkhhc2godHJhbnNhY3Rpb25IYXNoRm9ybWF0dGVkKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25SZWNlaXB0ID0geWllbGQgKDAsIHdhaXRfZm9yX3RyYW5zYWN0aW9uX3JlY2VpcHRfanNfMS53YWl0Rm9yVHJhbnNhY3Rpb25SZWNlaXB0KSh3ZWIzQ29udGV4dCwgdHJhbnNhY3Rpb25IYXNoLCByZXR1cm5Gb3JtYXQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZWQgPSBzZW5kVHhIZWxwZXIuZ2V0UmVjZWlwdFdpdGhFdmVudHMoKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHNjaGVtYXNfanNfMS50cmFuc2FjdGlvblJlY2VpcHRTY2hlbWEsIHRyYW5zYWN0aW9uUmVjZWlwdCwgcmV0dXJuRm9ybWF0KSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbmRUeEhlbHBlci5lbWl0UmVjZWlwdCh0cmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZWQpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHlpZWxkIHNlbmRUeEhlbHBlci5oYW5kbGVSZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpcHQ6IHRyYW5zYWN0aW9uUmVjZWlwdEZvcm1hdHRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR4OiB0cmFuc2FjdGlvbkZvcm1hdHRlZCxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICBzZW5kVHhIZWxwZXIuZW1pdENvbmZpcm1hdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWNlaXB0OiB0cmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2gsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHlpZWxkIHNlbmRUeEhlbHBlci5oYW5kbGVFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHR4OiB0cmFuc2FjdGlvbkZvcm1hdHRlZCxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlFdmVudDtcbn1cbmV4cG9ydHMuc2VuZFRyYW5zYWN0aW9uID0gc2VuZFRyYW5zYWN0aW9uO1xuLyoqXG4gKiBWaWV3IGFkZGl0aW9uYWwgZG9jdW1lbnRhdGlvbnMgaGVyZToge0BsaW5rIFdlYjNFdGguc2VuZFNpZ25lZFRyYW5zYWN0aW9ufVxuICogQHBhcmFtIHdlYjNDb250ZXh0ICh7QGxpbmsgV2ViM0NvbnRleHR9KSBXZWIzIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpbmdzIHN1Y2ggYXMgdGhlIHByb3ZpZGVyLCByZXF1ZXN0IG1hbmFnZXIsIHdhbGxldCwgZXRjLlxuICovXG5mdW5jdGlvbiBzZW5kU2lnbmVkVHJhbnNhY3Rpb24od2ViM0NvbnRleHQsIHNpZ25lZFRyYW5zYWN0aW9uLCByZXR1cm5Gb3JtYXQsIG9wdGlvbnMgPSB7IGNoZWNrUmV2ZXJ0QmVmb3JlU2VuZGluZzogdHJ1ZSB9KSB7XG4gICAgLy8gVE9ETyAtIFByb21pc2UgcmV0dXJuZWQgaW4gZnVuY3Rpb24gYXJndW1lbnQgd2hlcmUgYSB2b2lkIHJldHVybiB3YXMgZXhwZWN0ZWRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW1pc3VzZWQtcHJvbWlzZXNcbiAgICBjb25zdCBwcm9taUV2ZW50ID0gbmV3IHdlYjNfY29yZV8xLldlYjNQcm9taUV2ZW50KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICAgICgoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VuZFR4SGVscGVyID0gbmV3IHNlbmRfdHhfaGVscGVyX2pzXzEuU2VuZFR4SGVscGVyKHtcbiAgICAgICAgICAgICAgICAgICAgd2ViM0NvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgIHByb21pRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIHJldHVybkZvcm1hdCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBGb3JtYXR0aW5nIHNpZ25lZFRyYW5zYWN0aW9uIHRvIGJlIHNlbmQgdG8gUlBDIGVuZHBvaW50XG4gICAgICAgICAgICAgICAgY29uc3Qgc2lnbmVkVHJhbnNhY3Rpb25Gb3JtYXR0ZWRIZXggPSAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICdieXRlcycgfSwgc2lnbmVkVHJhbnNhY3Rpb24sIHdlYjNfdHlwZXNfMS5FVEhfREFUQV9GT1JNQVQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVuU2VyaWFsaXplZFRyYW5zYWN0aW9uID0gd2ViM19ldGhfYWNjb3VudHNfMS5UcmFuc2FjdGlvbkZhY3RvcnkuZnJvbVNlcmlhbGl6ZWREYXRhKCgwLCB3ZWIzX3V0aWxzXzEuYnl0ZXNUb1VpbnQ4QXJyYXkpKCgwLCB3ZWIzX3V0aWxzXzEuaGV4VG9CeXRlcykoc2lnbmVkVHJhbnNhY3Rpb25Gb3JtYXR0ZWRIZXgpKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdW5TZXJpYWxpemVkVHJhbnNhY3Rpb25XaXRoRnJvbSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdW5TZXJpYWxpemVkVHJhbnNhY3Rpb24udG9KU09OKCkpLCB7IFxuICAgICAgICAgICAgICAgICAgICAvLyBTb21lIHByb3ZpZGVycyB3aWxsIGRlZmF1bHQgYGZyb21gIHRvIGFkZHJlc3MoMCkgY2F1c2luZyB0aGUgZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVwb3J0ZWQgZnJvbSBgZXRoX2NhbGxgIHRvIG5vdCBiZSB0aGUgcmVhc29uIHRoZSB1c2VyJ3MgdHggZmFpbGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGUuZy4gYGV0aF9jYWxsYCB3aWxsIHJldHVybiBhbiBPdXQgb2YgR2FzIGVycm9yIGZvciBhIGZhaWxlZFxuICAgICAgICAgICAgICAgICAgICAvLyBzbWFydCBjb250cmFjdCBleGVjdXRpb24gY29udHJhY3QsIGJlY2F1c2UgdGhlIHNlbmRlciwgYWRkcmVzcygwKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFzIG5vIGJhbGFuY2UgdG8gcGF5IGZvciB0aGUgZ2FzIG9mIHRoZSB0cmFuc2FjdGlvbiBleGVjdXRpb25cbiAgICAgICAgICAgICAgICAgICAgZnJvbTogdW5TZXJpYWxpemVkVHJhbnNhY3Rpb24uZ2V0U2VuZGVyQWRkcmVzcygpLnRvU3RyaW5nKCkgfSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB2LCByLCBzIH0gPSB1blNlcmlhbGl6ZWRUcmFuc2FjdGlvbldpdGhGcm9tLCB0eFdpdGhvdXRTaWdQYXJhbXMgPSBfX3Jlc3QodW5TZXJpYWxpemVkVHJhbnNhY3Rpb25XaXRoRnJvbSwgW1widlwiLCBcInJcIiwgXCJzXCJdKTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgc2VuZFR4SGVscGVyLmNoZWNrUmV2ZXJ0QmVmb3JlU2VuZGluZyh0eFdpdGhvdXRTaWdQYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICBzZW5kVHhIZWxwZXIuZW1pdFNlbmRpbmcoc2lnbmVkVHJhbnNhY3Rpb25Gb3JtYXR0ZWRIZXgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbkhhc2ggPSB5aWVsZCAoMCwgdHJ5X3NlbmRfdHJhbnNhY3Rpb25fanNfMS50cnlTZW5kVHJhbnNhY3Rpb24pKHdlYjNDb250ZXh0LCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuc2VuZFJhd1RyYW5zYWN0aW9uKHdlYjNDb250ZXh0LnJlcXVlc3RNYW5hZ2VyLCBzaWduZWRUcmFuc2FjdGlvbkZvcm1hdHRlZEhleCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFR4SGVscGVyLmVtaXRTZW50KHNpZ25lZFRyYW5zYWN0aW9uRm9ybWF0dGVkSGV4KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25IYXNoRm9ybWF0dGVkID0gKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAnYnl0ZXMzMicgfSwgdHJhbnNhY3Rpb25IYXNoLCByZXR1cm5Gb3JtYXQpO1xuICAgICAgICAgICAgICAgICAgICBzZW5kVHhIZWxwZXIuZW1pdFRyYW5zYWN0aW9uSGFzaCh0cmFuc2FjdGlvbkhhc2hGb3JtYXR0ZWQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvblJlY2VpcHQgPSB5aWVsZCAoMCwgd2FpdF9mb3JfdHJhbnNhY3Rpb25fcmVjZWlwdF9qc18xLndhaXRGb3JUcmFuc2FjdGlvblJlY2VpcHQpKHdlYjNDb250ZXh0LCB0cmFuc2FjdGlvbkhhc2gsIHJldHVybkZvcm1hdCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uUmVjZWlwdEZvcm1hdHRlZCA9IHNlbmRUeEhlbHBlci5nZXRSZWNlaXB0V2l0aEV2ZW50cygoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoc2NoZW1hc19qc18xLnRyYW5zYWN0aW9uUmVjZWlwdFNjaGVtYSwgdHJhbnNhY3Rpb25SZWNlaXB0LCByZXR1cm5Gb3JtYXQpKTtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFR4SGVscGVyLmVtaXRSZWNlaXB0KHRyYW5zYWN0aW9uUmVjZWlwdEZvcm1hdHRlZCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeWllbGQgc2VuZFR4SGVscGVyLmhhbmRsZVJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWlwdDogdHJhbnNhY3Rpb25SZWNlaXB0Rm9ybWF0dGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHg6IHVuU2VyaWFsaXplZFRyYW5zYWN0aW9uV2l0aEZyb20sXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFR4SGVscGVyLmVtaXRDb25maXJtYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWlwdDogdHJhbnNhY3Rpb25SZWNlaXB0Rm9ybWF0dGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25IYXNoLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh5aWVsZCBzZW5kVHhIZWxwZXIuaGFuZGxlRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eDogdW5TZXJpYWxpemVkVHJhbnNhY3Rpb25XaXRoRnJvbSxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlFdmVudDtcbn1cbmV4cG9ydHMuc2VuZFNpZ25lZFRyYW5zYWN0aW9uID0gc2VuZFNpZ25lZFRyYW5zYWN0aW9uO1xuLyoqXG4gKiBWaWV3IGFkZGl0aW9uYWwgZG9jdW1lbnRhdGlvbnMgaGVyZToge0BsaW5rIFdlYjNFdGguc2lnbn1cbiAqIEBwYXJhbSB3ZWIzQ29udGV4dCAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqL1xuZnVuY3Rpb24gc2lnbih3ZWIzQ29udGV4dCwgbWVzc2FnZSwgYWRkcmVzc09ySW5kZXgsIHJldHVybkZvcm1hdCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlRm9ybWF0dGVkID0gKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAnYnl0ZXMnIH0sIG1lc3NhZ2UsIHdlYjNfdHlwZXNfMS5ERUZBVUxUX1JFVFVSTl9GT1JNQVQpO1xuICAgICAgICBpZiAoKF9hID0gd2ViM0NvbnRleHQud2FsbGV0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0KGFkZHJlc3NPckluZGV4KSkge1xuICAgICAgICAgICAgY29uc3Qgd2FsbGV0ID0gd2ViM0NvbnRleHQud2FsbGV0LmdldChhZGRyZXNzT3JJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBzaWduZWQgPSB3YWxsZXQuc2lnbihtZXNzYWdlRm9ybWF0dGVkKTtcbiAgICAgICAgICAgIHJldHVybiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoc2NoZW1hc19qc18xLlNpZ25hdHVyZU9iamVjdFNjaGVtYSwgc2lnbmVkLCByZXR1cm5Gb3JtYXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYWRkcmVzc09ySW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgd2ViM19lcnJvcnNfMS5TaWduYXR1cmVFcnJvcihtZXNzYWdlLCAnUlBDIG1ldGhvZCBcImV0aF9zaWduXCIgZG9lcyBub3Qgc3VwcG9ydCBpbmRleCBzaWduYXR1cmVzJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB3ZWIzX3JwY19tZXRob2RzXzEuZXRoUnBjTWV0aG9kcy5zaWduKHdlYjNDb250ZXh0LnJlcXVlc3RNYW5hZ2VyLCBhZGRyZXNzT3JJbmRleCwgbWVzc2FnZUZvcm1hdHRlZCk7XG4gICAgICAgIHJldHVybiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICdieXRlcycgfSwgcmVzcG9uc2UsIHJldHVybkZvcm1hdCk7XG4gICAgfSk7XG59XG5leHBvcnRzLnNpZ24gPSBzaWduO1xuLyoqXG4gKiBWaWV3IGFkZGl0aW9uYWwgZG9jdW1lbnRhdGlvbnMgaGVyZToge0BsaW5rIFdlYjNFdGguc2lnblRyYW5zYWN0aW9ufVxuICogQHBhcmFtIHdlYjNDb250ZXh0ICh7QGxpbmsgV2ViM0NvbnRleHR9KSBXZWIzIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpbmdzIHN1Y2ggYXMgdGhlIHByb3ZpZGVyLCByZXF1ZXN0IG1hbmFnZXIsIHdhbGxldCwgZXRjLlxuICovXG5mdW5jdGlvbiBzaWduVHJhbnNhY3Rpb24od2ViM0NvbnRleHQsIHRyYW5zYWN0aW9uLCByZXR1cm5Gb3JtYXQpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLnNpZ25UcmFuc2FjdGlvbih3ZWIzQ29udGV4dC5yZXF1ZXN0TWFuYWdlciwgKDAsIGZvcm1hdF90cmFuc2FjdGlvbl9qc18xLmZvcm1hdFRyYW5zYWN0aW9uKSh0cmFuc2FjdGlvbiwgd2ViM190eXBlc18xLkVUSF9EQVRBX0ZPUk1BVCkpO1xuICAgICAgICAvLyBTb21lIGNsaWVudHMgb25seSByZXR1cm4gdGhlIGVuY29kZWQgc2lnbmVkIHRyYW5zYWN0aW9uIChlLmcuIEdhbmFjaGUpXG4gICAgICAgIC8vIHdoaWxlIGNsaWVudHMgc3VjaCBhcyBHZXRoIHJldHVybiB0aGUgZGVzaXJlZCBTaWduZWRUcmFuc2FjdGlvbkluZm9BUEkgb2JqZWN0XG4gICAgICAgIHJldHVybiAoMCwgd2ViM192YWxpZGF0b3JfMS5pc1N0cmluZykocmVzcG9uc2UpXG4gICAgICAgICAgICA/ICgwLCBkZWNvZGVfc2lnbmVkX3RyYW5zYWN0aW9uX2pzXzEuZGVjb2RlU2lnbmVkVHJhbnNhY3Rpb24pKHJlc3BvbnNlLCByZXR1cm5Gb3JtYXQsIHtcbiAgICAgICAgICAgICAgICBmaWxsSW5wdXRBbmREYXRhOiB0cnVlLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgIHJhdzogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAnYnl0ZXMnIH0sIHJlc3BvbnNlLnJhdywgcmV0dXJuRm9ybWF0KSxcbiAgICAgICAgICAgICAgICB0eDogKDAsIGZvcm1hdF90cmFuc2FjdGlvbl9qc18xLmZvcm1hdFRyYW5zYWN0aW9uKShyZXNwb25zZS50eCwgcmV0dXJuRm9ybWF0LCB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGxJbnB1dEFuZERhdGE6IHRydWUsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9O1xuICAgIH0pO1xufVxuZXhwb3J0cy5zaWduVHJhbnNhY3Rpb24gPSBzaWduVHJhbnNhY3Rpb247XG4vLyBUT0RPIERlY2lkZSB3aGF0IHRvIGRvIHdpdGggdHJhbnNhY3Rpb24udG9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9DaGFpblNhZmUvd2ViMy5qcy9wdWxsLzQ1MjUjaXNzdWVjb21tZW50LTk4MjMzMDA3NlxuLyoqXG4gKiBWaWV3IGFkZGl0aW9uYWwgZG9jdW1lbnRhdGlvbnMgaGVyZToge0BsaW5rIFdlYjNFdGguY2FsbH1cbiAqIEBwYXJhbSB3ZWIzQ29udGV4dCAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqL1xuZnVuY3Rpb24gY2FsbCh3ZWIzQ29udGV4dCwgdHJhbnNhY3Rpb24sIGJsb2NrTnVtYmVyID0gd2ViM0NvbnRleHQuZGVmYXVsdEJsb2NrLCByZXR1cm5Gb3JtYXQpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCBibG9ja051bWJlckZvcm1hdHRlZCA9ICgwLCB3ZWIzX3ZhbGlkYXRvcl8xLmlzQmxvY2tUYWcpKGJsb2NrTnVtYmVyKVxuICAgICAgICAgICAgPyBibG9ja051bWJlclxuICAgICAgICAgICAgOiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICd1aW50JyB9LCBibG9ja051bWJlciwgd2ViM190eXBlc18xLkVUSF9EQVRBX0ZPUk1BVCk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuY2FsbCh3ZWIzQ29udGV4dC5yZXF1ZXN0TWFuYWdlciwgKDAsIGZvcm1hdF90cmFuc2FjdGlvbl9qc18xLmZvcm1hdFRyYW5zYWN0aW9uKSh0cmFuc2FjdGlvbiwgd2ViM190eXBlc18xLkVUSF9EQVRBX0ZPUk1BVCksIGJsb2NrTnVtYmVyRm9ybWF0dGVkKTtcbiAgICAgICAgcmV0dXJuICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ2J5dGVzJyB9LCByZXNwb25zZSwgcmV0dXJuRm9ybWF0KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuY2FsbCA9IGNhbGw7XG4vLyBUT0RPIC0gSW52ZXN0aWdhdGUgd2hldGhlciByZXNwb25zZSBpcyBwYWRkZWQgYXMgMS54IGRvY3Mgc3VnZ2VzdFxuLyoqXG4gKiBWaWV3IGFkZGl0aW9uYWwgZG9jdW1lbnRhdGlvbnMgaGVyZToge0BsaW5rIFdlYjNFdGguZXN0aW1hdGVHYXN9XG4gKiBAcGFyYW0gd2ViM0NvbnRleHQgKHtAbGluayBXZWIzQ29udGV4dH0pIFdlYjMgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGluZ3Mgc3VjaCBhcyB0aGUgcHJvdmlkZXIsIHJlcXVlc3QgbWFuYWdlciwgd2FsbGV0LCBldGMuXG4gKi9cbmZ1bmN0aW9uIGVzdGltYXRlR2FzKHdlYjNDb250ZXh0LCB0cmFuc2FjdGlvbiwgYmxvY2tOdW1iZXIgPSB3ZWIzQ29udGV4dC5kZWZhdWx0QmxvY2ssIHJldHVybkZvcm1hdCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uRm9ybWF0dGVkID0gKDAsIGZvcm1hdF90cmFuc2FjdGlvbl9qc18xLmZvcm1hdFRyYW5zYWN0aW9uKSh0cmFuc2FjdGlvbiwgd2ViM190eXBlc18xLkVUSF9EQVRBX0ZPUk1BVCk7XG4gICAgICAgIGNvbnN0IGJsb2NrTnVtYmVyRm9ybWF0dGVkID0gKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNCbG9ja1RhZykoYmxvY2tOdW1iZXIpXG4gICAgICAgICAgICA/IGJsb2NrTnVtYmVyXG4gICAgICAgICAgICA6ICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ3VpbnQnIH0sIGJsb2NrTnVtYmVyLCB3ZWIzX3R5cGVzXzEuRVRIX0RBVEFfRk9STUFUKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB3ZWIzX3JwY19tZXRob2RzXzEuZXRoUnBjTWV0aG9kcy5lc3RpbWF0ZUdhcyh3ZWIzQ29udGV4dC5yZXF1ZXN0TWFuYWdlciwgdHJhbnNhY3Rpb25Gb3JtYXR0ZWQsIGJsb2NrTnVtYmVyRm9ybWF0dGVkKTtcbiAgICAgICAgcmV0dXJuICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ3VpbnQnIH0sIHJlc3BvbnNlLCByZXR1cm5Gb3JtYXQpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5lc3RpbWF0ZUdhcyA9IGVzdGltYXRlR2FzO1xuLy8gVE9ETyAtIEFkZCBpbnB1dCBmb3JtYXR0aW5nIHRvIGZpbHRlclxuLyoqXG4gKiBWaWV3IGFkZGl0aW9uYWwgZG9jdW1lbnRhdGlvbnMgaGVyZToge0BsaW5rIFdlYjNFdGguZ2V0UGFzdExvZ3N9XG4gKiBAcGFyYW0gd2ViM0NvbnRleHQgKHtAbGluayBXZWIzQ29udGV4dH0pIFdlYjMgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGluZ3Mgc3VjaCBhcyB0aGUgcHJvdmlkZXIsIHJlcXVlc3QgbWFuYWdlciwgd2FsbGV0LCBldGMuXG4gKi9cbmZ1bmN0aW9uIGdldExvZ3Mod2ViM0NvbnRleHQsIGZpbHRlciwgcmV0dXJuRm9ybWF0KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgLy8gZm9ybWF0IHR5cGUgYmlnaW50IG9yIG51bWJlciB0b0Jsb2NrIGFuZCBmcm9tQmxvY2sgdG8gaGV4c3RyaW5nLlxuICAgICAgICBsZXQgeyB0b0Jsb2NrLCBmcm9tQmxvY2sgfSA9IGZpbHRlcjtcbiAgICAgICAgaWYgKCEoMCwgd2ViM192YWxpZGF0b3JfMS5pc051bGxpc2gpKHRvQmxvY2spKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRvQmxvY2sgPT09ICdudW1iZXInIHx8IHR5cGVvZiB0b0Jsb2NrID09PSAnYmlnaW50Jykge1xuICAgICAgICAgICAgICAgIHRvQmxvY2sgPSAoMCwgd2ViM191dGlsc18xLm51bWJlclRvSGV4KSh0b0Jsb2NrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoISgwLCB3ZWIzX3ZhbGlkYXRvcl8xLmlzTnVsbGlzaCkoZnJvbUJsb2NrKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmcm9tQmxvY2sgPT09ICdudW1iZXInIHx8IHR5cGVvZiBmcm9tQmxvY2sgPT09ICdiaWdpbnQnKSB7XG4gICAgICAgICAgICAgICAgZnJvbUJsb2NrID0gKDAsIHdlYjNfdXRpbHNfMS5udW1iZXJUb0hleCkoZnJvbUJsb2NrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRGaWx0ZXIgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGZpbHRlciksIHsgZnJvbUJsb2NrLCB0b0Jsb2NrIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldExvZ3Mod2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIsIGZvcm1hdHRlZEZpbHRlcik7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLm1hcChyZXMgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoc2NoZW1hc19qc18xLmxvZ1NjaGVtYSwgcmVzLCByZXR1cm5Gb3JtYXQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0TG9ncyA9IGdldExvZ3M7XG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5nZXRDaGFpbklkfVxuICogQHBhcmFtIHdlYjNDb250ZXh0ICh7QGxpbmsgV2ViM0NvbnRleHR9KSBXZWIzIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpbmdzIHN1Y2ggYXMgdGhlIHByb3ZpZGVyLCByZXF1ZXN0IG1hbmFnZXIsIHdhbGxldCwgZXRjLlxuICovXG5mdW5jdGlvbiBnZXRDaGFpbklkKHdlYjNDb250ZXh0LCByZXR1cm5Gb3JtYXQpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldENoYWluSWQod2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIpO1xuICAgICAgICByZXR1cm4gKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgXG4gICAgICAgIC8vIFJlc3BvbnNlIGlzIG51bWJlciBpbiBoZXggZm9ybWF0dGVkIHN0cmluZ1xuICAgICAgICByZXNwb25zZSwgcmV0dXJuRm9ybWF0KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0Q2hhaW5JZCA9IGdldENoYWluSWQ7XG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5nZXRQcm9vZn1cbiAqIEBwYXJhbSB3ZWIzQ29udGV4dCAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvb2Yod2ViM0NvbnRleHQsIGFkZHJlc3MsIHN0b3JhZ2VLZXlzLCBibG9ja051bWJlciA9IHdlYjNDb250ZXh0LmRlZmF1bHRCbG9jaywgcmV0dXJuRm9ybWF0KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3Qgc3RvcmFnZUtleXNGb3JtYXR0ZWQgPSBzdG9yYWdlS2V5cy5tYXAoc3RvcmFnZUtleSA9PiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICdieXRlcycgfSwgc3RvcmFnZUtleSwgd2ViM190eXBlc18xLkVUSF9EQVRBX0ZPUk1BVCkpO1xuICAgICAgICBjb25zdCBibG9ja051bWJlckZvcm1hdHRlZCA9ICgwLCB3ZWIzX3ZhbGlkYXRvcl8xLmlzQmxvY2tUYWcpKGJsb2NrTnVtYmVyKVxuICAgICAgICAgICAgPyBibG9ja051bWJlclxuICAgICAgICAgICAgOiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICd1aW50JyB9LCBibG9ja051bWJlciwgd2ViM190eXBlc18xLkVUSF9EQVRBX0ZPUk1BVCk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuZ2V0UHJvb2Yod2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIsIGFkZHJlc3MsIHN0b3JhZ2VLZXlzRm9ybWF0dGVkLCBibG9ja051bWJlckZvcm1hdHRlZCk7XG4gICAgICAgIHJldHVybiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoc2NoZW1hc19qc18xLmFjY291bnRTY2hlbWEsIHJlc3BvbnNlLCByZXR1cm5Gb3JtYXQpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRQcm9vZiA9IGdldFByb29mO1xuLy8gVE9ETyBUaHJvd2luZyBhbiBlcnJvciB3aXRoIEdldGgsIGJ1dCBub3QgSW5mdXJhXG4vLyBUT0RPIGdhc1VzZWRSYXRpbyBhbmQgcmV3YXJkIG5vdCBmb3JtYXR0aW5nXG4vKipcbiAqIFZpZXcgYWRkaXRpb25hbCBkb2N1bWVudGF0aW9ucyBoZXJlOiB7QGxpbmsgV2ViM0V0aC5nZXRGZWVIaXN0b3J5fVxuICogQHBhcmFtIHdlYjNDb250ZXh0ICh7QGxpbmsgV2ViM0NvbnRleHR9KSBXZWIzIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpbmdzIHN1Y2ggYXMgdGhlIHByb3ZpZGVyLCByZXF1ZXN0IG1hbmFnZXIsIHdhbGxldCwgZXRjLlxuICovXG5mdW5jdGlvbiBnZXRGZWVIaXN0b3J5KHdlYjNDb250ZXh0LCBibG9ja0NvdW50LCBuZXdlc3RCbG9jayA9IHdlYjNDb250ZXh0LmRlZmF1bHRCbG9jaywgcmV3YXJkUGVyY2VudGlsZXMsIHJldHVybkZvcm1hdCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrQ291bnRGb3JtYXR0ZWQgPSAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICd1aW50JyB9LCBibG9ja0NvdW50LCB3ZWIzX3R5cGVzXzEuRVRIX0RBVEFfRk9STUFUKTtcbiAgICAgICAgY29uc3QgbmV3ZXN0QmxvY2tGb3JtYXR0ZWQgPSAoMCwgd2ViM192YWxpZGF0b3JfMS5pc0Jsb2NrVGFnKShuZXdlc3RCbG9jaylcbiAgICAgICAgICAgID8gbmV3ZXN0QmxvY2tcbiAgICAgICAgICAgIDogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgbmV3ZXN0QmxvY2ssIHdlYjNfdHlwZXNfMS5FVEhfREFUQV9GT1JNQVQpO1xuICAgICAgICBjb25zdCByZXdhcmRQZXJjZW50aWxlc0Zvcm1hdHRlZCA9ICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7XG4gICAgICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICAgICAgICBmb3JtYXQ6ICd1aW50JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIHJld2FyZFBlcmNlbnRpbGVzLCBjb25zdGFudHNfanNfMS5OVU1CRVJfREFUQV9GT1JNQVQpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHdlYjNfcnBjX21ldGhvZHNfMS5ldGhScGNNZXRob2RzLmdldEZlZUhpc3Rvcnkod2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXIsIGJsb2NrQ291bnRGb3JtYXR0ZWQsIG5ld2VzdEJsb2NrRm9ybWF0dGVkLCByZXdhcmRQZXJjZW50aWxlc0Zvcm1hdHRlZCk7XG4gICAgICAgIHJldHVybiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoc2NoZW1hc19qc18xLmZlZUhpc3RvcnlTY2hlbWEsIHJlc3BvbnNlLCByZXR1cm5Gb3JtYXQpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRGZWVIaXN0b3J5ID0gZ2V0RmVlSGlzdG9yeTtcbi8qKlxuICogVmlldyBhZGRpdGlvbmFsIGRvY3VtZW50YXRpb25zIGhlcmU6IHtAbGluayBXZWIzRXRoLmNyZWF0ZUFjY2Vzc0xpc3R9XG4gKiBAcGFyYW0gd2ViM0NvbnRleHQgKHtAbGluayBXZWIzQ29udGV4dH0pIFdlYjMgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGluZ3Mgc3VjaCBhcyB0aGUgcHJvdmlkZXIsIHJlcXVlc3QgbWFuYWdlciwgd2FsbGV0LCBldGMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFjY2Vzc0xpc3Qod2ViM0NvbnRleHQsIHRyYW5zYWN0aW9uLCBibG9ja051bWJlciA9IHdlYjNDb250ZXh0LmRlZmF1bHRCbG9jaywgcmV0dXJuRm9ybWF0KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgYmxvY2tOdW1iZXJGb3JtYXR0ZWQgPSAoMCwgd2ViM192YWxpZGF0b3JfMS5pc0Jsb2NrVGFnKShibG9ja051bWJlcilcbiAgICAgICAgICAgID8gYmxvY2tOdW1iZXJcbiAgICAgICAgICAgIDogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgYmxvY2tOdW1iZXIsIHdlYjNfdHlwZXNfMS5FVEhfREFUQV9GT1JNQVQpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9ICh5aWVsZCB3ZWIzX3JwY19tZXRob2RzXzEuZXRoUnBjTWV0aG9kcy5jcmVhdGVBY2Nlc3NMaXN0KHdlYjNDb250ZXh0LnJlcXVlc3RNYW5hZ2VyLCAoMCwgZm9ybWF0X3RyYW5zYWN0aW9uX2pzXzEuZm9ybWF0VHJhbnNhY3Rpb24pKHRyYW5zYWN0aW9uLCB3ZWIzX3R5cGVzXzEuRVRIX0RBVEFfRk9STUFUKSwgYmxvY2tOdW1iZXJGb3JtYXR0ZWQpKTtcbiAgICAgICAgcmV0dXJuICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KShzY2hlbWFzX2pzXzEuYWNjZXNzTGlzdFJlc3VsdFNjaGVtYSwgcmVzcG9uc2UsIHJldHVybkZvcm1hdCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmNyZWF0ZUFjY2Vzc0xpc3QgPSBjcmVhdGVBY2Nlc3NMaXN0O1xuLyoqXG4gKiBWaWV3IGFkZGl0aW9uYWwgZG9jdW1lbnRhdGlvbnMgaGVyZToge0BsaW5rIFdlYjNFdGguc2lnblR5cGVkRGF0YX1cbiAqIEBwYXJhbSB3ZWIzQ29udGV4dCAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqL1xuZnVuY3Rpb24gc2lnblR5cGVkRGF0YSh3ZWIzQ29udGV4dCwgYWRkcmVzcywgdHlwZWREYXRhLCB1c2VMZWdhY3ksIHJldHVybkZvcm1hdCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuc2lnblR5cGVkRGF0YSh3ZWIzQ29udGV4dC5yZXF1ZXN0TWFuYWdlciwgYWRkcmVzcywgdHlwZWREYXRhLCB1c2VMZWdhY3kpO1xuICAgICAgICByZXR1cm4gKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAnYnl0ZXMnIH0sIHJlc3BvbnNlLCByZXR1cm5Gb3JtYXQpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zaWduVHlwZWREYXRhID0gc2lnblR5cGVkRGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJwY19tZXRob2Rfd3JhcHBlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/rpc_method_wrappers.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/schemas.js":
/*!*********************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/schemas.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.accountSchema = exports.storageProofSchema = exports.feeHistorySchema = exports.SignatureObjectSchema = exports.transactionReceiptSchema = exports.syncSchema = exports.logSchema = exports.blockHeaderSchema = exports.withdrawalsSchema = exports.blockSchema = exports.transactionInfoSchema = exports.transactionSchema = exports.customChainSchema = exports.hardforkSchema = exports.chainSchema = exports.accessListResultSchema = exports.accessListSchema = exports.accessListItemSchema = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nexports.accessListItemSchema = {\n    type: 'object',\n    properties: {\n        address: {\n            format: 'address',\n        },\n        storageKeys: {\n            type: 'array',\n            items: {\n                format: 'bytes32',\n            },\n        },\n    },\n};\nexports.accessListSchema = {\n    type: 'array',\n    items: Object.assign({}, exports.accessListItemSchema),\n};\nexports.accessListResultSchema = {\n    type: 'object',\n    properties: {\n        accessList: Object.assign({}, exports.accessListSchema),\n        gasUsed: {\n            type: 'string',\n        },\n    },\n};\nexports.chainSchema = {\n    type: 'string',\n    enum: ['goerli', 'kovan', 'mainnet', 'rinkeby', 'ropsten', 'sepolia'],\n};\nexports.hardforkSchema = {\n    type: 'string',\n    enum: [\n        'arrowGlacier',\n        'berlin',\n        'byzantium',\n        'chainstart',\n        'constantinople',\n        'dao',\n        'homestead',\n        'istanbul',\n        'london',\n        'merge',\n        'muirGlacier',\n        'petersburg',\n        'shanghai',\n        'spuriousDragon',\n        'tangerineWhistle',\n    ],\n};\nexports.customChainSchema = {\n    type: 'object',\n    properties: {\n        name: {\n            format: 'string',\n        },\n        networkId: {\n            format: 'uint',\n        },\n        chainId: {\n            format: 'uint',\n        },\n    },\n};\nexports.transactionSchema = {\n    type: 'object',\n    properties: {\n        from: {\n            format: 'address',\n        },\n        to: {\n            oneOf: [{ format: 'address' }, { type: 'null' }],\n        },\n        value: {\n            format: 'uint',\n        },\n        gas: {\n            format: 'uint',\n        },\n        gasPrice: {\n            format: 'uint',\n        },\n        effectiveGasPrice: {\n            format: 'uint',\n        },\n        type: {\n            format: 'uint',\n        },\n        maxFeePerGas: {\n            format: 'uint',\n        },\n        maxPriorityFeePerGas: {\n            format: 'uint',\n        },\n        accessList: Object.assign({}, exports.accessListSchema),\n        data: {\n            format: 'bytes',\n        },\n        input: {\n            format: 'bytes',\n        },\n        nonce: {\n            format: 'uint',\n        },\n        chain: Object.assign({}, exports.chainSchema),\n        hardfork: Object.assign({}, exports.hardforkSchema),\n        chainId: {\n            format: 'uint',\n        },\n        networkId: {\n            format: 'uint',\n        },\n        common: {\n            type: 'object',\n            properties: {\n                customChain: Object.assign({}, exports.customChainSchema),\n                baseChain: Object.assign({}, exports.chainSchema),\n                hardfork: Object.assign({}, exports.hardforkSchema),\n            },\n        },\n        gasLimit: {\n            format: 'uint',\n        },\n        v: {\n            format: 'uint',\n        },\n        r: {\n            format: 'bytes32',\n        },\n        s: {\n            format: 'bytes32',\n        },\n    },\n};\nexports.transactionInfoSchema = {\n    type: 'object',\n    properties: Object.assign(Object.assign({}, exports.transactionSchema.properties), { blockHash: {\n            format: 'bytes32',\n        }, blockNumber: {\n            format: 'uint',\n        }, hash: {\n            format: 'bytes32',\n        }, transactionIndex: {\n            format: 'uint',\n        }, from: {\n            format: 'address',\n        }, to: {\n            oneOf: [{ format: 'address' }, { type: 'null' }],\n        }, value: {\n            format: 'uint',\n        }, gas: {\n            format: 'uint',\n        }, gasPrice: {\n            format: 'uint',\n        }, effectiveGasPrice: {\n            format: 'uint',\n        }, type: {\n            format: 'uint',\n        }, maxFeePerGas: {\n            format: 'uint',\n        }, maxPriorityFeePerGas: {\n            format: 'uint',\n        }, accessList: Object.assign({}, exports.accessListSchema), data: {\n            format: 'bytes',\n        }, input: {\n            format: 'bytes',\n        }, nonce: {\n            format: 'uint',\n        }, gasLimit: {\n            format: 'uint',\n        }, v: {\n            format: 'uint',\n        }, r: {\n            format: 'bytes32',\n        }, s: {\n            format: 'bytes32',\n        } }),\n};\nexports.blockSchema = {\n    type: 'object',\n    properties: {\n        parentHash: {\n            format: 'bytes32',\n        },\n        sha3Uncles: {\n            format: 'bytes32',\n        },\n        miner: {\n            format: 'bytes',\n        },\n        stateRoot: {\n            format: 'bytes32',\n        },\n        transactionsRoot: {\n            format: 'bytes32',\n        },\n        receiptsRoot: {\n            format: 'bytes32',\n        },\n        logsBloom: {\n            format: 'bytes256',\n        },\n        difficulty: {\n            format: 'uint',\n        },\n        number: {\n            format: 'uint',\n        },\n        gasLimit: {\n            format: 'uint',\n        },\n        gasUsed: {\n            format: 'uint',\n        },\n        timestamp: {\n            format: 'uint',\n        },\n        extraData: {\n            format: 'bytes',\n        },\n        mixHash: {\n            format: 'bytes32',\n        },\n        nonce: {\n            format: 'uint',\n        },\n        totalDifficulty: {\n            format: 'uint',\n        },\n        baseFeePerGas: {\n            format: 'uint',\n        },\n        size: {\n            format: 'uint',\n        },\n        transactions: {\n            oneOf: [\n                {\n                    type: 'array',\n                    items: Object.assign({}, exports.transactionInfoSchema),\n                },\n                {\n                    type: 'array',\n                    items: {\n                        format: 'bytes32',\n                    },\n                },\n            ],\n        },\n        uncles: {\n            type: 'array',\n            items: {\n                format: 'bytes32',\n            },\n        },\n        hash: {\n            format: 'bytes32',\n        },\n    },\n};\nexports.withdrawalsSchema = {\n    type: 'object',\n    properties: {\n        index: {\n            format: 'uint',\n        },\n        validatorIndex: {\n            format: 'uint',\n        },\n        address: {\n            format: 'address',\n        },\n        amount: {\n            format: 'uint',\n        },\n    },\n};\nexports.blockHeaderSchema = {\n    type: 'object',\n    properties: {\n        author: {\n            format: 'bytes32',\n        },\n        hash: {\n            format: 'bytes32',\n        },\n        parentHash: {\n            format: 'bytes32',\n        },\n        receiptsRoot: {\n            format: 'bytes32',\n        },\n        miner: {\n            format: 'bytes',\n        },\n        stateRoot: {\n            format: 'bytes32',\n        },\n        transactionsRoot: {\n            format: 'bytes32',\n        },\n        withdrawalsRoot: {\n            format: 'bytes32',\n        },\n        logsBloom: {\n            format: 'bytes256',\n        },\n        difficulty: {\n            format: 'uint',\n        },\n        totalDifficulty: {\n            format: 'uint',\n        },\n        number: {\n            format: 'uint',\n        },\n        gasLimit: {\n            format: 'uint',\n        },\n        gasUsed: {\n            format: 'uint',\n        },\n        timestamp: {\n            format: 'uint',\n        },\n        extraData: {\n            format: 'bytes',\n        },\n        nonce: {\n            format: 'uint',\n        },\n        sha3Uncles: {\n            format: 'bytes32',\n        },\n        size: {\n            format: 'uint',\n        },\n        baseFeePerGas: {\n            format: 'uint',\n        },\n        excessDataGas: {\n            format: 'uint',\n        },\n        mixHash: {\n            format: 'bytes32',\n        },\n        transactions: {\n            type: 'array',\n            items: {\n                format: 'bytes32',\n            },\n        },\n        uncles: {\n            type: 'array',\n            items: {\n                format: 'bytes32',\n            },\n        },\n        withdrawals: {\n            type: 'array',\n            items: Object.assign({}, exports.withdrawalsSchema),\n        },\n    },\n};\nexports.logSchema = {\n    type: 'object',\n    properties: {\n        removed: {\n            format: 'bool',\n        },\n        logIndex: {\n            format: 'uint',\n        },\n        transactionIndex: {\n            format: 'uint',\n        },\n        transactionHash: {\n            format: 'bytes32',\n        },\n        blockHash: {\n            format: 'bytes32',\n        },\n        blockNumber: {\n            format: 'uint',\n        },\n        address: {\n            format: 'address',\n        },\n        data: {\n            format: 'bytes',\n        },\n        topics: {\n            type: 'array',\n            items: {\n                format: 'bytes32',\n            },\n        },\n    },\n};\nexports.syncSchema = {\n    type: 'object',\n    properties: {\n        startingBlock: {\n            format: 'string',\n        },\n        currentBlock: {\n            format: 'string',\n        },\n        highestBlock: {\n            format: 'string',\n        },\n        knownStates: {\n            format: 'string',\n        },\n        pulledStates: {\n            format: 'string',\n        },\n    },\n};\nexports.transactionReceiptSchema = {\n    type: 'object',\n    properties: {\n        transactionHash: {\n            format: 'bytes32',\n        },\n        transactionIndex: {\n            format: 'uint',\n        },\n        blockHash: {\n            format: 'bytes32',\n        },\n        blockNumber: {\n            format: 'uint',\n        },\n        from: {\n            format: 'address',\n        },\n        to: {\n            format: 'address',\n        },\n        cumulativeGasUsed: {\n            format: 'uint',\n        },\n        gasUsed: {\n            format: 'uint',\n        },\n        effectiveGasPrice: {\n            format: 'uint',\n        },\n        contractAddress: {\n            format: 'address',\n        },\n        logs: {\n            type: 'array',\n            items: Object.assign({}, exports.logSchema),\n        },\n        logsBloom: {\n            format: 'bytes',\n        },\n        root: {\n            format: 'bytes',\n        },\n        status: {\n            format: 'uint',\n        },\n        type: {\n            format: 'uint',\n        },\n    },\n};\nexports.SignatureObjectSchema = {\n    type: 'object',\n    properties: {\n        messageHash: {\n            format: 'bytes',\n        },\n        r: {\n            format: 'bytes32',\n        },\n        s: {\n            format: 'bytes32',\n        },\n        v: {\n            format: 'bytes',\n        },\n        message: {\n            format: 'bytes',\n        },\n        signature: {\n            format: 'bytes',\n        },\n    },\n};\nexports.feeHistorySchema = {\n    type: 'object',\n    properties: {\n        oldestBlock: {\n            format: 'uint',\n        },\n        baseFeePerGas: {\n            type: 'array',\n            items: {\n                format: 'uint',\n            },\n        },\n        reward: {\n            type: 'array',\n            items: {\n                type: 'array',\n                items: {\n                    format: 'uint',\n                },\n            },\n        },\n        gasUsedRatio: {\n            type: 'array',\n            items: {\n                type: 'number',\n            },\n        },\n    },\n};\nexports.storageProofSchema = {\n    type: 'object',\n    properties: {\n        key: {\n            format: 'bytes32',\n        },\n        value: {\n            format: 'uint',\n        },\n        proof: {\n            type: 'array',\n            items: {\n                format: 'bytes32',\n            },\n        },\n    },\n};\nexports.accountSchema = {\n    type: 'object',\n    properties: {\n        balance: {\n            format: 'uint',\n        },\n        codeHash: {\n            format: 'bytes32',\n        },\n        nonce: {\n            format: 'uint',\n        },\n        storageHash: {\n            format: 'bytes32',\n        },\n        accountProof: {\n            type: 'array',\n            items: {\n                format: 'bytes32',\n            },\n        },\n        storageProof: {\n            type: 'array',\n            items: Object.assign({}, exports.storageProofSchema),\n        },\n    },\n};\n//# sourceMappingURL=schemas.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/schemas.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/types.js":
/*!*******************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/types.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXNzdWVyX2hvbGRlcl92ZXJpZmllci8uL3NyYy9wYWdlcy9hcGkvbm9kZV9tb2R1bGVzL3dlYjMtZXRoL2xpYi9jb21tb25qcy90eXBlcy5qcz82NjkzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/types.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/decode_signed_transaction.js":
/*!*********************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/decode_signed_transaction.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeSignedTransaction = void 0;\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst web3_eth_accounts_1 = __webpack_require__(/*! web3-eth-accounts */ \"(api)/./src/pages/api/node_modules/web3-eth-accounts/lib/commonjs/index.js\");\nconst detect_transaction_type_js_1 = __webpack_require__(/*! ./detect_transaction_type.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/detect_transaction_type.js\");\nconst format_transaction_js_1 = __webpack_require__(/*! ./format_transaction.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/format_transaction.js\");\n/**\n * Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.\n *\n * @param encodedSignedTransaction The RLP encoded transaction.\n * @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.\n * @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n */\nfunction decodeSignedTransaction(encodedSignedTransaction, returnFormat, options = { fillInputAndData: false }) {\n    return {\n        raw: (0, web3_utils_1.format)({ format: 'bytes' }, encodedSignedTransaction, returnFormat),\n        tx: (0, format_transaction_js_1.formatTransaction)(Object.assign(Object.assign({}, web3_eth_accounts_1.TransactionFactory.fromSerializedData((0, web3_utils_1.hexToBytes)(encodedSignedTransaction)).toJSON()), { hash: (0, web3_utils_1.bytesToHex)((0, web3_utils_1.keccak256)((0, web3_utils_1.hexToBytes)(encodedSignedTransaction))), type: (0, detect_transaction_type_js_1.detectRawTransactionType)((0, web3_utils_1.hexToBytes)(encodedSignedTransaction)) }), returnFormat, { fillInputAndData: options.fillInputAndData }),\n    };\n}\nexports.decodeSignedTransaction = decodeSignedTransaction;\n//# sourceMappingURL=decode_signed_transaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdXRpbHMvZGVjb2RlX3NpZ25lZF90cmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0I7QUFDL0IscUJBQXFCLG1CQUFPLENBQUMsdUZBQVk7QUFDekMsNEJBQTRCLG1CQUFPLENBQUMscUdBQW1CO0FBQ3ZELHFDQUFxQyxtQkFBTyxDQUFDLCtIQUE4QjtBQUMzRSxnQ0FBZ0MsbUJBQU8sQ0FBQyxxSEFBeUI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsa0JBQWtCO0FBQzNDLGFBQWEsK0JBQStCO0FBQzVDO0FBQ0EscUZBQXFGLHlCQUF5QjtBQUM5RztBQUNBLHdDQUF3QyxpQkFBaUI7QUFDekQseUZBQXlGLGlJQUFpSSxtUEFBbVAsbUJBQW1CLDRDQUE0QztBQUM1Z0I7QUFDQTtBQUNBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2lzc3Vlcl9ob2xkZXJfdmVyaWZpZXIvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdXRpbHMvZGVjb2RlX3NpZ25lZF90cmFuc2FjdGlvbi5qcz85ZDBlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVTaWduZWRUcmFuc2FjdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHdlYjNfdXRpbHNfMSA9IHJlcXVpcmUoXCJ3ZWIzLXV0aWxzXCIpO1xuY29uc3Qgd2ViM19ldGhfYWNjb3VudHNfMSA9IHJlcXVpcmUoXCJ3ZWIzLWV0aC1hY2NvdW50c1wiKTtcbmNvbnN0IGRldGVjdF90cmFuc2FjdGlvbl90eXBlX2pzXzEgPSByZXF1aXJlKFwiLi9kZXRlY3RfdHJhbnNhY3Rpb25fdHlwZS5qc1wiKTtcbmNvbnN0IGZvcm1hdF90cmFuc2FjdGlvbl9qc18xID0gcmVxdWlyZShcIi4vZm9ybWF0X3RyYW5zYWN0aW9uLmpzXCIpO1xuLyoqXG4gKiBEZWNvZGVzIGFuIFtSTFBdKGh0dHBzOi8vZXRoZXJldW0ub3JnL2VuL2RldmVsb3BlcnMvZG9jcy9kYXRhLXN0cnVjdHVyZXMtYW5kLWVuY29kaW5nL3JscC8jdG9wKSBlbmNvZGVkIHRyYW5zYWN0aW9uLlxuICpcbiAqIEBwYXJhbSBlbmNvZGVkU2lnbmVkVHJhbnNhY3Rpb24gVGhlIFJMUCBlbmNvZGVkIHRyYW5zYWN0aW9uLlxuICogQHBhcmFtIHJldHVybkZvcm1hdCAoe0BsaW5rIERhdGFGb3JtYXR9IFNwZWNpZmllcyBob3cgdGhlIHJldHVybiBkYXRhIHNob3VsZCBiZSBmb3JtYXR0ZWQuXG4gKiBAcmV0dXJucyB7QGxpbmsgU2lnbmVkVHJhbnNhY3Rpb25JbmZvQVBJfSwgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIFJMUCBlbmNvZGVkIHNpZ25lZCB0cmFuc2FjdGlvbiAoYWNjZXNzZWQgdmlhIHRoZSBgcmF3YCBwcm9wZXJ0eSkgYW5kIHRoZSBzaWduZWQgdHJhbnNhY3Rpb24gb2JqZWN0IChhY2Nlc3NlZCB2aWEgdGhlIGB0eGAgcHJvcGVydHkpLlxuICovXG5mdW5jdGlvbiBkZWNvZGVTaWduZWRUcmFuc2FjdGlvbihlbmNvZGVkU2lnbmVkVHJhbnNhY3Rpb24sIHJldHVybkZvcm1hdCwgb3B0aW9ucyA9IHsgZmlsbElucHV0QW5kRGF0YTogZmFsc2UgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJhdzogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAnYnl0ZXMnIH0sIGVuY29kZWRTaWduZWRUcmFuc2FjdGlvbiwgcmV0dXJuRm9ybWF0KSxcbiAgICAgICAgdHg6ICgwLCBmb3JtYXRfdHJhbnNhY3Rpb25fanNfMS5mb3JtYXRUcmFuc2FjdGlvbikoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB3ZWIzX2V0aF9hY2NvdW50c18xLlRyYW5zYWN0aW9uRmFjdG9yeS5mcm9tU2VyaWFsaXplZERhdGEoKDAsIHdlYjNfdXRpbHNfMS5oZXhUb0J5dGVzKShlbmNvZGVkU2lnbmVkVHJhbnNhY3Rpb24pKS50b0pTT04oKSksIHsgaGFzaDogKDAsIHdlYjNfdXRpbHNfMS5ieXRlc1RvSGV4KSgoMCwgd2ViM191dGlsc18xLmtlY2NhazI1NikoKDAsIHdlYjNfdXRpbHNfMS5oZXhUb0J5dGVzKShlbmNvZGVkU2lnbmVkVHJhbnNhY3Rpb24pKSksIHR5cGU6ICgwLCBkZXRlY3RfdHJhbnNhY3Rpb25fdHlwZV9qc18xLmRldGVjdFJhd1RyYW5zYWN0aW9uVHlwZSkoKDAsIHdlYjNfdXRpbHNfMS5oZXhUb0J5dGVzKShlbmNvZGVkU2lnbmVkVHJhbnNhY3Rpb24pKSB9KSwgcmV0dXJuRm9ybWF0LCB7IGZpbGxJbnB1dEFuZERhdGE6IG9wdGlvbnMuZmlsbElucHV0QW5kRGF0YSB9KSxcbiAgICB9O1xufVxuZXhwb3J0cy5kZWNvZGVTaWduZWRUcmFuc2FjdGlvbiA9IGRlY29kZVNpZ25lZFRyYW5zYWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb2RlX3NpZ25lZF90cmFuc2FjdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/decode_signed_transaction.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/decoding.js":
/*!****************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/decoding.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeEventABI = void 0;\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst web3_types_1 = __webpack_require__(/*! web3-types */ \"(api)/./src/pages/api/node_modules/web3-types/lib/commonjs/index.js\");\nconst web3_eth_abi_1 = __webpack_require__(/*! web3-eth-abi */ \"(api)/./src/pages/api/node_modules/web3-eth-abi/lib/commonjs/index.js\");\nconst schemas_js_1 = __webpack_require__(/*! ../schemas.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/schemas.js\");\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/constants.js\");\nconst decodeEventABI = (event, data, jsonInterface, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) => {\n    var _a, _b, _c, _d, _e;\n    let modifiedEvent = Object.assign({}, event);\n    const result = (0, web3_utils_1.format)(schemas_js_1.logSchema, data, returnFormat);\n    // if allEvents get the right event\n    if ([constants_js_1.ALL_EVENTS, 'allEvents'].includes(modifiedEvent.name)) {\n        const matchedEvent = jsonInterface.find(j => j.signature === data.topics[0]);\n        if (matchedEvent) {\n            modifiedEvent = matchedEvent;\n        }\n        else {\n            modifiedEvent = { anonymous: true };\n        }\n    }\n    // create empty inputs if none are present (e.g. anonymous events on allEvents)\n    modifiedEvent.inputs = (_b = (_a = modifiedEvent.inputs) !== null && _a !== void 0 ? _a : event.inputs) !== null && _b !== void 0 ? _b : [];\n    // Handle case where an event signature shadows the current ABI with non-identical\n    // arg indexing. If # of topics doesn't match, event is anon.\n    if (!modifiedEvent.anonymous) {\n        let indexedInputs = 0;\n        ((_c = modifiedEvent.inputs) !== null && _c !== void 0 ? _c : []).forEach(input => {\n            if (input.indexed) {\n                indexedInputs += 1;\n            }\n        });\n        if (indexedInputs > 0 && (data === null || data === void 0 ? void 0 : data.topics) && (data === null || data === void 0 ? void 0 : data.topics.length) !== indexedInputs + 1) {\n            // checks if event is anonymous\n            modifiedEvent = Object.assign(Object.assign({}, modifiedEvent), { anonymous: true, inputs: [] });\n        }\n    }\n    const argTopics = modifiedEvent.anonymous ? data.topics : ((_d = data.topics) !== null && _d !== void 0 ? _d : []).slice(1);\n    return Object.assign(Object.assign({}, result), { returnValues: (0, web3_eth_abi_1.decodeLog)([...((_e = modifiedEvent.inputs) !== null && _e !== void 0 ? _e : [])], data.data, argTopics), event: modifiedEvent.name, signature: modifiedEvent.anonymous || !data.topics || data.topics.length === 0 || !data.topics[0]\n            ? undefined\n            : data.topics[0], raw: {\n            data: data.data,\n            topics: data.topics,\n        } });\n};\nexports.decodeEventABI = decodeEventABI;\n//# sourceMappingURL=decoding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdXRpbHMvZGVjb2RpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QixxQkFBcUIsbUJBQU8sQ0FBQyx1RkFBWTtBQUN6QyxxQkFBcUIsbUJBQU8sQ0FBQyx1RkFBWTtBQUN6Qyx1QkFBdUIsbUJBQU8sQ0FBQywyRkFBYztBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQywwRkFBZTtBQUM1Qyx1QkFBdUIsbUJBQU8sQ0FBQyw4RkFBaUI7QUFDaEQ7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMERBQTBELG9CQUFvQiw2QkFBNkI7QUFDM0c7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGFBQWE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pc3N1ZXJfaG9sZGVyX3ZlcmlmaWVyLy4vc3JjL3BhZ2VzL2FwaS9ub2RlX21vZHVsZXMvd2ViMy1ldGgvbGliL2NvbW1vbmpzL3V0aWxzL2RlY29kaW5nLmpzPzk0OTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxud2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG5pdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbnRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4oYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG53ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG5idXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbllvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlRXZlbnRBQkkgPSB2b2lkIDA7XG5jb25zdCB3ZWIzX3V0aWxzXzEgPSByZXF1aXJlKFwid2ViMy11dGlsc1wiKTtcbmNvbnN0IHdlYjNfdHlwZXNfMSA9IHJlcXVpcmUoXCJ3ZWIzLXR5cGVzXCIpO1xuY29uc3Qgd2ViM19ldGhfYWJpXzEgPSByZXF1aXJlKFwid2ViMy1ldGgtYWJpXCIpO1xuY29uc3Qgc2NoZW1hc19qc18xID0gcmVxdWlyZShcIi4uL3NjaGVtYXMuanNcIik7XG5jb25zdCBjb25zdGFudHNfanNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMuanNcIik7XG5jb25zdCBkZWNvZGVFdmVudEFCSSA9IChldmVudCwgZGF0YSwganNvbkludGVyZmFjZSwgcmV0dXJuRm9ybWF0ID0gd2ViM190eXBlc18xLkRFRkFVTFRfUkVUVVJOX0ZPUk1BVCkgPT4ge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgbGV0IG1vZGlmaWVkRXZlbnQgPSBPYmplY3QuYXNzaWduKHt9LCBldmVudCk7XG4gICAgY29uc3QgcmVzdWx0ID0gKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHNjaGVtYXNfanNfMS5sb2dTY2hlbWEsIGRhdGEsIHJldHVybkZvcm1hdCk7XG4gICAgLy8gaWYgYWxsRXZlbnRzIGdldCB0aGUgcmlnaHQgZXZlbnRcbiAgICBpZiAoW2NvbnN0YW50c19qc18xLkFMTF9FVkVOVFMsICdhbGxFdmVudHMnXS5pbmNsdWRlcyhtb2RpZmllZEV2ZW50Lm5hbWUpKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoZWRFdmVudCA9IGpzb25JbnRlcmZhY2UuZmluZChqID0+IGouc2lnbmF0dXJlID09PSBkYXRhLnRvcGljc1swXSk7XG4gICAgICAgIGlmIChtYXRjaGVkRXZlbnQpIHtcbiAgICAgICAgICAgIG1vZGlmaWVkRXZlbnQgPSBtYXRjaGVkRXZlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtb2RpZmllZEV2ZW50ID0geyBhbm9ueW1vdXM6IHRydWUgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBjcmVhdGUgZW1wdHkgaW5wdXRzIGlmIG5vbmUgYXJlIHByZXNlbnQgKGUuZy4gYW5vbnltb3VzIGV2ZW50cyBvbiBhbGxFdmVudHMpXG4gICAgbW9kaWZpZWRFdmVudC5pbnB1dHMgPSAoX2IgPSAoX2EgPSBtb2RpZmllZEV2ZW50LmlucHV0cykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZXZlbnQuaW5wdXRzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXTtcbiAgICAvLyBIYW5kbGUgY2FzZSB3aGVyZSBhbiBldmVudCBzaWduYXR1cmUgc2hhZG93cyB0aGUgY3VycmVudCBBQkkgd2l0aCBub24taWRlbnRpY2FsXG4gICAgLy8gYXJnIGluZGV4aW5nLiBJZiAjIG9mIHRvcGljcyBkb2Vzbid0IG1hdGNoLCBldmVudCBpcyBhbm9uLlxuICAgIGlmICghbW9kaWZpZWRFdmVudC5hbm9ueW1vdXMpIHtcbiAgICAgICAgbGV0IGluZGV4ZWRJbnB1dHMgPSAwO1xuICAgICAgICAoKF9jID0gbW9kaWZpZWRFdmVudC5pbnB1dHMpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IFtdKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5pbmRleGVkKSB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZElucHV0cyArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGluZGV4ZWRJbnB1dHMgPiAwICYmIChkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEudG9waWNzKSAmJiAoZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLnRvcGljcy5sZW5ndGgpICE9PSBpbmRleGVkSW5wdXRzICsgMSkge1xuICAgICAgICAgICAgLy8gY2hlY2tzIGlmIGV2ZW50IGlzIGFub255bW91c1xuICAgICAgICAgICAgbW9kaWZpZWRFdmVudCA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbW9kaWZpZWRFdmVudCksIHsgYW5vbnltb3VzOiB0cnVlLCBpbnB1dHM6IFtdIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFyZ1RvcGljcyA9IG1vZGlmaWVkRXZlbnQuYW5vbnltb3VzID8gZGF0YS50b3BpY3MgOiAoKF9kID0gZGF0YS50b3BpY3MpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IFtdKS5zbGljZSgxKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXN1bHQpLCB7IHJldHVyblZhbHVlczogKDAsIHdlYjNfZXRoX2FiaV8xLmRlY29kZUxvZykoWy4uLigoX2UgPSBtb2RpZmllZEV2ZW50LmlucHV0cykgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogW10pXSwgZGF0YS5kYXRhLCBhcmdUb3BpY3MpLCBldmVudDogbW9kaWZpZWRFdmVudC5uYW1lLCBzaWduYXR1cmU6IG1vZGlmaWVkRXZlbnQuYW5vbnltb3VzIHx8ICFkYXRhLnRvcGljcyB8fCBkYXRhLnRvcGljcy5sZW5ndGggPT09IDAgfHwgIWRhdGEudG9waWNzWzBdXG4gICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgOiBkYXRhLnRvcGljc1swXSwgcmF3OiB7XG4gICAgICAgICAgICBkYXRhOiBkYXRhLmRhdGEsXG4gICAgICAgICAgICB0b3BpY3M6IGRhdGEudG9waWNzLFxuICAgICAgICB9IH0pO1xufTtcbmV4cG9ydHMuZGVjb2RlRXZlbnRBQkkgPSBkZWNvZGVFdmVudEFCSTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlY29kaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/decoding.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/detect_transaction_type.js":
/*!*******************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/detect_transaction_type.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.detectRawTransactionType = exports.detectTransactionType = exports.defaultTransactionTypeParser = void 0;\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst web3_types_1 = __webpack_require__(/*! web3-types */ \"(api)/./src/pages/api/node_modules/web3-types/lib/commonjs/index.js\");\nconst web3_validator_1 = __webpack_require__(/*! web3-validator */ \"(api)/./src/pages/api/node_modules/web3-validator/lib/commonjs/index.js\");\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\n// undefined is treated as null for JSON schema validator\nconst transactionType0x0Schema = {\n    type: 'object',\n    properties: {\n        accessList: {\n            type: 'null',\n        },\n        maxFeePerGas: {\n            type: 'null',\n        },\n        maxPriorityFeePerGas: {\n            type: 'null',\n        },\n    },\n};\nconst transactionType0x1Schema = {\n    type: 'object',\n    properties: {\n        maxFeePerGas: {\n            type: 'null',\n        },\n        maxPriorityFeePerGas: {\n            type: 'null',\n        },\n    },\n};\nconst transactionType0x2Schema = {\n    type: 'object',\n    properties: {\n        gasPrice: {\n            type: 'null',\n        },\n    },\n};\nconst validateTxTypeAndHandleErrors = (txSchema, tx, txType) => {\n    try {\n        web3_validator_1.validator.validateJSONSchema(txSchema, tx);\n    }\n    catch (error) {\n        if (error instanceof web3_validator_1.Web3ValidatorError)\n            // Erroneously reported error\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            throw new web3_errors_1.InvalidPropertiesForTransactionTypeError(error.errors, txType);\n        throw error;\n    }\n};\nconst defaultTransactionTypeParser = (transaction) => {\n    var _a, _b;\n    const tx = transaction;\n    if (!(0, web3_validator_1.isNullish)(tx.type)) {\n        let txSchema;\n        switch (tx.type) {\n            case '0x0':\n                txSchema = transactionType0x0Schema;\n                break;\n            case '0x1':\n                txSchema = transactionType0x1Schema;\n                break;\n            case '0x2':\n                txSchema = transactionType0x2Schema;\n                break;\n            default:\n                return (0, web3_utils_1.format)({ format: 'uint' }, tx.type, web3_types_1.ETH_DATA_FORMAT);\n        }\n        validateTxTypeAndHandleErrors(txSchema, tx, tx.type);\n        return (0, web3_utils_1.format)({ format: 'uint' }, tx.type, web3_types_1.ETH_DATA_FORMAT);\n    }\n    if (!(0, web3_validator_1.isNullish)(tx.maxFeePerGas) || !(0, web3_validator_1.isNullish)(tx.maxPriorityFeePerGas)) {\n        validateTxTypeAndHandleErrors(transactionType0x2Schema, tx, '0x2');\n        return '0x2';\n    }\n    if (!(0, web3_validator_1.isNullish)(tx.accessList)) {\n        validateTxTypeAndHandleErrors(transactionType0x1Schema, tx, '0x1');\n        return '0x1';\n    }\n    const givenHardfork = (_a = tx.hardfork) !== null && _a !== void 0 ? _a : (_b = tx.common) === null || _b === void 0 ? void 0 : _b.hardfork;\n    if (!(0, web3_validator_1.isNullish)(givenHardfork)) {\n        const hardforkIndex = Object.keys(web3_types_1.HardforksOrdered).indexOf(givenHardfork);\n        // givenHardfork is London or later, so EIP-2718 is supported\n        if (hardforkIndex >= Object.keys(web3_types_1.HardforksOrdered).indexOf('london'))\n            return !(0, web3_validator_1.isNullish)(tx.gasPrice) ? '0x0' : '0x2';\n        // givenHardfork is Berlin, tx.accessList is undefined, assume type is 0x0\n        if (hardforkIndex === Object.keys(web3_types_1.HardforksOrdered).indexOf('berlin'))\n            return '0x0';\n    }\n    // gasprice is defined\n    if (!(0, web3_validator_1.isNullish)(tx.gasPrice)) {\n        validateTxTypeAndHandleErrors(transactionType0x0Schema, tx, '0x0');\n        return '0x0';\n    }\n    // no transaction type can be inferred from properties, use default transaction type\n    return undefined;\n};\nexports.defaultTransactionTypeParser = defaultTransactionTypeParser;\nconst detectTransactionType = (transaction, web3Context) => {\n    var _a;\n    return ((_a = web3Context === null || web3Context === void 0 ? void 0 : web3Context.transactionTypeParser) !== null && _a !== void 0 ? _a : exports.defaultTransactionTypeParser)(transaction);\n};\nexports.detectTransactionType = detectTransactionType;\nconst detectRawTransactionType = (transaction) => transaction[0] > 0x7f ? '0x0' : (0, web3_utils_1.toHex)(transaction[0]);\nexports.detectRawTransactionType = detectRawTransactionType;\n//# sourceMappingURL=detect_transaction_type.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/detect_transaction_type.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/format_transaction.js":
/*!**************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/format_transaction.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatTransaction = void 0;\nconst web3_types_1 = __webpack_require__(/*! web3-types */ \"(api)/./src/pages/api/node_modules/web3-types/lib/commonjs/index.js\");\nconst web3_validator_1 = __webpack_require__(/*! web3-validator */ \"(api)/./src/pages/api/node_modules/web3-validator/lib/commonjs/index.js\");\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\nconst schemas_js_1 = __webpack_require__(/*! ../schemas.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/schemas.js\");\nfunction formatTransaction(transaction, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT, options = {\n    transactionSchema: schemas_js_1.transactionInfoSchema,\n    fillInputAndData: false,\n}) {\n    var _a, _b;\n    let formattedTransaction = (0, web3_utils_1.mergeDeep)({}, transaction);\n    if (!(0, web3_validator_1.isNullish)(transaction === null || transaction === void 0 ? void 0 : transaction.common)) {\n        formattedTransaction.common = Object.assign({}, transaction.common);\n        if (!(0, web3_validator_1.isNullish)((_a = transaction.common) === null || _a === void 0 ? void 0 : _a.customChain))\n            formattedTransaction.common.customChain = Object.assign({}, transaction.common.customChain);\n    }\n    formattedTransaction = (0, web3_utils_1.format)((_b = options.transactionSchema) !== null && _b !== void 0 ? _b : schemas_js_1.transactionInfoSchema, formattedTransaction, returnFormat);\n    if (!(0, web3_validator_1.isNullish)(formattedTransaction.data) &&\n        !(0, web3_validator_1.isNullish)(formattedTransaction.input) &&\n        // Converting toHex is accounting for data and input being Uint8Arrays\n        // since comparing Uint8Array is not as straightforward as comparing strings\n        (0, web3_utils_1.toHex)(formattedTransaction.data) !== (0, web3_utils_1.toHex)(formattedTransaction.input))\n        throw new web3_errors_1.TransactionDataAndInputError({\n            data: (0, web3_utils_1.bytesToHex)(formattedTransaction.data),\n            input: (0, web3_utils_1.bytesToHex)(formattedTransaction.input),\n        });\n    if (options.fillInputAndData) {\n        if (!(0, web3_validator_1.isNullish)(formattedTransaction.data)) {\n            formattedTransaction.input = formattedTransaction.data;\n        }\n        else if (!(0, web3_validator_1.isNullish)(formattedTransaction.input)) {\n            formattedTransaction.data = formattedTransaction.input;\n        }\n    }\n    if (!(0, web3_validator_1.isNullish)(formattedTransaction.gasLimit)) {\n        formattedTransaction.gas = formattedTransaction.gasLimit;\n        delete formattedTransaction.gasLimit;\n    }\n    return formattedTransaction;\n}\nexports.formatTransaction = formatTransaction;\n//# sourceMappingURL=format_transaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdXRpbHMvZm9ybWF0X3RyYW5zYWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIscUJBQXFCLG1CQUFPLENBQUMsdUZBQVk7QUFDekMseUJBQXlCLG1CQUFPLENBQUMsK0ZBQWdCO0FBQ2pELHFCQUFxQixtQkFBTyxDQUFDLHVGQUFZO0FBQ3pDLHNCQUFzQixtQkFBTyxDQUFDLHlGQUFhO0FBQzNDLHFCQUFxQixtQkFBTyxDQUFDLDBGQUFlO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDZEQUE2RDtBQUM3RDtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBLHNFQUFzRTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXNzdWVyX2hvbGRlcl92ZXJpZmllci8uL3NyYy9wYWdlcy9hcGkvbm9kZV9tb2R1bGVzL3dlYjMtZXRoL2xpYi9jb21tb25qcy91dGlscy9mb3JtYXRfdHJhbnNhY3Rpb24uanM/NWJkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG5UaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG53ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbml0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxudGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbndlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG5NRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG5HTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG5hbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mb3JtYXRUcmFuc2FjdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHdlYjNfdHlwZXNfMSA9IHJlcXVpcmUoXCJ3ZWIzLXR5cGVzXCIpO1xuY29uc3Qgd2ViM192YWxpZGF0b3JfMSA9IHJlcXVpcmUoXCJ3ZWIzLXZhbGlkYXRvclwiKTtcbmNvbnN0IHdlYjNfdXRpbHNfMSA9IHJlcXVpcmUoXCJ3ZWIzLXV0aWxzXCIpO1xuY29uc3Qgd2ViM19lcnJvcnNfMSA9IHJlcXVpcmUoXCJ3ZWIzLWVycm9yc1wiKTtcbmNvbnN0IHNjaGVtYXNfanNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlbWFzLmpzXCIpO1xuZnVuY3Rpb24gZm9ybWF0VHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIHJldHVybkZvcm1hdCA9IHdlYjNfdHlwZXNfMS5ERUZBVUxUX1JFVFVSTl9GT1JNQVQsIG9wdGlvbnMgPSB7XG4gICAgdHJhbnNhY3Rpb25TY2hlbWE6IHNjaGVtYXNfanNfMS50cmFuc2FjdGlvbkluZm9TY2hlbWEsXG4gICAgZmlsbElucHV0QW5kRGF0YTogZmFsc2UsXG59KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBsZXQgZm9ybWF0dGVkVHJhbnNhY3Rpb24gPSAoMCwgd2ViM191dGlsc18xLm1lcmdlRGVlcCkoe30sIHRyYW5zYWN0aW9uKTtcbiAgICBpZiAoISgwLCB3ZWIzX3ZhbGlkYXRvcl8xLmlzTnVsbGlzaCkodHJhbnNhY3Rpb24gPT09IG51bGwgfHwgdHJhbnNhY3Rpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRyYW5zYWN0aW9uLmNvbW1vbikpIHtcbiAgICAgICAgZm9ybWF0dGVkVHJhbnNhY3Rpb24uY29tbW9uID0gT2JqZWN0LmFzc2lnbih7fSwgdHJhbnNhY3Rpb24uY29tbW9uKTtcbiAgICAgICAgaWYgKCEoMCwgd2ViM192YWxpZGF0b3JfMS5pc051bGxpc2gpKChfYSA9IHRyYW5zYWN0aW9uLmNvbW1vbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmN1c3RvbUNoYWluKSlcbiAgICAgICAgICAgIGZvcm1hdHRlZFRyYW5zYWN0aW9uLmNvbW1vbi5jdXN0b21DaGFpbiA9IE9iamVjdC5hc3NpZ24oe30sIHRyYW5zYWN0aW9uLmNvbW1vbi5jdXN0b21DaGFpbik7XG4gICAgfVxuICAgIGZvcm1hdHRlZFRyYW5zYWN0aW9uID0gKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKChfYiA9IG9wdGlvbnMudHJhbnNhY3Rpb25TY2hlbWEpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHNjaGVtYXNfanNfMS50cmFuc2FjdGlvbkluZm9TY2hlbWEsIGZvcm1hdHRlZFRyYW5zYWN0aW9uLCByZXR1cm5Gb3JtYXQpO1xuICAgIGlmICghKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNOdWxsaXNoKShmb3JtYXR0ZWRUcmFuc2FjdGlvbi5kYXRhKSAmJlxuICAgICAgICAhKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNOdWxsaXNoKShmb3JtYXR0ZWRUcmFuc2FjdGlvbi5pbnB1dCkgJiZcbiAgICAgICAgLy8gQ29udmVydGluZyB0b0hleCBpcyBhY2NvdW50aW5nIGZvciBkYXRhIGFuZCBpbnB1dCBiZWluZyBVaW50OEFycmF5c1xuICAgICAgICAvLyBzaW5jZSBjb21wYXJpbmcgVWludDhBcnJheSBpcyBub3QgYXMgc3RyYWlnaHRmb3J3YXJkIGFzIGNvbXBhcmluZyBzdHJpbmdzXG4gICAgICAgICgwLCB3ZWIzX3V0aWxzXzEudG9IZXgpKGZvcm1hdHRlZFRyYW5zYWN0aW9uLmRhdGEpICE9PSAoMCwgd2ViM191dGlsc18xLnRvSGV4KShmb3JtYXR0ZWRUcmFuc2FjdGlvbi5pbnB1dCkpXG4gICAgICAgIHRocm93IG5ldyB3ZWIzX2Vycm9yc18xLlRyYW5zYWN0aW9uRGF0YUFuZElucHV0RXJyb3Ioe1xuICAgICAgICAgICAgZGF0YTogKDAsIHdlYjNfdXRpbHNfMS5ieXRlc1RvSGV4KShmb3JtYXR0ZWRUcmFuc2FjdGlvbi5kYXRhKSxcbiAgICAgICAgICAgIGlucHV0OiAoMCwgd2ViM191dGlsc18xLmJ5dGVzVG9IZXgpKGZvcm1hdHRlZFRyYW5zYWN0aW9uLmlucHV0KSxcbiAgICAgICAgfSk7XG4gICAgaWYgKG9wdGlvbnMuZmlsbElucHV0QW5kRGF0YSkge1xuICAgICAgICBpZiAoISgwLCB3ZWIzX3ZhbGlkYXRvcl8xLmlzTnVsbGlzaCkoZm9ybWF0dGVkVHJhbnNhY3Rpb24uZGF0YSkpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFRyYW5zYWN0aW9uLmlucHV0ID0gZm9ybWF0dGVkVHJhbnNhY3Rpb24uZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNOdWxsaXNoKShmb3JtYXR0ZWRUcmFuc2FjdGlvbi5pbnB1dCkpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFRyYW5zYWN0aW9uLmRhdGEgPSBmb3JtYXR0ZWRUcmFuc2FjdGlvbi5pbnB1dDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoISgwLCB3ZWIzX3ZhbGlkYXRvcl8xLmlzTnVsbGlzaCkoZm9ybWF0dGVkVHJhbnNhY3Rpb24uZ2FzTGltaXQpKSB7XG4gICAgICAgIGZvcm1hdHRlZFRyYW5zYWN0aW9uLmdhcyA9IGZvcm1hdHRlZFRyYW5zYWN0aW9uLmdhc0xpbWl0O1xuICAgICAgICBkZWxldGUgZm9ybWF0dGVkVHJhbnNhY3Rpb24uZ2FzTGltaXQ7XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXR0ZWRUcmFuc2FjdGlvbjtcbn1cbmV4cG9ydHMuZm9ybWF0VHJhbnNhY3Rpb24gPSBmb3JtYXRUcmFuc2FjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdF90cmFuc2FjdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/format_transaction.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_revert_reason.js":
/*!*************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_revert_reason.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getRevertReason = exports.parseTransactionError = void 0;\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\nconst web3_eth_abi_1 = __webpack_require__(/*! web3-eth-abi */ \"(api)/./src/pages/api/node_modules/web3-eth-abi/lib/commonjs/index.js\");\nconst web3_types_1 = __webpack_require__(/*! web3-types */ \"(api)/./src/pages/api/node_modules/web3-types/lib/commonjs/index.js\");\n// eslint-disable-next-line import/no-cycle\nconst rpc_method_wrappers_js_1 = __webpack_require__(/*! ../rpc_method_wrappers.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/rpc_method_wrappers.js\");\nconst parseTransactionError = (error, contractAbi) => {\n    var _a, _b, _c, _d, _e;\n    if (error instanceof web3_errors_1.ContractExecutionError && error.cause instanceof web3_errors_1.Eip838ExecutionError) {\n        if (contractAbi !== undefined) {\n            const errorsAbi = contractAbi.filter(abi => (0, web3_eth_abi_1.isAbiErrorFragment)(abi));\n            (0, web3_eth_abi_1.decodeContractErrorData)(errorsAbi, error.cause);\n            return {\n                reason: error.cause.message,\n                signature: (_a = error.cause.data) === null || _a === void 0 ? void 0 : _a.slice(0, 10),\n                data: (_b = error.cause.data) === null || _b === void 0 ? void 0 : _b.substring(10),\n                customErrorName: error.cause.errorName,\n                customErrorDecodedSignature: error.cause.errorSignature,\n                customErrorArguments: error.cause.errorArgs,\n            };\n        }\n        return {\n            reason: error.cause.message,\n            signature: (_c = error.cause.data) === null || _c === void 0 ? void 0 : _c.slice(0, 10),\n            data: (_d = error.cause.data) === null || _d === void 0 ? void 0 : _d.substring(10),\n        };\n    }\n    if (error instanceof web3_errors_1.InvalidResponseError &&\n        !Array.isArray((_e = error.cause) === null || _e === void 0 ? void 0 : _e.errors) &&\n        error.cause !== undefined) {\n        return error.cause.message;\n    }\n    throw error;\n};\nexports.parseTransactionError = parseTransactionError;\n/**\n *\tReturns the revert reason generated by the EVM if the transaction were to be executed.\n *\n * @param web3Context - ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.\n * @returns `undefined` if no revert reason was given, a revert reason object, a revert reason string, or an `unknown` error\n */\nfunction getRevertReason(web3Context, transaction, contractAbi, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield (0, rpc_method_wrappers_js_1.call)(web3Context, transaction, web3Context.defaultBlock, returnFormat);\n            return undefined;\n        }\n        catch (error) {\n            return (0, exports.parseTransactionError)(error, contractAbi);\n        }\n    });\n}\nexports.getRevertReason = getRevertReason;\n//# sourceMappingURL=get_revert_reason.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdXRpbHMvZ2V0X3JldmVydF9yZWFzb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyw2QkFBNkI7QUFDdkQsc0JBQXNCLG1CQUFPLENBQUMseUZBQWE7QUFDM0MsdUJBQXVCLG1CQUFPLENBQUMsMkZBQWM7QUFDN0MscUJBQXFCLG1CQUFPLENBQUMsdUZBQVk7QUFDekM7QUFDQSxpQ0FBaUMsbUJBQU8sQ0FBQyxrSEFBMkI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGtCQUFrQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pc3N1ZXJfaG9sZGVyX3ZlcmlmaWVyLy4vc3JjL3BhZ2VzL2FwaS9ub2RlX21vZHVsZXMvd2ViMy1ldGgvbGliL2NvbW1vbmpzL3V0aWxzL2dldF9yZXZlcnRfcmVhc29uLmpzP2ZjMjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxud2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG5pdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbnRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4oYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG53ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG5idXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbllvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRSZXZlcnRSZWFzb24gPSBleHBvcnRzLnBhcnNlVHJhbnNhY3Rpb25FcnJvciA9IHZvaWQgMDtcbmNvbnN0IHdlYjNfZXJyb3JzXzEgPSByZXF1aXJlKFwid2ViMy1lcnJvcnNcIik7XG5jb25zdCB3ZWIzX2V0aF9hYmlfMSA9IHJlcXVpcmUoXCJ3ZWIzLWV0aC1hYmlcIik7XG5jb25zdCB3ZWIzX3R5cGVzXzEgPSByZXF1aXJlKFwid2ViMy10eXBlc1wiKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcbmNvbnN0IHJwY19tZXRob2Rfd3JhcHBlcnNfanNfMSA9IHJlcXVpcmUoXCIuLi9ycGNfbWV0aG9kX3dyYXBwZXJzLmpzXCIpO1xuY29uc3QgcGFyc2VUcmFuc2FjdGlvbkVycm9yID0gKGVycm9yLCBjb250cmFjdEFiaSkgPT4ge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2Ygd2ViM19lcnJvcnNfMS5Db250cmFjdEV4ZWN1dGlvbkVycm9yICYmIGVycm9yLmNhdXNlIGluc3RhbmNlb2Ygd2ViM19lcnJvcnNfMS5FaXA4MzhFeGVjdXRpb25FcnJvcikge1xuICAgICAgICBpZiAoY29udHJhY3RBYmkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JzQWJpID0gY29udHJhY3RBYmkuZmlsdGVyKGFiaSA9PiAoMCwgd2ViM19ldGhfYWJpXzEuaXNBYmlFcnJvckZyYWdtZW50KShhYmkpKTtcbiAgICAgICAgICAgICgwLCB3ZWIzX2V0aF9hYmlfMS5kZWNvZGVDb250cmFjdEVycm9yRGF0YSkoZXJyb3JzQWJpLCBlcnJvci5jYXVzZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJlYXNvbjogZXJyb3IuY2F1c2UubWVzc2FnZSxcbiAgICAgICAgICAgICAgICBzaWduYXR1cmU6IChfYSA9IGVycm9yLmNhdXNlLmRhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zbGljZSgwLCAxMCksXG4gICAgICAgICAgICAgICAgZGF0YTogKF9iID0gZXJyb3IuY2F1c2UuZGF0YSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnN1YnN0cmluZygxMCksXG4gICAgICAgICAgICAgICAgY3VzdG9tRXJyb3JOYW1lOiBlcnJvci5jYXVzZS5lcnJvck5hbWUsXG4gICAgICAgICAgICAgICAgY3VzdG9tRXJyb3JEZWNvZGVkU2lnbmF0dXJlOiBlcnJvci5jYXVzZS5lcnJvclNpZ25hdHVyZSxcbiAgICAgICAgICAgICAgICBjdXN0b21FcnJvckFyZ3VtZW50czogZXJyb3IuY2F1c2UuZXJyb3JBcmdzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVhc29uOiBlcnJvci5jYXVzZS5tZXNzYWdlLFxuICAgICAgICAgICAgc2lnbmF0dXJlOiAoX2MgPSBlcnJvci5jYXVzZS5kYXRhKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Muc2xpY2UoMCwgMTApLFxuICAgICAgICAgICAgZGF0YTogKF9kID0gZXJyb3IuY2F1c2UuZGF0YSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnN1YnN0cmluZygxMCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIHdlYjNfZXJyb3JzXzEuSW52YWxpZFJlc3BvbnNlRXJyb3IgJiZcbiAgICAgICAgIUFycmF5LmlzQXJyYXkoKF9lID0gZXJyb3IuY2F1c2UpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5lcnJvcnMpICYmXG4gICAgICAgIGVycm9yLmNhdXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLmNhdXNlLm1lc3NhZ2U7XG4gICAgfVxuICAgIHRocm93IGVycm9yO1xufTtcbmV4cG9ydHMucGFyc2VUcmFuc2FjdGlvbkVycm9yID0gcGFyc2VUcmFuc2FjdGlvbkVycm9yO1xuLyoqXG4gKlx0UmV0dXJucyB0aGUgcmV2ZXJ0IHJlYXNvbiBnZW5lcmF0ZWQgYnkgdGhlIEVWTSBpZiB0aGUgdHJhbnNhY3Rpb24gd2VyZSB0byBiZSBleGVjdXRlZC5cbiAqXG4gKiBAcGFyYW0gd2ViM0NvbnRleHQgLSAoe0BsaW5rIFdlYjNDb250ZXh0fSkgV2ViMyBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaW5ncyBzdWNoIGFzIHRoZSBwcm92aWRlciwgcmVxdWVzdCBtYW5hZ2VyLCB3YWxsZXQsIGV0Yy5cbiAqIEBwYXJhbSB0cmFuc2FjdGlvbiAtIEEgdHJhbnNhY3Rpb24gb2JqZWN0IHdoZXJlIGFsbCBwcm9wZXJ0aWVzIGFyZSBvcHRpb25hbCBleGNlcHQgYHRvYCwgaG93ZXZlciBpdCdzIHJlY29tbWVuZGVkIHRvIGluY2x1ZGUgdGhlIGBmcm9tYCBwcm9wZXJ0eSBvciBpdCBtYXkgZGVmYXVsdCB0byBgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYCBkZXBlbmRpbmcgb24geW91ciBub2RlIG9yIHByb3ZpZGVyLlxuICogQHJldHVybnMgYHVuZGVmaW5lZGAgaWYgbm8gcmV2ZXJ0IHJlYXNvbiB3YXMgZ2l2ZW4sIGEgcmV2ZXJ0IHJlYXNvbiBvYmplY3QsIGEgcmV2ZXJ0IHJlYXNvbiBzdHJpbmcsIG9yIGFuIGB1bmtub3duYCBlcnJvclxuICovXG5mdW5jdGlvbiBnZXRSZXZlcnRSZWFzb24od2ViM0NvbnRleHQsIHRyYW5zYWN0aW9uLCBjb250cmFjdEFiaSwgcmV0dXJuRm9ybWF0ID0gd2ViM190eXBlc18xLkRFRkFVTFRfUkVUVVJOX0ZPUk1BVCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB5aWVsZCAoMCwgcnBjX21ldGhvZF93cmFwcGVyc19qc18xLmNhbGwpKHdlYjNDb250ZXh0LCB0cmFuc2FjdGlvbiwgd2ViM0NvbnRleHQuZGVmYXVsdEJsb2NrLCByZXR1cm5Gb3JtYXQpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgZXhwb3J0cy5wYXJzZVRyYW5zYWN0aW9uRXJyb3IpKGVycm9yLCBjb250cmFjdEFiaSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0UmV2ZXJ0UmVhc29uID0gZ2V0UmV2ZXJ0UmVhc29uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0X3JldmVydF9yZWFzb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_revert_reason.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_transaction_error.js":
/*!*****************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_transaction_error.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getTransactionError = void 0;\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\n// eslint-disable-next-line import/no-cycle\nconst get_revert_reason_js_1 = __webpack_require__(/*! ./get_revert_reason.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_revert_reason.js\");\nfunction getTransactionError(web3Context, transactionFormatted, transactionReceiptFormatted, receivedError, contractAbi, knownReason) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let _reason = knownReason;\n        if (_reason === undefined) {\n            if (receivedError !== undefined) {\n                _reason = (0, get_revert_reason_js_1.parseTransactionError)(receivedError);\n            }\n            else if (web3Context.handleRevert && transactionFormatted !== undefined) {\n                _reason = yield (0, get_revert_reason_js_1.getRevertReason)(web3Context, transactionFormatted, contractAbi);\n            }\n        }\n        let error;\n        if (_reason === undefined) {\n            error = new web3_errors_1.TransactionRevertedWithoutReasonError(transactionReceiptFormatted);\n        }\n        else if (typeof _reason === 'string') {\n            error = new web3_errors_1.TransactionRevertInstructionError(_reason, undefined, transactionReceiptFormatted);\n        }\n        else if (_reason.customErrorName !== undefined &&\n            _reason.customErrorDecodedSignature !== undefined &&\n            _reason.customErrorArguments !== undefined) {\n            const reasonWithCustomError = _reason;\n            error = new web3_errors_1.TransactionRevertWithCustomError(reasonWithCustomError.reason, reasonWithCustomError.customErrorName, reasonWithCustomError.customErrorDecodedSignature, reasonWithCustomError.customErrorArguments, reasonWithCustomError.signature, transactionReceiptFormatted, reasonWithCustomError.data);\n        }\n        else {\n            error = new web3_errors_1.TransactionRevertInstructionError(_reason.reason, _reason.signature, transactionReceiptFormatted, _reason.data);\n        }\n        return error;\n    });\n}\nexports.getTransactionError = getTransactionError;\n//# sourceMappingURL=get_transaction_error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdXRpbHMvZ2V0X3RyYW5zYWN0aW9uX2Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLHNCQUFzQixtQkFBTyxDQUFDLHlGQUFhO0FBQzNDO0FBQ0EsK0JBQStCLG1CQUFPLENBQUMsbUhBQXdCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXNzdWVyX2hvbGRlcl92ZXJpZmllci8uL3NyYy9wYWdlcy9hcGkvbm9kZV9tb2R1bGVzL3dlYjMtZXRoL2xpYi9jb21tb25qcy91dGlscy9nZXRfdHJhbnNhY3Rpb25fZXJyb3IuanM/YmI5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG5UaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG53ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbml0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxudGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbndlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG5NRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG5HTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG5hbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFRyYW5zYWN0aW9uRXJyb3IgPSB2b2lkIDA7XG5jb25zdCB3ZWIzX2Vycm9yc18xID0gcmVxdWlyZShcIndlYjMtZXJyb3JzXCIpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1jeWNsZVxuY29uc3QgZ2V0X3JldmVydF9yZWFzb25fanNfMSA9IHJlcXVpcmUoXCIuL2dldF9yZXZlcnRfcmVhc29uLmpzXCIpO1xuZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25FcnJvcih3ZWIzQ29udGV4dCwgdHJhbnNhY3Rpb25Gb3JtYXR0ZWQsIHRyYW5zYWN0aW9uUmVjZWlwdEZvcm1hdHRlZCwgcmVjZWl2ZWRFcnJvciwgY29udHJhY3RBYmksIGtub3duUmVhc29uKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgbGV0IF9yZWFzb24gPSBrbm93blJlYXNvbjtcbiAgICAgICAgaWYgKF9yZWFzb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHJlY2VpdmVkRXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIF9yZWFzb24gPSAoMCwgZ2V0X3JldmVydF9yZWFzb25fanNfMS5wYXJzZVRyYW5zYWN0aW9uRXJyb3IpKHJlY2VpdmVkRXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAod2ViM0NvbnRleHQuaGFuZGxlUmV2ZXJ0ICYmIHRyYW5zYWN0aW9uRm9ybWF0dGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBfcmVhc29uID0geWllbGQgKDAsIGdldF9yZXZlcnRfcmVhc29uX2pzXzEuZ2V0UmV2ZXJ0UmVhc29uKSh3ZWIzQ29udGV4dCwgdHJhbnNhY3Rpb25Gb3JtYXR0ZWQsIGNvbnRyYWN0QWJpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgZXJyb3I7XG4gICAgICAgIGlmIChfcmVhc29uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVycm9yID0gbmV3IHdlYjNfZXJyb3JzXzEuVHJhbnNhY3Rpb25SZXZlcnRlZFdpdGhvdXRSZWFzb25FcnJvcih0cmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBfcmVhc29uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZXJyb3IgPSBuZXcgd2ViM19lcnJvcnNfMS5UcmFuc2FjdGlvblJldmVydEluc3RydWN0aW9uRXJyb3IoX3JlYXNvbiwgdW5kZWZpbmVkLCB0cmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9yZWFzb24uY3VzdG9tRXJyb3JOYW1lICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIF9yZWFzb24uY3VzdG9tRXJyb3JEZWNvZGVkU2lnbmF0dXJlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIF9yZWFzb24uY3VzdG9tRXJyb3JBcmd1bWVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgcmVhc29uV2l0aEN1c3RvbUVycm9yID0gX3JlYXNvbjtcbiAgICAgICAgICAgIGVycm9yID0gbmV3IHdlYjNfZXJyb3JzXzEuVHJhbnNhY3Rpb25SZXZlcnRXaXRoQ3VzdG9tRXJyb3IocmVhc29uV2l0aEN1c3RvbUVycm9yLnJlYXNvbiwgcmVhc29uV2l0aEN1c3RvbUVycm9yLmN1c3RvbUVycm9yTmFtZSwgcmVhc29uV2l0aEN1c3RvbUVycm9yLmN1c3RvbUVycm9yRGVjb2RlZFNpZ25hdHVyZSwgcmVhc29uV2l0aEN1c3RvbUVycm9yLmN1c3RvbUVycm9yQXJndW1lbnRzLCByZWFzb25XaXRoQ3VzdG9tRXJyb3Iuc2lnbmF0dXJlLCB0cmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZWQsIHJlYXNvbldpdGhDdXN0b21FcnJvci5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVycm9yID0gbmV3IHdlYjNfZXJyb3JzXzEuVHJhbnNhY3Rpb25SZXZlcnRJbnN0cnVjdGlvbkVycm9yKF9yZWFzb24ucmVhc29uLCBfcmVhc29uLnNpZ25hdHVyZSwgdHJhbnNhY3Rpb25SZWNlaXB0Rm9ybWF0dGVkLCBfcmVhc29uLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0VHJhbnNhY3Rpb25FcnJvciA9IGdldFRyYW5zYWN0aW9uRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRfdHJhbnNhY3Rpb25fZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_transaction_error.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_transaction_gas_pricing.js":
/*!***********************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_transaction_gas_pricing.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getTransactionGasPricing = void 0;\nconst web3_validator_1 = __webpack_require__(/*! web3-validator */ \"(api)/./src/pages/api/node_modules/web3-validator/lib/commonjs/index.js\");\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\n// eslint-disable-next-line import/no-cycle\nconst rpc_method_wrappers_js_1 = __webpack_require__(/*! ../rpc_method_wrappers.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/rpc_method_wrappers.js\");\n// eslint-disable-next-line import/no-cycle\nconst transaction_builder_js_1 = __webpack_require__(/*! ./transaction_builder.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/transaction_builder.js\");\nfunction getEip1559GasPricing(transaction, web3Context, returnFormat) {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function* () {\n        const block = yield (0, rpc_method_wrappers_js_1.getBlock)(web3Context, web3Context.defaultBlock, false, returnFormat);\n        if ((0, web3_validator_1.isNullish)(block.baseFeePerGas))\n            throw new web3_errors_1.Eip1559NotSupportedError();\n        if (!(0, web3_validator_1.isNullish)(transaction.gasPrice)) {\n            const convertedTransactionGasPrice = (0, web3_utils_1.format)({ format: 'uint' }, transaction.gasPrice, returnFormat);\n            return {\n                maxPriorityFeePerGas: convertedTransactionGasPrice,\n                maxFeePerGas: convertedTransactionGasPrice,\n            };\n        }\n        return {\n            maxPriorityFeePerGas: (0, web3_utils_1.format)({ format: 'uint' }, (_a = transaction.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : web3Context.defaultMaxPriorityFeePerGas, returnFormat),\n            maxFeePerGas: (0, web3_utils_1.format)({ format: 'uint' }, ((_b = transaction.maxFeePerGas) !== null && _b !== void 0 ? _b : BigInt(block.baseFeePerGas) * BigInt(2) +\n                BigInt((_c = transaction.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : web3Context.defaultMaxPriorityFeePerGas)), returnFormat),\n        };\n    });\n}\nfunction getTransactionGasPricing(transaction, web3Context, returnFormat) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const transactionType = (0, transaction_builder_js_1.getTransactionType)(transaction, web3Context);\n        if (!(0, web3_validator_1.isNullish)(transactionType)) {\n            if (transactionType.startsWith('-'))\n                throw new web3_errors_1.UnsupportedTransactionTypeError(transactionType);\n            // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2718.md#transactions\n            if (Number(transactionType) < 0 || Number(transactionType) > 127)\n                throw new web3_errors_1.UnsupportedTransactionTypeError(transactionType);\n            if ((0, web3_validator_1.isNullish)(transaction.gasPrice) &&\n                (transactionType === '0x0' || transactionType === '0x1'))\n                return {\n                    gasPrice: yield (0, rpc_method_wrappers_js_1.getGasPrice)(web3Context, returnFormat),\n                    maxPriorityFeePerGas: undefined,\n                    maxFeePerGas: undefined,\n                };\n            if (transactionType === '0x2') {\n                return Object.assign({ gasPrice: undefined }, (yield getEip1559GasPricing(transaction, web3Context, returnFormat)));\n            }\n        }\n        return undefined;\n    });\n}\nexports.getTransactionGasPricing = getTransactionGasPricing;\n//# sourceMappingURL=get_transaction_gas_pricing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdXRpbHMvZ2V0X3RyYW5zYWN0aW9uX2dhc19wcmljaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDO0FBQ2hDLHlCQUF5QixtQkFBTyxDQUFDLCtGQUFnQjtBQUNqRCxzQkFBc0IsbUJBQU8sQ0FBQyx5RkFBYTtBQUMzQyxxQkFBcUIsbUJBQU8sQ0FBQyx1RkFBWTtBQUN6QztBQUNBLGlDQUFpQyxtQkFBTyxDQUFDLGtIQUEyQjtBQUNwRTtBQUNBLGlDQUFpQyxtQkFBTyxDQUFDLHVIQUEwQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxnQkFBZ0I7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGdCQUFnQjtBQUM3RSxxREFBcUQsZ0JBQWdCO0FBQ3JFO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLHFCQUFxQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pc3N1ZXJfaG9sZGVyX3ZlcmlmaWVyLy4vc3JjL3BhZ2VzL2FwaS9ub2RlX21vZHVsZXMvd2ViMy1ldGgvbGliL2NvbW1vbmpzL3V0aWxzL2dldF90cmFuc2FjdGlvbl9nYXNfcHJpY2luZy5qcz9hMGM5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VHJhbnNhY3Rpb25HYXNQcmljaW5nID0gdm9pZCAwO1xuY29uc3Qgd2ViM192YWxpZGF0b3JfMSA9IHJlcXVpcmUoXCJ3ZWIzLXZhbGlkYXRvclwiKTtcbmNvbnN0IHdlYjNfZXJyb3JzXzEgPSByZXF1aXJlKFwid2ViMy1lcnJvcnNcIik7XG5jb25zdCB3ZWIzX3V0aWxzXzEgPSByZXF1aXJlKFwid2ViMy11dGlsc1wiKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcbmNvbnN0IHJwY19tZXRob2Rfd3JhcHBlcnNfanNfMSA9IHJlcXVpcmUoXCIuLi9ycGNfbWV0aG9kX3dyYXBwZXJzLmpzXCIpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1jeWNsZVxuY29uc3QgdHJhbnNhY3Rpb25fYnVpbGRlcl9qc18xID0gcmVxdWlyZShcIi4vdHJhbnNhY3Rpb25fYnVpbGRlci5qc1wiKTtcbmZ1bmN0aW9uIGdldEVpcDE1NTlHYXNQcmljaW5nKHRyYW5zYWN0aW9uLCB3ZWIzQ29udGV4dCwgcmV0dXJuRm9ybWF0KSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSB5aWVsZCAoMCwgcnBjX21ldGhvZF93cmFwcGVyc19qc18xLmdldEJsb2NrKSh3ZWIzQ29udGV4dCwgd2ViM0NvbnRleHQuZGVmYXVsdEJsb2NrLCBmYWxzZSwgcmV0dXJuRm9ybWF0KTtcbiAgICAgICAgaWYgKCgwLCB3ZWIzX3ZhbGlkYXRvcl8xLmlzTnVsbGlzaCkoYmxvY2suYmFzZUZlZVBlckdhcykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgd2ViM19lcnJvcnNfMS5FaXAxNTU5Tm90U3VwcG9ydGVkRXJyb3IoKTtcbiAgICAgICAgaWYgKCEoMCwgd2ViM192YWxpZGF0b3JfMS5pc051bGxpc2gpKHRyYW5zYWN0aW9uLmdhc1ByaWNlKSkge1xuICAgICAgICAgICAgY29uc3QgY29udmVydGVkVHJhbnNhY3Rpb25HYXNQcmljZSA9ICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ3VpbnQnIH0sIHRyYW5zYWN0aW9uLmdhc1ByaWNlLCByZXR1cm5Gb3JtYXQpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhczogY29udmVydGVkVHJhbnNhY3Rpb25HYXNQcmljZSxcbiAgICAgICAgICAgICAgICBtYXhGZWVQZXJHYXM6IGNvbnZlcnRlZFRyYW5zYWN0aW9uR2FzUHJpY2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhczogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgKF9hID0gdHJhbnNhY3Rpb24ubWF4UHJpb3JpdHlGZWVQZXJHYXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHdlYjNDb250ZXh0LmRlZmF1bHRNYXhQcmlvcml0eUZlZVBlckdhcywgcmV0dXJuRm9ybWF0KSxcbiAgICAgICAgICAgIG1heEZlZVBlckdhczogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgKChfYiA9IHRyYW5zYWN0aW9uLm1heEZlZVBlckdhcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogQmlnSW50KGJsb2NrLmJhc2VGZWVQZXJHYXMpICogQmlnSW50KDIpICtcbiAgICAgICAgICAgICAgICBCaWdJbnQoKF9jID0gdHJhbnNhY3Rpb24ubWF4UHJpb3JpdHlGZWVQZXJHYXMpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHdlYjNDb250ZXh0LmRlZmF1bHRNYXhQcmlvcml0eUZlZVBlckdhcykpLCByZXR1cm5Gb3JtYXQpLFxuICAgICAgICB9O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25HYXNQcmljaW5nKHRyYW5zYWN0aW9uLCB3ZWIzQ29udGV4dCwgcmV0dXJuRm9ybWF0KSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25UeXBlID0gKDAsIHRyYW5zYWN0aW9uX2J1aWxkZXJfanNfMS5nZXRUcmFuc2FjdGlvblR5cGUpKHRyYW5zYWN0aW9uLCB3ZWIzQ29udGV4dCk7XG4gICAgICAgIGlmICghKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNOdWxsaXNoKSh0cmFuc2FjdGlvblR5cGUpKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNhY3Rpb25UeXBlLnN0YXJ0c1dpdGgoJy0nKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgd2ViM19lcnJvcnNfMS5VbnN1cHBvcnRlZFRyYW5zYWN0aW9uVHlwZUVycm9yKHRyYW5zYWN0aW9uVHlwZSk7XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9ibG9iL21hc3Rlci9FSVBTL2VpcC0yNzE4Lm1kI3RyYW5zYWN0aW9uc1xuICAgICAgICAgICAgaWYgKE51bWJlcih0cmFuc2FjdGlvblR5cGUpIDwgMCB8fCBOdW1iZXIodHJhbnNhY3Rpb25UeXBlKSA+IDEyNylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgd2ViM19lcnJvcnNfMS5VbnN1cHBvcnRlZFRyYW5zYWN0aW9uVHlwZUVycm9yKHRyYW5zYWN0aW9uVHlwZSk7XG4gICAgICAgICAgICBpZiAoKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNOdWxsaXNoKSh0cmFuc2FjdGlvbi5nYXNQcmljZSkgJiZcbiAgICAgICAgICAgICAgICAodHJhbnNhY3Rpb25UeXBlID09PSAnMHgwJyB8fCB0cmFuc2FjdGlvblR5cGUgPT09ICcweDEnKSlcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBnYXNQcmljZTogeWllbGQgKDAsIHJwY19tZXRob2Rfd3JhcHBlcnNfanNfMS5nZXRHYXNQcmljZSkod2ViM0NvbnRleHQsIHJldHVybkZvcm1hdCksXG4gICAgICAgICAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIG1heEZlZVBlckdhczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodHJhbnNhY3Rpb25UeXBlID09PSAnMHgyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgZ2FzUHJpY2U6IHVuZGVmaW5lZCB9LCAoeWllbGQgZ2V0RWlwMTU1OUdhc1ByaWNpbmcodHJhbnNhY3Rpb24sIHdlYjNDb250ZXh0LCByZXR1cm5Gb3JtYXQpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZ2V0VHJhbnNhY3Rpb25HYXNQcmljaW5nID0gZ2V0VHJhbnNhY3Rpb25HYXNQcmljaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0X3RyYW5zYWN0aW9uX2dhc19wcmljaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_transaction_gas_pricing.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/prepare_transaction_for_signing.js":
/*!***************************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/prepare_transaction_for_signing.js ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.prepareTransactionForSigning = void 0;\nconst web3_types_1 = __webpack_require__(/*! web3-types */ \"(api)/./src/pages/api/node_modules/web3-types/lib/commonjs/index.js\");\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst web3_eth_accounts_1 = __webpack_require__(/*! web3-eth-accounts */ \"(api)/./src/pages/api/node_modules/web3-eth-accounts/lib/commonjs/index.js\");\nconst web3_validator_1 = __webpack_require__(/*! web3-validator */ \"(api)/./src/pages/api/node_modules/web3-validator/lib/commonjs/index.js\");\nconst validation_js_1 = __webpack_require__(/*! ../validation.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/validation.js\");\nconst format_transaction_js_1 = __webpack_require__(/*! ./format_transaction.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/format_transaction.js\");\nconst transaction_builder_js_1 = __webpack_require__(/*! ./transaction_builder.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/transaction_builder.js\");\nconst getEthereumjsTxDataFromTransaction = (transaction) => {\n    var _a, _b;\n    return ({\n        nonce: transaction.nonce,\n        gasPrice: transaction.gasPrice,\n        gasLimit: (_a = transaction.gasLimit) !== null && _a !== void 0 ? _a : transaction.gas,\n        to: transaction.to,\n        value: transaction.value,\n        data: (_b = transaction.data) !== null && _b !== void 0 ? _b : transaction.input,\n        type: transaction.type,\n        chainId: transaction.chainId,\n        accessList: transaction.accessList,\n        maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n        maxFeePerGas: transaction.maxFeePerGas,\n    });\n};\nconst getEthereumjsTransactionOptions = (transaction, web3Context) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n    const hasTransactionSigningOptions = (!(0, web3_validator_1.isNullish)(transaction.chain) && !(0, web3_validator_1.isNullish)(transaction.hardfork)) ||\n        !(0, web3_validator_1.isNullish)(transaction.common);\n    let common;\n    if (!hasTransactionSigningOptions) {\n        // if defaultcommon is specified, use that.\n        if (web3Context.defaultCommon) {\n            common = Object.assign({}, web3Context.defaultCommon);\n            if ((0, web3_validator_1.isNullish)(common.hardfork))\n                common.hardfork = (_a = transaction.hardfork) !== null && _a !== void 0 ? _a : web3Context.defaultHardfork;\n            if ((0, web3_validator_1.isNullish)(common.baseChain))\n                common.baseChain = web3Context.defaultChain;\n        }\n        else {\n            common = web3_eth_accounts_1.Common.custom({\n                name: 'custom-network',\n                chainId: (0, web3_utils_1.toNumber)(transaction.chainId),\n                networkId: !(0, web3_validator_1.isNullish)(transaction.networkId)\n                    ? (0, web3_utils_1.toNumber)(transaction.networkId)\n                    : undefined,\n                defaultHardfork: (_b = transaction.hardfork) !== null && _b !== void 0 ? _b : web3Context.defaultHardfork,\n            }, {\n                baseChain: web3Context.defaultChain,\n            });\n        }\n    }\n    else {\n        const name = (_f = (_e = (_d = (_c = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _c === void 0 ? void 0 : _c.customChain) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : transaction.chain) !== null && _f !== void 0 ? _f : 'custom-network';\n        const chainId = (0, web3_utils_1.toNumber)((_j = (_h = (_g = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _g === void 0 ? void 0 : _g.customChain) === null || _h === void 0 ? void 0 : _h.chainId) !== null && _j !== void 0 ? _j : transaction === null || transaction === void 0 ? void 0 : transaction.chainId);\n        const networkId = (0, web3_utils_1.toNumber)((_m = (_l = (_k = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _k === void 0 ? void 0 : _k.customChain) === null || _l === void 0 ? void 0 : _l.networkId) !== null && _m !== void 0 ? _m : transaction === null || transaction === void 0 ? void 0 : transaction.networkId);\n        const defaultHardfork = (_q = (_p = (_o = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _o === void 0 ? void 0 : _o.hardfork) !== null && _p !== void 0 ? _p : transaction === null || transaction === void 0 ? void 0 : transaction.hardfork) !== null && _q !== void 0 ? _q : web3Context.defaultHardfork;\n        const baseChain = (_t = (_s = (_r = transaction.common) === null || _r === void 0 ? void 0 : _r.baseChain) !== null && _s !== void 0 ? _s : transaction.chain) !== null && _t !== void 0 ? _t : web3Context.defaultChain;\n        if (chainId && networkId && name) {\n            common = web3_eth_accounts_1.Common.custom({\n                name,\n                chainId,\n                networkId,\n                defaultHardfork,\n            }, {\n                baseChain,\n            });\n        }\n    }\n    return { common };\n};\nconst prepareTransactionForSigning = (transaction, web3Context, privateKey, fillGasPrice = false, fillGasLimit = true) => __awaiter(void 0, void 0, void 0, function* () {\n    const populatedTransaction = (yield (0, transaction_builder_js_1.transactionBuilder)({\n        transaction,\n        web3Context,\n        privateKey,\n        fillGasPrice,\n        fillGasLimit,\n    }));\n    const formattedTransaction = (0, format_transaction_js_1.formatTransaction)(populatedTransaction, web3_types_1.ETH_DATA_FORMAT);\n    (0, validation_js_1.validateTransactionForSigning)(formattedTransaction);\n    return web3_eth_accounts_1.TransactionFactory.fromTxData(getEthereumjsTxDataFromTransaction(formattedTransaction), getEthereumjsTransactionOptions(formattedTransaction, web3Context));\n});\nexports.prepareTransactionForSigning = prepareTransactionForSigning;\n//# sourceMappingURL=prepare_transaction_for_signing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/prepare_transaction_for_signing.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/reject_if_block_timeout.js":
/*!*******************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/reject_if_block_timeout.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.rejectIfBlockTimeout = void 0;\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/constants.js\");\n// eslint-disable-next-line import/no-cycle\nconst rpc_method_wrappers_js_1 = __webpack_require__(/*! ../rpc_method_wrappers.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/rpc_method_wrappers.js\");\nfunction resolveByPolling(web3Context, starterBlockNumber, transactionHash) {\n    const pollingInterval = web3Context.transactionPollingInterval;\n    const [intervalId, promiseToError] = (0, web3_utils_1.rejectIfConditionAtInterval)(() => __awaiter(this, void 0, void 0, function* () {\n        let lastBlockNumber;\n        try {\n            lastBlockNumber = yield (0, rpc_method_wrappers_js_1.getBlockNumber)(web3Context, constants_js_1.NUMBER_DATA_FORMAT);\n        }\n        catch (error) {\n            console.warn('An error happen while trying to get the block number', error);\n            return undefined;\n        }\n        const numberOfBlocks = lastBlockNumber - starterBlockNumber;\n        if (numberOfBlocks >= web3Context.transactionBlockTimeout) {\n            return new web3_errors_1.TransactionBlockTimeoutError({\n                starterBlockNumber,\n                numberOfBlocks,\n                transactionHash,\n            });\n        }\n        return undefined;\n    }), pollingInterval);\n    const clean = () => {\n        clearInterval(intervalId);\n    };\n    return [promiseToError, { clean }];\n}\nfunction resolveBySubscription(web3Context, starterBlockNumber, transactionHash) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        // The following variable will stay true except if the data arrived,\n        //\tor if watching started after an error had occurred.\n        let needToWatchLater = true;\n        let subscription;\n        let resourceCleaner;\n        // internal helper function\n        function revertToPolling(reject, previousError) {\n            if (previousError) {\n                console.warn('error happened at subscription. So revert to polling...', previousError);\n            }\n            resourceCleaner.clean();\n            needToWatchLater = false;\n            const [promiseToError, newResourceCleaner] = resolveByPolling(web3Context, starterBlockNumber, transactionHash);\n            resourceCleaner.clean = newResourceCleaner.clean;\n            promiseToError.catch(error => reject(error));\n        }\n        try {\n            subscription = (yield ((_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe('newHeads')));\n            resourceCleaner = {\n                clean: () => {\n                    var _a;\n                    // Remove the subscription, if it was not removed somewhere\n                    // \telse by calling, for example, subscriptionManager.clear()\n                    if (subscription.id) {\n                        (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.removeSubscription(subscription).then(() => {\n                            // Subscription ended successfully\n                        }).catch(() => {\n                            // An error happened while ending subscription. But no need to take any action.\n                        });\n                    }\n                },\n            };\n        }\n        catch (error) {\n            return resolveByPolling(web3Context, starterBlockNumber, transactionHash);\n        }\n        const promiseToError = new Promise((_, reject) => {\n            try {\n                subscription.on('data', (lastBlockHeader) => {\n                    needToWatchLater = false;\n                    if (!(lastBlockHeader === null || lastBlockHeader === void 0 ? void 0 : lastBlockHeader.number)) {\n                        return;\n                    }\n                    const numberOfBlocks = Number(BigInt(lastBlockHeader.number) - BigInt(starterBlockNumber));\n                    if (numberOfBlocks >= web3Context.transactionBlockTimeout) {\n                        // Transaction Block Timeout is known to be reached by subscribing to new heads\n                        reject(new web3_errors_1.TransactionBlockTimeoutError({\n                            starterBlockNumber,\n                            numberOfBlocks,\n                            transactionHash,\n                        }));\n                    }\n                });\n                subscription.on('error', error => {\n                    revertToPolling(reject, error);\n                });\n            }\n            catch (error) {\n                revertToPolling(reject, error);\n            }\n            // Fallback to polling if tx receipt didn't arrived in \"blockHeaderTimeout\" [10 seconds]\n            setTimeout(() => {\n                if (needToWatchLater) {\n                    revertToPolling(reject);\n                }\n            }, web3Context.blockHeaderTimeout * 1000);\n        });\n        return [promiseToError, resourceCleaner];\n    });\n}\n/* TODO: After merge, there will be constant block mining time (exactly 12 second each block, except slot missed that currently happens in <1% of slots. ) so we can optimize following function\nfor POS NWs, we can skip checking getBlockNumber(); after interval and calculate only based on time  that certain num of blocked are mined after that for internal double check, can do one getBlockNumber() call and timeout.\n*/\nfunction rejectIfBlockTimeout(web3Context, transactionHash) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n        const { provider } = web3Context.requestManager;\n        let callingRes;\n        const starterBlockNumber = yield (0, rpc_method_wrappers_js_1.getBlockNumber)(web3Context, constants_js_1.NUMBER_DATA_FORMAT);\n        // TODO: once https://github.com/web3/web3.js/issues/5521 is implemented, remove checking for `enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout`\n        if (((_b = (_a = provider).supportsSubscriptions) === null || _b === void 0 ? void 0 : _b.call(_a)) &&\n            web3Context.enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout) {\n            callingRes = yield resolveBySubscription(web3Context, starterBlockNumber, transactionHash);\n        }\n        else {\n            callingRes = resolveByPolling(web3Context, starterBlockNumber, transactionHash);\n        }\n        return callingRes;\n    });\n}\nexports.rejectIfBlockTimeout = rejectIfBlockTimeout;\n//# sourceMappingURL=reject_if_block_timeout.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdXRpbHMvcmVqZWN0X2lmX2Jsb2NrX3RpbWVvdXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QixxQkFBcUIsbUJBQU8sQ0FBQyx1RkFBWTtBQUN6QyxzQkFBc0IsbUJBQU8sQ0FBQyx5RkFBYTtBQUMzQyx1QkFBdUIsbUJBQU8sQ0FBQyw4RkFBaUI7QUFDaEQ7QUFDQSxpQ0FBaUMsbUJBQU8sQ0FBQyxrSEFBMkI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixPQUFPO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixXQUFXO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pc3N1ZXJfaG9sZGVyX3ZlcmlmaWVyLy4vc3JjL3BhZ2VzL2FwaS9ub2RlX21vZHVsZXMvd2ViMy1ldGgvbGliL2NvbW1vbmpzL3V0aWxzL3JlamVjdF9pZl9ibG9ja190aW1lb3V0LmpzP2ViMzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVqZWN0SWZCbG9ja1RpbWVvdXQgPSB2b2lkIDA7XG5jb25zdCB3ZWIzX3V0aWxzXzEgPSByZXF1aXJlKFwid2ViMy11dGlsc1wiKTtcbmNvbnN0IHdlYjNfZXJyb3JzXzEgPSByZXF1aXJlKFwid2ViMy1lcnJvcnNcIik7XG5jb25zdCBjb25zdGFudHNfanNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHMuanNcIik7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWN5Y2xlXG5jb25zdCBycGNfbWV0aG9kX3dyYXBwZXJzX2pzXzEgPSByZXF1aXJlKFwiLi4vcnBjX21ldGhvZF93cmFwcGVycy5qc1wiKTtcbmZ1bmN0aW9uIHJlc29sdmVCeVBvbGxpbmcod2ViM0NvbnRleHQsIHN0YXJ0ZXJCbG9ja051bWJlciwgdHJhbnNhY3Rpb25IYXNoKSB7XG4gICAgY29uc3QgcG9sbGluZ0ludGVydmFsID0gd2ViM0NvbnRleHQudHJhbnNhY3Rpb25Qb2xsaW5nSW50ZXJ2YWw7XG4gICAgY29uc3QgW2ludGVydmFsSWQsIHByb21pc2VUb0Vycm9yXSA9ICgwLCB3ZWIzX3V0aWxzXzEucmVqZWN0SWZDb25kaXRpb25BdEludGVydmFsKSgoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGxldCBsYXN0QmxvY2tOdW1iZXI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsYXN0QmxvY2tOdW1iZXIgPSB5aWVsZCAoMCwgcnBjX21ldGhvZF93cmFwcGVyc19qc18xLmdldEJsb2NrTnVtYmVyKSh3ZWIzQ29udGV4dCwgY29uc3RhbnRzX2pzXzEuTlVNQkVSX0RBVEFfRk9STUFUKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQW4gZXJyb3IgaGFwcGVuIHdoaWxlIHRyeWluZyB0byBnZXQgdGhlIGJsb2NrIG51bWJlcicsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbnVtYmVyT2ZCbG9ja3MgPSBsYXN0QmxvY2tOdW1iZXIgLSBzdGFydGVyQmxvY2tOdW1iZXI7XG4gICAgICAgIGlmIChudW1iZXJPZkJsb2NrcyA+PSB3ZWIzQ29udGV4dC50cmFuc2FjdGlvbkJsb2NrVGltZW91dCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyB3ZWIzX2Vycm9yc18xLlRyYW5zYWN0aW9uQmxvY2tUaW1lb3V0RXJyb3Ioe1xuICAgICAgICAgICAgICAgIHN0YXJ0ZXJCbG9ja051bWJlcixcbiAgICAgICAgICAgICAgICBudW1iZXJPZkJsb2NrcyxcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2gsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0pLCBwb2xsaW5nSW50ZXJ2YWwpO1xuICAgIGNvbnN0IGNsZWFuID0gKCkgPT4ge1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgIH07XG4gICAgcmV0dXJuIFtwcm9taXNlVG9FcnJvciwgeyBjbGVhbiB9XTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVCeVN1YnNjcmlwdGlvbih3ZWIzQ29udGV4dCwgc3RhcnRlckJsb2NrTnVtYmVyLCB0cmFuc2FjdGlvbkhhc2gpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyB2YXJpYWJsZSB3aWxsIHN0YXkgdHJ1ZSBleGNlcHQgaWYgdGhlIGRhdGEgYXJyaXZlZCxcbiAgICAgICAgLy9cdG9yIGlmIHdhdGNoaW5nIHN0YXJ0ZWQgYWZ0ZXIgYW4gZXJyb3IgaGFkIG9jY3VycmVkLlxuICAgICAgICBsZXQgbmVlZFRvV2F0Y2hMYXRlciA9IHRydWU7XG4gICAgICAgIGxldCBzdWJzY3JpcHRpb247XG4gICAgICAgIGxldCByZXNvdXJjZUNsZWFuZXI7XG4gICAgICAgIC8vIGludGVybmFsIGhlbHBlciBmdW5jdGlvblxuICAgICAgICBmdW5jdGlvbiByZXZlcnRUb1BvbGxpbmcocmVqZWN0LCBwcmV2aW91c0Vycm9yKSB7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNFcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignZXJyb3IgaGFwcGVuZWQgYXQgc3Vic2NyaXB0aW9uLiBTbyByZXZlcnQgdG8gcG9sbGluZy4uLicsIHByZXZpb3VzRXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb3VyY2VDbGVhbmVyLmNsZWFuKCk7XG4gICAgICAgICAgICBuZWVkVG9XYXRjaExhdGVyID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBbcHJvbWlzZVRvRXJyb3IsIG5ld1Jlc291cmNlQ2xlYW5lcl0gPSByZXNvbHZlQnlQb2xsaW5nKHdlYjNDb250ZXh0LCBzdGFydGVyQmxvY2tOdW1iZXIsIHRyYW5zYWN0aW9uSGFzaCk7XG4gICAgICAgICAgICByZXNvdXJjZUNsZWFuZXIuY2xlYW4gPSBuZXdSZXNvdXJjZUNsZWFuZXIuY2xlYW47XG4gICAgICAgICAgICBwcm9taXNlVG9FcnJvci5jYXRjaChlcnJvciA9PiByZWplY3QoZXJyb3IpKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gKHlpZWxkICgoX2EgPSB3ZWIzQ29udGV4dC5zdWJzY3JpcHRpb25NYW5hZ2VyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKCduZXdIZWFkcycpKSk7XG4gICAgICAgICAgICByZXNvdXJjZUNsZWFuZXIgPSB7XG4gICAgICAgICAgICAgICAgY2xlYW46ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHN1YnNjcmlwdGlvbiwgaWYgaXQgd2FzIG5vdCByZW1vdmVkIHNvbWV3aGVyZVxuICAgICAgICAgICAgICAgICAgICAvLyBcdGVsc2UgYnkgY2FsbGluZywgZm9yIGV4YW1wbGUsIHN1YnNjcmlwdGlvbk1hbmFnZXIuY2xlYXIoKVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoX2EgPSB3ZWIzQ29udGV4dC5zdWJzY3JpcHRpb25NYW5hZ2VyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVtb3ZlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3Vic2NyaXB0aW9uIGVuZGVkIHN1Y2Nlc3NmdWxseVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFuIGVycm9yIGhhcHBlbmVkIHdoaWxlIGVuZGluZyBzdWJzY3JpcHRpb24uIEJ1dCBubyBuZWVkIHRvIHRha2UgYW55IGFjdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUJ5UG9sbGluZyh3ZWIzQ29udGV4dCwgc3RhcnRlckJsb2NrTnVtYmVyLCB0cmFuc2FjdGlvbkhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb21pc2VUb0Vycm9yID0gbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24ub24oJ2RhdGEnLCAobGFzdEJsb2NrSGVhZGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG5lZWRUb1dhdGNoTGF0ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobGFzdEJsb2NrSGVhZGVyID09PSBudWxsIHx8IGxhc3RCbG9ja0hlYWRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGFzdEJsb2NrSGVhZGVyLm51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJPZkJsb2NrcyA9IE51bWJlcihCaWdJbnQobGFzdEJsb2NrSGVhZGVyLm51bWJlcikgLSBCaWdJbnQoc3RhcnRlckJsb2NrTnVtYmVyKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXJPZkJsb2NrcyA+PSB3ZWIzQ29udGV4dC50cmFuc2FjdGlvbkJsb2NrVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJhbnNhY3Rpb24gQmxvY2sgVGltZW91dCBpcyBrbm93biB0byBiZSByZWFjaGVkIGJ5IHN1YnNjcmliaW5nIHRvIG5ldyBoZWFkc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyB3ZWIzX2Vycm9yc18xLlRyYW5zYWN0aW9uQmxvY2tUaW1lb3V0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ZXJCbG9ja051bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJPZkJsb2NrcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24ub24oJ2Vycm9yJywgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXZlcnRUb1BvbGxpbmcocmVqZWN0LCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXZlcnRUb1BvbGxpbmcocmVqZWN0LCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGYWxsYmFjayB0byBwb2xsaW5nIGlmIHR4IHJlY2VpcHQgZGlkbid0IGFycml2ZWQgaW4gXCJibG9ja0hlYWRlclRpbWVvdXRcIiBbMTAgc2Vjb25kc11cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuZWVkVG9XYXRjaExhdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldmVydFRvUG9sbGluZyhyZWplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHdlYjNDb250ZXh0LmJsb2NrSGVhZGVyVGltZW91dCAqIDEwMDApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFtwcm9taXNlVG9FcnJvciwgcmVzb3VyY2VDbGVhbmVyXTtcbiAgICB9KTtcbn1cbi8qIFRPRE86IEFmdGVyIG1lcmdlLCB0aGVyZSB3aWxsIGJlIGNvbnN0YW50IGJsb2NrIG1pbmluZyB0aW1lIChleGFjdGx5IDEyIHNlY29uZCBlYWNoIGJsb2NrLCBleGNlcHQgc2xvdCBtaXNzZWQgdGhhdCBjdXJyZW50bHkgaGFwcGVucyBpbiA8MSUgb2Ygc2xvdHMuICkgc28gd2UgY2FuIG9wdGltaXplIGZvbGxvd2luZyBmdW5jdGlvblxuZm9yIFBPUyBOV3MsIHdlIGNhbiBza2lwIGNoZWNraW5nIGdldEJsb2NrTnVtYmVyKCk7IGFmdGVyIGludGVydmFsIGFuZCBjYWxjdWxhdGUgb25seSBiYXNlZCBvbiB0aW1lICB0aGF0IGNlcnRhaW4gbnVtIG9mIGJsb2NrZWQgYXJlIG1pbmVkIGFmdGVyIHRoYXQgZm9yIGludGVybmFsIGRvdWJsZSBjaGVjaywgY2FuIGRvIG9uZSBnZXRCbG9ja051bWJlcigpIGNhbGwgYW5kIHRpbWVvdXQuXG4qL1xuZnVuY3Rpb24gcmVqZWN0SWZCbG9ja1RpbWVvdXQod2ViM0NvbnRleHQsIHRyYW5zYWN0aW9uSGFzaCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgeyBwcm92aWRlciB9ID0gd2ViM0NvbnRleHQucmVxdWVzdE1hbmFnZXI7XG4gICAgICAgIGxldCBjYWxsaW5nUmVzO1xuICAgICAgICBjb25zdCBzdGFydGVyQmxvY2tOdW1iZXIgPSB5aWVsZCAoMCwgcnBjX21ldGhvZF93cmFwcGVyc19qc18xLmdldEJsb2NrTnVtYmVyKSh3ZWIzQ29udGV4dCwgY29uc3RhbnRzX2pzXzEuTlVNQkVSX0RBVEFfRk9STUFUKTtcbiAgICAgICAgLy8gVE9ETzogb25jZSBodHRwczovL2dpdGh1Yi5jb20vd2ViMy93ZWIzLmpzL2lzc3Vlcy81NTIxIGlzIGltcGxlbWVudGVkLCByZW1vdmUgY2hlY2tpbmcgZm9yIGBlbmFibGVFeHBlcmltZW50YWxGZWF0dXJlcy51c2VTdWJzY3JpcHRpb25XaGVuQ2hlY2tpbmdCbG9ja1RpbWVvdXRgXG4gICAgICAgIGlmICgoKF9iID0gKF9hID0gcHJvdmlkZXIpLnN1cHBvcnRzU3Vic2NyaXB0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpKSAmJlxuICAgICAgICAgICAgd2ViM0NvbnRleHQuZW5hYmxlRXhwZXJpbWVudGFsRmVhdHVyZXMudXNlU3Vic2NyaXB0aW9uV2hlbkNoZWNraW5nQmxvY2tUaW1lb3V0KSB7XG4gICAgICAgICAgICBjYWxsaW5nUmVzID0geWllbGQgcmVzb2x2ZUJ5U3Vic2NyaXB0aW9uKHdlYjNDb250ZXh0LCBzdGFydGVyQmxvY2tOdW1iZXIsIHRyYW5zYWN0aW9uSGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjYWxsaW5nUmVzID0gcmVzb2x2ZUJ5UG9sbGluZyh3ZWIzQ29udGV4dCwgc3RhcnRlckJsb2NrTnVtYmVyLCB0cmFuc2FjdGlvbkhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxsaW5nUmVzO1xuICAgIH0pO1xufVxuZXhwb3J0cy5yZWplY3RJZkJsb2NrVGltZW91dCA9IHJlamVjdElmQmxvY2tUaW1lb3V0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVqZWN0X2lmX2Jsb2NrX3RpbWVvdXQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/reject_if_block_timeout.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/send_tx_helper.js":
/*!**********************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/send_tx_helper.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SendTxHelper = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst web3_types_1 = __webpack_require__(/*! web3-types */ \"(api)/./src/pages/api/node_modules/web3-types/lib/commonjs/index.js\");\nconst web3_validator_1 = __webpack_require__(/*! web3-validator */ \"(api)/./src/pages/api/node_modules/web3-validator/lib/commonjs/index.js\");\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\nconst web3_rpc_methods_1 = __webpack_require__(/*! web3-rpc-methods */ \"(api)/./src/pages/api/node_modules/web3-rpc-methods/lib/commonjs/index.js\");\n// eslint-disable-next-line import/no-cycle\nconst get_transaction_gas_pricing_js_1 = __webpack_require__(/*! ./get_transaction_gas_pricing.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_transaction_gas_pricing.js\");\n// eslint-disable-next-line import/no-cycle\nconst try_send_transaction_js_1 = __webpack_require__(/*! ./try_send_transaction.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/try_send_transaction.js\");\n// eslint-disable-next-line import/no-cycle\nconst watch_transaction_for_confirmations_js_1 = __webpack_require__(/*! ./watch_transaction_for_confirmations.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/watch_transaction_for_confirmations.js\");\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/constants.js\");\n// eslint-disable-next-line import/no-cycle\nconst get_transaction_error_js_1 = __webpack_require__(/*! ./get_transaction_error.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_transaction_error.js\");\n// eslint-disable-next-line import/no-cycle\nconst get_revert_reason_js_1 = __webpack_require__(/*! ./get_revert_reason.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_revert_reason.js\");\nconst decoding_js_1 = __webpack_require__(/*! ./decoding.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/decoding.js\");\nclass SendTxHelper {\n    constructor({ options, web3Context, promiEvent, returnFormat, }) {\n        this.options = {\n            checkRevertBeforeSending: true,\n        };\n        this.options = options;\n        this.web3Context = web3Context;\n        this.promiEvent = promiEvent;\n        this.returnFormat = returnFormat;\n    }\n    getReceiptWithEvents(data) {\n        var _a, _b;\n        const result = Object.assign({}, (data !== null && data !== void 0 ? data : {}));\n        if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.contractAbi) && result.logs && result.logs.length > 0) {\n            result.events = {};\n            for (const log of result.logs) {\n                const event = (0, decoding_js_1.decodeEventABI)(constants_js_1.ALL_EVENTS_ABI, log, (_b = this.options) === null || _b === void 0 ? void 0 : _b.contractAbi, this.returnFormat);\n                if (event.event) {\n                    result.events[event.event] = event;\n                }\n            }\n        }\n        return result;\n    }\n    checkRevertBeforeSending(tx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.options.checkRevertBeforeSending !== false) {\n                const reason = yield (0, get_revert_reason_js_1.getRevertReason)(this.web3Context, tx, this.options.contractAbi);\n                if (reason !== undefined) {\n                    throw yield (0, get_transaction_error_js_1.getTransactionError)(this.web3Context, tx, undefined, undefined, this.options.contractAbi, reason);\n                }\n            }\n        });\n    }\n    emitSending(tx) {\n        if (this.promiEvent.listenerCount('sending') > 0) {\n            this.promiEvent.emit('sending', tx);\n        }\n    }\n    populateGasPrice({ transactionFormatted, transaction, }) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            let result = transactionFormatted;\n            if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.ignoreGasPricing) &&\n                (0, web3_validator_1.isNullish)(transactionFormatted.gasPrice) &&\n                ((0, web3_validator_1.isNullish)(transaction.maxPriorityFeePerGas) ||\n                    (0, web3_validator_1.isNullish)(transaction.maxFeePerGas))) {\n                result = Object.assign(Object.assign({}, transactionFormatted), (yield (0, get_transaction_gas_pricing_js_1.getTransactionGasPricing)(transactionFormatted, this.web3Context, web3_types_1.ETH_DATA_FORMAT)));\n            }\n            return result;\n        });\n    }\n    signAndSend({ wallet, tx, }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (wallet) {\n                const signedTransaction = yield wallet.signTransaction(tx);\n                return (0, try_send_transaction_js_1.trySendTransaction)(this.web3Context, () => __awaiter(this, void 0, void 0, function* () {\n                    return web3_rpc_methods_1.ethRpcMethods.sendRawTransaction(this.web3Context.requestManager, signedTransaction.rawTransaction);\n                }), signedTransaction.transactionHash);\n            }\n            return (0, try_send_transaction_js_1.trySendTransaction)(this.web3Context, () => __awaiter(this, void 0, void 0, function* () {\n                return web3_rpc_methods_1.ethRpcMethods.sendTransaction(this.web3Context.requestManager, tx);\n            }));\n        });\n    }\n    emitSent(tx) {\n        if (this.promiEvent.listenerCount('sent') > 0) {\n            this.promiEvent.emit('sent', tx);\n        }\n    }\n    emitTransactionHash(hash) {\n        if (this.promiEvent.listenerCount('transactionHash') > 0) {\n            this.promiEvent.emit('transactionHash', hash);\n        }\n    }\n    emitReceipt(receipt) {\n        if (this.promiEvent.listenerCount('receipt') > 0) {\n            this.promiEvent.emit('receipt', \n            // @ts-expect-error unknown type fix\n            receipt);\n        }\n    }\n    handleError({ error, tx }) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            let _error = error;\n            if (_error instanceof web3_errors_1.ContractExecutionError && this.web3Context.handleRevert) {\n                _error = yield (0, get_transaction_error_js_1.getTransactionError)(this.web3Context, tx, undefined, undefined, (_a = this.options) === null || _a === void 0 ? void 0 : _a.contractAbi);\n            }\n            if ((_error instanceof web3_errors_1.InvalidResponseError ||\n                _error instanceof web3_errors_1.ContractExecutionError ||\n                _error instanceof web3_errors_1.TransactionRevertWithCustomError ||\n                _error instanceof web3_errors_1.TransactionRevertedWithoutReasonError ||\n                _error instanceof web3_errors_1.TransactionRevertInstructionError ||\n                _error instanceof web3_errors_1.TransactionPollingTimeoutError) &&\n                this.promiEvent.listenerCount('error') > 0) {\n                this.promiEvent.emit('error', _error);\n            }\n            return _error;\n        });\n    }\n    emitConfirmation({ receipt, transactionHash, }) {\n        if (this.promiEvent.listenerCount('confirmation') > 0) {\n            (0, watch_transaction_for_confirmations_js_1.watchTransactionForConfirmations)(this.web3Context, this.promiEvent, receipt, transactionHash, this.returnFormat);\n        }\n    }\n    handleResolve({ receipt, tx }) {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.transactionResolver) {\n                return (_b = this.options) === null || _b === void 0 ? void 0 : _b.transactionResolver(receipt);\n            }\n            if (receipt.status === BigInt(0)) {\n                const error = yield (0, get_transaction_error_js_1.getTransactionError)(this.web3Context, tx, \n                // @ts-expect-error unknown type fix\n                receipt, undefined, (_c = this.options) === null || _c === void 0 ? void 0 : _c.contractAbi);\n                if (this.promiEvent.listenerCount('error') > 0) {\n                    this.promiEvent.emit('error', error);\n                }\n                throw error;\n            }\n            else {\n                return receipt;\n            }\n        });\n    }\n}\nexports.SendTxHelper = SendTxHelper;\n//# sourceMappingURL=send_tx_helper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/send_tx_helper.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/transaction_builder.js":
/*!***************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/transaction_builder.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.transactionBuilder = exports.defaultTransactionBuilder = exports.getTransactionType = exports.getTransactionNonce = exports.getTransactionFromOrToAttr = void 0;\nconst web3_types_1 = __webpack_require__(/*! web3-types */ \"(api)/./src/pages/api/node_modules/web3-types/lib/commonjs/index.js\");\nconst web3_eth_accounts_1 = __webpack_require__(/*! web3-eth-accounts */ \"(api)/./src/pages/api/node_modules/web3-eth-accounts/lib/commonjs/index.js\");\nconst web3_net_1 = __webpack_require__(/*! web3-net */ \"(api)/./src/pages/api/node_modules/web3-net/lib/commonjs/index.js\");\nconst web3_validator_1 = __webpack_require__(/*! web3-validator */ \"(api)/./src/pages/api/node_modules/web3-validator/lib/commonjs/index.js\");\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst constants_js_1 = __webpack_require__(/*! ../constants.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/constants.js\");\n// eslint-disable-next-line import/no-cycle\nconst rpc_method_wrappers_js_1 = __webpack_require__(/*! ../rpc_method_wrappers.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/rpc_method_wrappers.js\");\nconst detect_transaction_type_js_1 = __webpack_require__(/*! ./detect_transaction_type.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/detect_transaction_type.js\");\nconst schemas_js_1 = __webpack_require__(/*! ../schemas.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/schemas.js\");\n// eslint-disable-next-line import/no-cycle\nconst get_transaction_gas_pricing_js_1 = __webpack_require__(/*! ./get_transaction_gas_pricing.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/get_transaction_gas_pricing.js\");\nconst getTransactionFromOrToAttr = (attr, web3Context, transaction, privateKey) => {\n    if (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {\n        if (typeof transaction[attr] === 'string' && (0, web3_validator_1.isAddress)(transaction[attr])) {\n            return transaction[attr];\n        }\n        if (!(0, web3_validator_1.isHexStrict)(transaction[attr]) && (0, web3_validator_1.isNumber)(transaction[attr])) {\n            if (web3Context.wallet) {\n                const account = web3Context.wallet.get((0, web3_utils_1.format)({ format: 'uint' }, transaction[attr], constants_js_1.NUMBER_DATA_FORMAT));\n                if (!(0, web3_validator_1.isNullish)(account)) {\n                    return account.address;\n                }\n                throw new web3_errors_1.LocalWalletNotAvailableError();\n            }\n            throw new web3_errors_1.LocalWalletNotAvailableError();\n        }\n        else {\n            throw attr === 'from'\n                ? new web3_errors_1.InvalidTransactionWithSender(transaction.from)\n                : // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                    new web3_errors_1.InvalidTransactionWithReceiver(transaction.to);\n        }\n    }\n    if (attr === 'from') {\n        if (!(0, web3_validator_1.isNullish)(privateKey))\n            return (0, web3_eth_accounts_1.privateKeyToAddress)(privateKey);\n        if (!(0, web3_validator_1.isNullish)(web3Context.defaultAccount))\n            return web3Context.defaultAccount;\n    }\n    return undefined;\n};\nexports.getTransactionFromOrToAttr = getTransactionFromOrToAttr;\nconst getTransactionNonce = (web3Context, address, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) => __awaiter(void 0, void 0, void 0, function* () {\n    if ((0, web3_validator_1.isNullish)(address)) {\n        // TODO if (web3.eth.accounts.wallet) use address from local wallet\n        throw new web3_errors_1.UnableToPopulateNonceError();\n    }\n    return (0, rpc_method_wrappers_js_1.getTransactionCount)(web3Context, address, web3Context.defaultBlock, returnFormat);\n});\nexports.getTransactionNonce = getTransactionNonce;\nconst getTransactionType = (transaction, web3Context) => {\n    const inferredType = (0, detect_transaction_type_js_1.detectTransactionType)(transaction, web3Context);\n    if (!(0, web3_validator_1.isNullish)(inferredType))\n        return inferredType;\n    if (!(0, web3_validator_1.isNullish)(web3Context.defaultTransactionType))\n        return (0, web3_utils_1.format)({ format: 'uint' }, web3Context.defaultTransactionType, web3_types_1.ETH_DATA_FORMAT);\n    return undefined;\n};\nexports.getTransactionType = getTransactionType;\n// Keep in mind that the order the properties of populateTransaction get populated matters\n// as some of the properties are dependent on others\nfunction defaultTransactionBuilder(options) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n        let populatedTransaction = (0, web3_utils_1.format)(schemas_js_1.transactionSchema, options.transaction, web3_types_1.DEFAULT_RETURN_FORMAT);\n        if ((0, web3_validator_1.isNullish)(populatedTransaction.from)) {\n            populatedTransaction.from = (0, exports.getTransactionFromOrToAttr)('from', options.web3Context, undefined, options.privateKey);\n        }\n        // TODO: Debug why need to typecase getTransactionNonce\n        if ((0, web3_validator_1.isNullish)(populatedTransaction.nonce)) {\n            populatedTransaction.nonce = yield (0, exports.getTransactionNonce)(options.web3Context, populatedTransaction.from, web3_types_1.ETH_DATA_FORMAT);\n        }\n        if ((0, web3_validator_1.isNullish)(populatedTransaction.value)) {\n            populatedTransaction.value = '0x0';\n        }\n        if (!(0, web3_validator_1.isNullish)(populatedTransaction.data)) {\n            if (!(0, web3_validator_1.isNullish)(populatedTransaction.input) &&\n                populatedTransaction.data !== populatedTransaction.input)\n                throw new web3_errors_1.TransactionDataAndInputError({\n                    data: (0, web3_utils_1.bytesToHex)(populatedTransaction.data),\n                    input: (0, web3_utils_1.bytesToHex)(populatedTransaction.input),\n                });\n            if (!populatedTransaction.data.startsWith('0x'))\n                populatedTransaction.data = `0x${populatedTransaction.data}`;\n        }\n        else if (!(0, web3_validator_1.isNullish)(populatedTransaction.input)) {\n            if (!populatedTransaction.input.startsWith('0x'))\n                populatedTransaction.input = `0x${populatedTransaction.input}`;\n        }\n        else {\n            populatedTransaction.input = '0x';\n        }\n        if ((0, web3_validator_1.isNullish)(populatedTransaction.common)) {\n            if (options.web3Context.defaultCommon) {\n                const common = options.web3Context.defaultCommon;\n                const chainId = common.customChain.chainId;\n                const networkId = common.customChain.networkId;\n                const name = common.customChain.name;\n                populatedTransaction.common = Object.assign(Object.assign({}, common), { customChain: { chainId, networkId, name } });\n            }\n            if ((0, web3_validator_1.isNullish)(populatedTransaction.chain)) {\n                populatedTransaction.chain = options.web3Context.defaultChain;\n            }\n            if ((0, web3_validator_1.isNullish)(populatedTransaction.hardfork)) {\n                populatedTransaction.hardfork = options.web3Context.defaultHardfork;\n            }\n        }\n        if ((0, web3_validator_1.isNullish)(populatedTransaction.chainId) &&\n            (0, web3_validator_1.isNullish)((_a = populatedTransaction.common) === null || _a === void 0 ? void 0 : _a.customChain.chainId)) {\n            populatedTransaction.chainId = yield (0, rpc_method_wrappers_js_1.getChainId)(options.web3Context, web3_types_1.ETH_DATA_FORMAT);\n        }\n        if ((0, web3_validator_1.isNullish)(populatedTransaction.networkId)) {\n            populatedTransaction.networkId =\n                (_b = options.web3Context.defaultNetworkId) !== null && _b !== void 0 ? _b : (yield (0, web3_net_1.getId)(options.web3Context, web3_types_1.ETH_DATA_FORMAT));\n        }\n        if ((0, web3_validator_1.isNullish)(populatedTransaction.gasLimit) && !(0, web3_validator_1.isNullish)(populatedTransaction.gas)) {\n            populatedTransaction.gasLimit = populatedTransaction.gas;\n        }\n        populatedTransaction.type = (0, exports.getTransactionType)(populatedTransaction, options.web3Context);\n        if ((0, web3_validator_1.isNullish)(populatedTransaction.accessList) &&\n            (populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')) {\n            populatedTransaction.accessList = [];\n        }\n        if (options.fillGasPrice)\n            populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), (yield (0, get_transaction_gas_pricing_js_1.getTransactionGasPricing)(populatedTransaction, options.web3Context, web3_types_1.ETH_DATA_FORMAT)));\n        if ((0, web3_validator_1.isNullish)(populatedTransaction.gas) &&\n            (0, web3_validator_1.isNullish)(populatedTransaction.gasLimit) &&\n            options.fillGasLimit) {\n            const fillGasLimit = yield (0, rpc_method_wrappers_js_1.estimateGas)(options.web3Context, populatedTransaction, 'latest', web3_types_1.ETH_DATA_FORMAT);\n            populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), { gas: (0, web3_utils_1.format)({ format: 'uint' }, fillGasLimit, web3_types_1.ETH_DATA_FORMAT) });\n        }\n        return populatedTransaction;\n    });\n}\nexports.defaultTransactionBuilder = defaultTransactionBuilder;\nconst transactionBuilder = (options) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    return ((_a = options.web3Context.transactionBuilder) !== null && _a !== void 0 ? _a : defaultTransactionBuilder)(Object.assign(Object.assign({}, options), { transaction: options.transaction }));\n});\nexports.transactionBuilder = transactionBuilder;\n//# sourceMappingURL=transaction_builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/transaction_builder.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/try_send_transaction.js":
/*!****************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/try_send_transaction.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.trySendTransaction = void 0;\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\n// eslint-disable-next-line import/no-cycle\nconst reject_if_block_timeout_js_1 = __webpack_require__(/*! ./reject_if_block_timeout.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/reject_if_block_timeout.js\");\n/**\n * An internal function to send a transaction or throws if sending did not finish during the timeout during the blocks-timeout.\n * @param web3Context - the context to read the configurations from\n * @param sendTransactionFunc - the function that will send the transaction (could be sendTransaction or sendRawTransaction)\n * @param transactionHash - to be used inside the exception message if there will be any exceptions.\n * @returns the Promise<string> returned by the `sendTransactionFunc`.\n */\nfunction trySendTransaction(web3Context, sendTransactionFunc, transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [timeoutId, rejectOnTimeout] = (0, web3_utils_1.rejectIfTimeout)(web3Context.transactionSendTimeout, new web3_errors_1.TransactionSendTimeoutError({\n            numberOfSeconds: web3Context.transactionSendTimeout / 1000,\n            transactionHash,\n        }));\n        const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield (0, reject_if_block_timeout_js_1.rejectIfBlockTimeout)(web3Context, transactionHash);\n        try {\n            // If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n            return yield Promise.race([\n                sendTransactionFunc(),\n                rejectOnTimeout,\n                rejectOnBlockTimeout, // this will throw an error on Transaction Block Timeout\n            ]);\n        }\n        finally {\n            clearTimeout(timeoutId);\n            blockTimeoutResourceCleaner.clean();\n        }\n    });\n}\nexports.trySendTransaction = trySendTransaction;\n//# sourceMappingURL=try_send_transaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdXRpbHMvdHJ5X3NlbmRfdHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixxQkFBcUIsbUJBQU8sQ0FBQyx1RkFBWTtBQUN6QyxzQkFBc0IsbUJBQU8sQ0FBQyx5RkFBYTtBQUMzQztBQUNBLHFDQUFxQyxtQkFBTyxDQUFDLCtIQUE4QjtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pc3N1ZXJfaG9sZGVyX3ZlcmlmaWVyLy4vc3JjL3BhZ2VzL2FwaS9ub2RlX21vZHVsZXMvd2ViMy1ldGgvbGliL2NvbW1vbmpzL3V0aWxzL3RyeV9zZW5kX3RyYW5zYWN0aW9uLmpzP2ZlYTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudHJ5U2VuZFRyYW5zYWN0aW9uID0gdm9pZCAwO1xuY29uc3Qgd2ViM191dGlsc18xID0gcmVxdWlyZShcIndlYjMtdXRpbHNcIik7XG5jb25zdCB3ZWIzX2Vycm9yc18xID0gcmVxdWlyZShcIndlYjMtZXJyb3JzXCIpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1jeWNsZVxuY29uc3QgcmVqZWN0X2lmX2Jsb2NrX3RpbWVvdXRfanNfMSA9IHJlcXVpcmUoXCIuL3JlamVjdF9pZl9ibG9ja190aW1lb3V0LmpzXCIpO1xuLyoqXG4gKiBBbiBpbnRlcm5hbCBmdW5jdGlvbiB0byBzZW5kIGEgdHJhbnNhY3Rpb24gb3IgdGhyb3dzIGlmIHNlbmRpbmcgZGlkIG5vdCBmaW5pc2ggZHVyaW5nIHRoZSB0aW1lb3V0IGR1cmluZyB0aGUgYmxvY2tzLXRpbWVvdXQuXG4gKiBAcGFyYW0gd2ViM0NvbnRleHQgLSB0aGUgY29udGV4dCB0byByZWFkIHRoZSBjb25maWd1cmF0aW9ucyBmcm9tXG4gKiBAcGFyYW0gc2VuZFRyYW5zYWN0aW9uRnVuYyAtIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgc2VuZCB0aGUgdHJhbnNhY3Rpb24gKGNvdWxkIGJlIHNlbmRUcmFuc2FjdGlvbiBvciBzZW5kUmF3VHJhbnNhY3Rpb24pXG4gKiBAcGFyYW0gdHJhbnNhY3Rpb25IYXNoIC0gdG8gYmUgdXNlZCBpbnNpZGUgdGhlIGV4Y2VwdGlvbiBtZXNzYWdlIGlmIHRoZXJlIHdpbGwgYmUgYW55IGV4Y2VwdGlvbnMuXG4gKiBAcmV0dXJucyB0aGUgUHJvbWlzZTxzdHJpbmc+IHJldHVybmVkIGJ5IHRoZSBgc2VuZFRyYW5zYWN0aW9uRnVuY2AuXG4gKi9cbmZ1bmN0aW9uIHRyeVNlbmRUcmFuc2FjdGlvbih3ZWIzQ29udGV4dCwgc2VuZFRyYW5zYWN0aW9uRnVuYywgdHJhbnNhY3Rpb25IYXNoKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgW3RpbWVvdXRJZCwgcmVqZWN0T25UaW1lb3V0XSA9ICgwLCB3ZWIzX3V0aWxzXzEucmVqZWN0SWZUaW1lb3V0KSh3ZWIzQ29udGV4dC50cmFuc2FjdGlvblNlbmRUaW1lb3V0LCBuZXcgd2ViM19lcnJvcnNfMS5UcmFuc2FjdGlvblNlbmRUaW1lb3V0RXJyb3Ioe1xuICAgICAgICAgICAgbnVtYmVyT2ZTZWNvbmRzOiB3ZWIzQ29udGV4dC50cmFuc2FjdGlvblNlbmRUaW1lb3V0IC8gMTAwMCxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uSGFzaCxcbiAgICAgICAgfSkpO1xuICAgICAgICBjb25zdCBbcmVqZWN0T25CbG9ja1RpbWVvdXQsIGJsb2NrVGltZW91dFJlc291cmNlQ2xlYW5lcl0gPSB5aWVsZCAoMCwgcmVqZWN0X2lmX2Jsb2NrX3RpbWVvdXRfanNfMS5yZWplY3RJZkJsb2NrVGltZW91dCkod2ViM0NvbnRleHQsIHRyYW5zYWN0aW9uSGFzaCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJZiBhbiBlcnJvciBoYXBwZW5lZCBoZXJlLCBkbyBub3QgY2F0Y2ggaXQsIGp1c3QgY2xlYXIgdGhlIHJlc291cmNlcyBiZWZvcmUgcmFpc2luZyBpdCB0byB0aGUgY2FsbGVyIGZ1bmN0aW9uLlxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIFByb21pc2UucmFjZShbXG4gICAgICAgICAgICAgICAgc2VuZFRyYW5zYWN0aW9uRnVuYygpLFxuICAgICAgICAgICAgICAgIHJlamVjdE9uVGltZW91dCxcbiAgICAgICAgICAgICAgICByZWplY3RPbkJsb2NrVGltZW91dCwgLy8gdGhpcyB3aWxsIHRocm93IGFuIGVycm9yIG9uIFRyYW5zYWN0aW9uIEJsb2NrIFRpbWVvdXRcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgICAgICBibG9ja1RpbWVvdXRSZXNvdXJjZUNsZWFuZXIuY2xlYW4oKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy50cnlTZW5kVHJhbnNhY3Rpb24gPSB0cnlTZW5kVHJhbnNhY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cnlfc2VuZF90cmFuc2FjdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/try_send_transaction.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/wait_for_transaction_receipt.js":
/*!************************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/wait_for_transaction_receipt.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.waitForTransactionReceipt = void 0;\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\n// eslint-disable-next-line import/no-cycle\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\n// eslint-disable-next-line import/no-cycle\nconst reject_if_block_timeout_js_1 = __webpack_require__(/*! ./reject_if_block_timeout.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/reject_if_block_timeout.js\");\n// eslint-disable-next-line import/no-cycle\nconst rpc_method_wrappers_js_1 = __webpack_require__(/*! ../rpc_method_wrappers.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/rpc_method_wrappers.js\");\nfunction waitForTransactionReceipt(web3Context, transactionHash, returnFormat) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const pollingInterval = (_a = web3Context.transactionReceiptPollingInterval) !== null && _a !== void 0 ? _a : web3Context.transactionPollingInterval;\n        const [awaitableTransactionReceipt, IntervalId] = (0, web3_utils_1.pollTillDefinedAndReturnIntervalId)(() => __awaiter(this, void 0, void 0, function* () {\n            try {\n                return (0, rpc_method_wrappers_js_1.getTransactionReceipt)(web3Context, transactionHash, returnFormat);\n            }\n            catch (error) {\n                console.warn('An error happen while trying to get the transaction receipt', error);\n                return undefined;\n            }\n        }), pollingInterval);\n        const [timeoutId, rejectOnTimeout] = (0, web3_utils_1.rejectIfTimeout)(web3Context.transactionPollingTimeout, new web3_errors_1.TransactionPollingTimeoutError({\n            numberOfSeconds: web3Context.transactionPollingTimeout / 1000,\n            transactionHash,\n        }));\n        const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield (0, reject_if_block_timeout_js_1.rejectIfBlockTimeout)(web3Context, transactionHash);\n        try {\n            // If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n            return yield Promise.race([\n                awaitableTransactionReceipt,\n                rejectOnTimeout,\n                rejectOnBlockTimeout, // this will throw an error on Transaction Block Timeout\n            ]);\n        }\n        finally {\n            if (timeoutId)\n                clearTimeout(timeoutId);\n            if (IntervalId)\n                clearInterval(IntervalId);\n            blockTimeoutResourceCleaner.clean();\n        }\n    });\n}\nexports.waitForTransactionReceipt = waitForTransactionReceipt;\n//# sourceMappingURL=wait_for_transaction_receipt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdXRpbHMvd2FpdF9mb3JfdHJhbnNhY3Rpb25fcmVjZWlwdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlDQUFpQztBQUNqQyxzQkFBc0IsbUJBQU8sQ0FBQyx5RkFBYTtBQUMzQztBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHVGQUFZO0FBQ3pDO0FBQ0EscUNBQXFDLG1CQUFPLENBQUMsK0hBQThCO0FBQzNFO0FBQ0EsaUNBQWlDLG1CQUFPLENBQUMsa0hBQTJCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pc3N1ZXJfaG9sZGVyX3ZlcmlmaWVyLy4vc3JjL3BhZ2VzL2FwaS9ub2RlX21vZHVsZXMvd2ViMy1ldGgvbGliL2NvbW1vbmpzL3V0aWxzL3dhaXRfZm9yX3RyYW5zYWN0aW9uX3JlY2VpcHQuanM/YmUxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG5UaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG53ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbml0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxudGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbndlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG5NRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG5HTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG5hbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndhaXRGb3JUcmFuc2FjdGlvblJlY2VpcHQgPSB2b2lkIDA7XG5jb25zdCB3ZWIzX2Vycm9yc18xID0gcmVxdWlyZShcIndlYjMtZXJyb3JzXCIpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1jeWNsZVxuY29uc3Qgd2ViM191dGlsc18xID0gcmVxdWlyZShcIndlYjMtdXRpbHNcIik7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWN5Y2xlXG5jb25zdCByZWplY3RfaWZfYmxvY2tfdGltZW91dF9qc18xID0gcmVxdWlyZShcIi4vcmVqZWN0X2lmX2Jsb2NrX3RpbWVvdXQuanNcIik7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWN5Y2xlXG5jb25zdCBycGNfbWV0aG9kX3dyYXBwZXJzX2pzXzEgPSByZXF1aXJlKFwiLi4vcnBjX21ldGhvZF93cmFwcGVycy5qc1wiKTtcbmZ1bmN0aW9uIHdhaXRGb3JUcmFuc2FjdGlvblJlY2VpcHQod2ViM0NvbnRleHQsIHRyYW5zYWN0aW9uSGFzaCwgcmV0dXJuRm9ybWF0KSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IHBvbGxpbmdJbnRlcnZhbCA9IChfYSA9IHdlYjNDb250ZXh0LnRyYW5zYWN0aW9uUmVjZWlwdFBvbGxpbmdJbnRlcnZhbCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogd2ViM0NvbnRleHQudHJhbnNhY3Rpb25Qb2xsaW5nSW50ZXJ2YWw7XG4gICAgICAgIGNvbnN0IFthd2FpdGFibGVUcmFuc2FjdGlvblJlY2VpcHQsIEludGVydmFsSWRdID0gKDAsIHdlYjNfdXRpbHNfMS5wb2xsVGlsbERlZmluZWRBbmRSZXR1cm5JbnRlcnZhbElkKSgoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgcnBjX21ldGhvZF93cmFwcGVyc19qc18xLmdldFRyYW5zYWN0aW9uUmVjZWlwdCkod2ViM0NvbnRleHQsIHRyYW5zYWN0aW9uSGFzaCwgcmV0dXJuRm9ybWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQW4gZXJyb3IgaGFwcGVuIHdoaWxlIHRyeWluZyB0byBnZXQgdGhlIHRyYW5zYWN0aW9uIHJlY2VpcHQnLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksIHBvbGxpbmdJbnRlcnZhbCk7XG4gICAgICAgIGNvbnN0IFt0aW1lb3V0SWQsIHJlamVjdE9uVGltZW91dF0gPSAoMCwgd2ViM191dGlsc18xLnJlamVjdElmVGltZW91dCkod2ViM0NvbnRleHQudHJhbnNhY3Rpb25Qb2xsaW5nVGltZW91dCwgbmV3IHdlYjNfZXJyb3JzXzEuVHJhbnNhY3Rpb25Qb2xsaW5nVGltZW91dEVycm9yKHtcbiAgICAgICAgICAgIG51bWJlck9mU2Vjb25kczogd2ViM0NvbnRleHQudHJhbnNhY3Rpb25Qb2xsaW5nVGltZW91dCAvIDEwMDAsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2gsXG4gICAgICAgIH0pKTtcbiAgICAgICAgY29uc3QgW3JlamVjdE9uQmxvY2tUaW1lb3V0LCBibG9ja1RpbWVvdXRSZXNvdXJjZUNsZWFuZXJdID0geWllbGQgKDAsIHJlamVjdF9pZl9ibG9ja190aW1lb3V0X2pzXzEucmVqZWN0SWZCbG9ja1RpbWVvdXQpKHdlYjNDb250ZXh0LCB0cmFuc2FjdGlvbkhhc2gpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gSWYgYW4gZXJyb3IgaGFwcGVuZWQgaGVyZSwgZG8gbm90IGNhdGNoIGl0LCBqdXN0IGNsZWFyIHRoZSByZXNvdXJjZXMgYmVmb3JlIHJhaXNpbmcgaXQgdG8gdGhlIGNhbGxlciBmdW5jdGlvbi5cbiAgICAgICAgICAgIHJldHVybiB5aWVsZCBQcm9taXNlLnJhY2UoW1xuICAgICAgICAgICAgICAgIGF3YWl0YWJsZVRyYW5zYWN0aW9uUmVjZWlwdCxcbiAgICAgICAgICAgICAgICByZWplY3RPblRpbWVvdXQsXG4gICAgICAgICAgICAgICAgcmVqZWN0T25CbG9ja1RpbWVvdXQsIC8vIHRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvciBvbiBUcmFuc2FjdGlvbiBCbG9jayBUaW1lb3V0XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0SWQpXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgICAgICBpZiAoSW50ZXJ2YWxJZClcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKEludGVydmFsSWQpO1xuICAgICAgICAgICAgYmxvY2tUaW1lb3V0UmVzb3VyY2VDbGVhbmVyLmNsZWFuKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMud2FpdEZvclRyYW5zYWN0aW9uUmVjZWlwdCA9IHdhaXRGb3JUcmFuc2FjdGlvblJlY2VpcHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13YWl0X2Zvcl90cmFuc2FjdGlvbl9yZWNlaXB0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/wait_for_transaction_receipt.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/watch_transaction_by_polling.js":
/*!************************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/watch_transaction_by_polling.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.watchTransactionByPolling = void 0;\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst web3_rpc_methods_1 = __webpack_require__(/*! web3-rpc-methods */ \"(api)/./src/pages/api/node_modules/web3-rpc-methods/lib/commonjs/index.js\");\nconst schemas_js_1 = __webpack_require__(/*! ../schemas.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/schemas.js\");\n/**\n * This function watches a Transaction by subscribing to new heads.\n * It is used by `watchTransactionForConfirmations`, in case the provider does not support subscription.\n * And it is also used by `watchTransactionBySubscription`, as a fallback, if the subscription failed for any reason.\n */\nconst watchTransactionByPolling = ({ web3Context, transactionReceipt, transactionPromiEvent, returnFormat, }) => {\n    var _a;\n    // Having a transactionReceipt means that the transaction has already been included\n    // in at least one block, so we start with 1\n    let confirmations = 1;\n    const intervalId = setInterval(() => {\n        (() => __awaiter(void 0, void 0, void 0, function* () {\n            if (confirmations >= web3Context.transactionConfirmationBlocks)\n                clearInterval(intervalId);\n            const nextBlock = yield web3_rpc_methods_1.ethRpcMethods.getBlockByNumber(web3Context.requestManager, (0, web3_utils_1.numberToHex)(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)), false);\n            if (nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.hash) {\n                confirmations += 1;\n                transactionPromiEvent.emit('confirmation', {\n                    confirmations: (0, web3_utils_1.format)({ format: 'uint' }, confirmations, returnFormat),\n                    receipt: (0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat),\n                    latestBlockHash: (0, web3_utils_1.format)({ format: 'bytes32' }, nextBlock.hash, returnFormat),\n                });\n            }\n        }))();\n    }, (_a = web3Context.transactionReceiptPollingInterval) !== null && _a !== void 0 ? _a : web3Context.transactionPollingInterval);\n};\nexports.watchTransactionByPolling = watchTransactionByPolling;\n//# sourceMappingURL=watch_transaction_by_polling.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdXRpbHMvd2F0Y2hfdHJhbnNhY3Rpb25fYnlfcG9sbGluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDO0FBQ2pDLHFCQUFxQixtQkFBTyxDQUFDLHVGQUFZO0FBQ3pDLDJCQUEyQixtQkFBTyxDQUFDLG1HQUFrQjtBQUNyRCxxQkFBcUIsbUJBQU8sQ0FBQywwRkFBZTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLHVFQUF1RTtBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsZ0JBQWdCO0FBQzlFO0FBQ0EsZ0VBQWdFLG1CQUFtQjtBQUNuRixpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EsaUNBQWlDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXNzdWVyX2hvbGRlcl92ZXJpZmllci8uL3NyYy9wYWdlcy9hcGkvbm9kZV9tb2R1bGVzL3dlYjMtZXRoL2xpYi9jb21tb25qcy91dGlscy93YXRjaF90cmFuc2FjdGlvbl9ieV9wb2xsaW5nLmpzP2QyNmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2F0Y2hUcmFuc2FjdGlvbkJ5UG9sbGluZyA9IHZvaWQgMDtcbmNvbnN0IHdlYjNfdXRpbHNfMSA9IHJlcXVpcmUoXCJ3ZWIzLXV0aWxzXCIpO1xuY29uc3Qgd2ViM19ycGNfbWV0aG9kc18xID0gcmVxdWlyZShcIndlYjMtcnBjLW1ldGhvZHNcIik7XG5jb25zdCBzY2hlbWFzX2pzXzEgPSByZXF1aXJlKFwiLi4vc2NoZW1hcy5qc1wiKTtcbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3YXRjaGVzIGEgVHJhbnNhY3Rpb24gYnkgc3Vic2NyaWJpbmcgdG8gbmV3IGhlYWRzLlxuICogSXQgaXMgdXNlZCBieSBgd2F0Y2hUcmFuc2FjdGlvbkZvckNvbmZpcm1hdGlvbnNgLCBpbiBjYXNlIHRoZSBwcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0IHN1YnNjcmlwdGlvbi5cbiAqIEFuZCBpdCBpcyBhbHNvIHVzZWQgYnkgYHdhdGNoVHJhbnNhY3Rpb25CeVN1YnNjcmlwdGlvbmAsIGFzIGEgZmFsbGJhY2ssIGlmIHRoZSBzdWJzY3JpcHRpb24gZmFpbGVkIGZvciBhbnkgcmVhc29uLlxuICovXG5jb25zdCB3YXRjaFRyYW5zYWN0aW9uQnlQb2xsaW5nID0gKHsgd2ViM0NvbnRleHQsIHRyYW5zYWN0aW9uUmVjZWlwdCwgdHJhbnNhY3Rpb25Qcm9taUV2ZW50LCByZXR1cm5Gb3JtYXQsIH0pID0+IHtcbiAgICB2YXIgX2E7XG4gICAgLy8gSGF2aW5nIGEgdHJhbnNhY3Rpb25SZWNlaXB0IG1lYW5zIHRoYXQgdGhlIHRyYW5zYWN0aW9uIGhhcyBhbHJlYWR5IGJlZW4gaW5jbHVkZWRcbiAgICAvLyBpbiBhdCBsZWFzdCBvbmUgYmxvY2ssIHNvIHdlIHN0YXJ0IHdpdGggMVxuICAgIGxldCBjb25maXJtYXRpb25zID0gMTtcbiAgICBjb25zdCBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAoKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlybWF0aW9ucyA+PSB3ZWIzQ29udGV4dC50cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2NrcylcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgICAgICAgICAgY29uc3QgbmV4dEJsb2NrID0geWllbGQgd2ViM19ycGNfbWV0aG9kc18xLmV0aFJwY01ldGhvZHMuZ2V0QmxvY2tCeU51bWJlcih3ZWIzQ29udGV4dC5yZXF1ZXN0TWFuYWdlciwgKDAsIHdlYjNfdXRpbHNfMS5udW1iZXJUb0hleCkoQmlnSW50KHRyYW5zYWN0aW9uUmVjZWlwdC5ibG9ja051bWJlcikgKyBCaWdJbnQoY29uZmlybWF0aW9ucykpLCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAobmV4dEJsb2NrID09PSBudWxsIHx8IG5leHRCbG9jayA9PT0gdm9pZCAwID8gdm9pZCAwIDogbmV4dEJsb2NrLmhhc2gpIHtcbiAgICAgICAgICAgICAgICBjb25maXJtYXRpb25zICs9IDE7XG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25Qcm9taUV2ZW50LmVtaXQoJ2NvbmZpcm1hdGlvbicsIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybWF0aW9uczogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAndWludCcgfSwgY29uZmlybWF0aW9ucywgcmV0dXJuRm9ybWF0KSxcbiAgICAgICAgICAgICAgICAgICAgcmVjZWlwdDogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHNjaGVtYXNfanNfMS50cmFuc2FjdGlvblJlY2VpcHRTY2hlbWEsIHRyYW5zYWN0aW9uUmVjZWlwdCwgcmV0dXJuRm9ybWF0KSxcbiAgICAgICAgICAgICAgICAgICAgbGF0ZXN0QmxvY2tIYXNoOiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICdieXRlczMyJyB9LCBuZXh0QmxvY2suaGFzaCwgcmV0dXJuRm9ybWF0KSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpKCk7XG4gICAgfSwgKF9hID0gd2ViM0NvbnRleHQudHJhbnNhY3Rpb25SZWNlaXB0UG9sbGluZ0ludGVydmFsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB3ZWIzQ29udGV4dC50cmFuc2FjdGlvblBvbGxpbmdJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy53YXRjaFRyYW5zYWN0aW9uQnlQb2xsaW5nID0gd2F0Y2hUcmFuc2FjdGlvbkJ5UG9sbGluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhdGNoX3RyYW5zYWN0aW9uX2J5X3BvbGxpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/watch_transaction_by_polling.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/watch_transaction_by_subscription.js":
/*!*****************************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/watch_transaction_by_subscription.js ***!
  \*****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.watchTransactionBySubscription = void 0;\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst schemas_js_1 = __webpack_require__(/*! ../schemas.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/schemas.js\");\nconst watch_transaction_by_polling_js_1 = __webpack_require__(/*! ./watch_transaction_by_polling.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/watch_transaction_by_polling.js\");\n/**\n * This function watches a Transaction by subscribing to new heads.\n * It is used by `watchTransactionForConfirmations`, in case the provider supports subscription.\n */\nconst watchTransactionBySubscription = ({ web3Context, transactionReceipt, transactionPromiEvent, returnFormat, }) => {\n    // The following variable will stay true except if the data arrived,\n    //\tor if watching started after an error had occurred.\n    let needToWatchLater = true;\n    let lastCaughtBlockHash;\n    setImmediate(() => {\n        var _a;\n        (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe('newHeads').then((subscription) => {\n            subscription.on('data', (newBlockHeader) => __awaiter(void 0, void 0, void 0, function* () {\n                var _a;\n                needToWatchLater = false;\n                if (!(newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.number) ||\n                    // For some cases, the on-data event is fired couple times for the same block!\n                    // This needs investigation but seems to be because of multiple `subscription.on('data'...)` even this should not cause that.\n                    lastCaughtBlockHash === (newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash)) {\n                    return;\n                }\n                lastCaughtBlockHash = newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash;\n                const confirmations = BigInt(newBlockHeader.number) -\n                    BigInt(transactionReceipt.blockNumber) +\n                    BigInt(1);\n                transactionPromiEvent.emit('confirmation', {\n                    confirmations: (0, web3_utils_1.format)({ format: 'uint' }, confirmations, returnFormat),\n                    receipt: (0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat),\n                    latestBlockHash: (0, web3_utils_1.format)({ format: 'bytes32' }, newBlockHeader.parentHash, returnFormat),\n                });\n                if (confirmations >= web3Context.transactionConfirmationBlocks) {\n                    yield ((_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.removeSubscription(subscription));\n                }\n            }));\n            subscription.on('error', () => __awaiter(void 0, void 0, void 0, function* () {\n                var _b;\n                yield ((_b = web3Context.subscriptionManager) === null || _b === void 0 ? void 0 : _b.removeSubscription(subscription));\n                needToWatchLater = false;\n                (0, watch_transaction_by_polling_js_1.watchTransactionByPolling)({\n                    web3Context,\n                    transactionReceipt,\n                    transactionPromiEvent,\n                    returnFormat,\n                });\n            }));\n        }).catch(() => {\n            needToWatchLater = false;\n            (0, watch_transaction_by_polling_js_1.watchTransactionByPolling)({\n                web3Context,\n                transactionReceipt,\n                transactionPromiEvent,\n                returnFormat,\n            });\n        });\n    });\n    // Fallback to polling if tx receipt didn't arrived in \"blockHeaderTimeout\" [10 seconds]\n    setTimeout(() => {\n        if (needToWatchLater) {\n            (0, watch_transaction_by_polling_js_1.watchTransactionByPolling)({\n                web3Context,\n                transactionReceipt,\n                transactionPromiEvent,\n                returnFormat,\n            });\n        }\n    }, web3Context.blockHeaderTimeout * 1000);\n};\nexports.watchTransactionBySubscription = watchTransactionBySubscription;\n//# sourceMappingURL=watch_transaction_by_subscription.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdXRpbHMvd2F0Y2hfdHJhbnNhY3Rpb25fYnlfc3Vic2NyaXB0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0M7QUFDdEMscUJBQXFCLG1CQUFPLENBQUMsdUZBQVk7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsMEZBQWU7QUFDNUMsMENBQTBDLG1CQUFPLENBQUMseUlBQW1DO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVFQUF1RTtBQUNqSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsZ0JBQWdCO0FBQzlFO0FBQ0EsZ0VBQWdFLG1CQUFtQjtBQUNuRixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQSxzQ0FBc0M7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pc3N1ZXJfaG9sZGVyX3ZlcmlmaWVyLy4vc3JjL3BhZ2VzL2FwaS9ub2RlX21vZHVsZXMvd2ViMy1ldGgvbGliL2NvbW1vbmpzL3V0aWxzL3dhdGNoX3RyYW5zYWN0aW9uX2J5X3N1YnNjcmlwdGlvbi5qcz9lZDVkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndhdGNoVHJhbnNhY3Rpb25CeVN1YnNjcmlwdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHdlYjNfdXRpbHNfMSA9IHJlcXVpcmUoXCJ3ZWIzLXV0aWxzXCIpO1xuY29uc3Qgc2NoZW1hc19qc18xID0gcmVxdWlyZShcIi4uL3NjaGVtYXMuanNcIik7XG5jb25zdCB3YXRjaF90cmFuc2FjdGlvbl9ieV9wb2xsaW5nX2pzXzEgPSByZXF1aXJlKFwiLi93YXRjaF90cmFuc2FjdGlvbl9ieV9wb2xsaW5nLmpzXCIpO1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdhdGNoZXMgYSBUcmFuc2FjdGlvbiBieSBzdWJzY3JpYmluZyB0byBuZXcgaGVhZHMuXG4gKiBJdCBpcyB1c2VkIGJ5IGB3YXRjaFRyYW5zYWN0aW9uRm9yQ29uZmlybWF0aW9uc2AsIGluIGNhc2UgdGhlIHByb3ZpZGVyIHN1cHBvcnRzIHN1YnNjcmlwdGlvbi5cbiAqL1xuY29uc3Qgd2F0Y2hUcmFuc2FjdGlvbkJ5U3Vic2NyaXB0aW9uID0gKHsgd2ViM0NvbnRleHQsIHRyYW5zYWN0aW9uUmVjZWlwdCwgdHJhbnNhY3Rpb25Qcm9taUV2ZW50LCByZXR1cm5Gb3JtYXQsIH0pID0+IHtcbiAgICAvLyBUaGUgZm9sbG93aW5nIHZhcmlhYmxlIHdpbGwgc3RheSB0cnVlIGV4Y2VwdCBpZiB0aGUgZGF0YSBhcnJpdmVkLFxuICAgIC8vXHRvciBpZiB3YXRjaGluZyBzdGFydGVkIGFmdGVyIGFuIGVycm9yIGhhZCBvY2N1cnJlZC5cbiAgICBsZXQgbmVlZFRvV2F0Y2hMYXRlciA9IHRydWU7XG4gICAgbGV0IGxhc3RDYXVnaHRCbG9ja0hhc2g7XG4gICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB3ZWIzQ29udGV4dC5zdWJzY3JpcHRpb25NYW5hZ2VyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKCduZXdIZWFkcycpLnRoZW4oKHN1YnNjcmlwdGlvbikgPT4ge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLm9uKCdkYXRhJywgKG5ld0Jsb2NrSGVhZGVyKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgbmVlZFRvV2F0Y2hMYXRlciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICghKG5ld0Jsb2NrSGVhZGVyID09PSBudWxsIHx8IG5ld0Jsb2NrSGVhZGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBuZXdCbG9ja0hlYWRlci5udW1iZXIpIHx8XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBzb21lIGNhc2VzLCB0aGUgb24tZGF0YSBldmVudCBpcyBmaXJlZCBjb3VwbGUgdGltZXMgZm9yIHRoZSBzYW1lIGJsb2NrIVxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIG5lZWRzIGludmVzdGlnYXRpb24gYnV0IHNlZW1zIHRvIGJlIGJlY2F1c2Ugb2YgbXVsdGlwbGUgYHN1YnNjcmlwdGlvbi5vbignZGF0YScuLi4pYCBldmVuIHRoaXMgc2hvdWxkIG5vdCBjYXVzZSB0aGF0LlxuICAgICAgICAgICAgICAgICAgICBsYXN0Q2F1Z2h0QmxvY2tIYXNoID09PSAobmV3QmxvY2tIZWFkZXIgPT09IG51bGwgfHwgbmV3QmxvY2tIZWFkZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5ld0Jsb2NrSGVhZGVyLnBhcmVudEhhc2gpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGFzdENhdWdodEJsb2NrSGFzaCA9IG5ld0Jsb2NrSGVhZGVyID09PSBudWxsIHx8IG5ld0Jsb2NrSGVhZGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBuZXdCbG9ja0hlYWRlci5wYXJlbnRIYXNoO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpcm1hdGlvbnMgPSBCaWdJbnQobmV3QmxvY2tIZWFkZXIubnVtYmVyKSAtXG4gICAgICAgICAgICAgICAgICAgIEJpZ0ludCh0cmFuc2FjdGlvblJlY2VpcHQuYmxvY2tOdW1iZXIpICtcbiAgICAgICAgICAgICAgICAgICAgQmlnSW50KDEpO1xuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uUHJvbWlFdmVudC5lbWl0KCdjb25maXJtYXRpb24nLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1hdGlvbnM6ICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ3VpbnQnIH0sIGNvbmZpcm1hdGlvbnMsIHJldHVybkZvcm1hdCksXG4gICAgICAgICAgICAgICAgICAgIHJlY2VpcHQ6ICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KShzY2hlbWFzX2pzXzEudHJhbnNhY3Rpb25SZWNlaXB0U2NoZW1hLCB0cmFuc2FjdGlvblJlY2VpcHQsIHJldHVybkZvcm1hdCksXG4gICAgICAgICAgICAgICAgICAgIGxhdGVzdEJsb2NrSGFzaDogKDAsIHdlYjNfdXRpbHNfMS5mb3JtYXQpKHsgZm9ybWF0OiAnYnl0ZXMzMicgfSwgbmV3QmxvY2tIZWFkZXIucGFyZW50SGFzaCwgcmV0dXJuRm9ybWF0KSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlybWF0aW9ucyA+PSB3ZWIzQ29udGV4dC50cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2Nrcykge1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCAoKF9hID0gd2ViM0NvbnRleHQuc3Vic2NyaXB0aW9uTWFuYWdlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlbW92ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24ub24oJ2Vycm9yJywgKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iO1xuICAgICAgICAgICAgICAgIHlpZWxkICgoX2IgPSB3ZWIzQ29udGV4dC5zdWJzY3JpcHRpb25NYW5hZ2VyKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVtb3ZlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbikpO1xuICAgICAgICAgICAgICAgIG5lZWRUb1dhdGNoTGF0ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAoMCwgd2F0Y2hfdHJhbnNhY3Rpb25fYnlfcG9sbGluZ19qc18xLndhdGNoVHJhbnNhY3Rpb25CeVBvbGxpbmcpKHtcbiAgICAgICAgICAgICAgICAgICAgd2ViM0NvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uUmVjZWlwdCxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25Qcm9taUV2ZW50LFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5Gb3JtYXQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgIG5lZWRUb1dhdGNoTGF0ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICgwLCB3YXRjaF90cmFuc2FjdGlvbl9ieV9wb2xsaW5nX2pzXzEud2F0Y2hUcmFuc2FjdGlvbkJ5UG9sbGluZykoe1xuICAgICAgICAgICAgICAgIHdlYjNDb250ZXh0LFxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uUmVjZWlwdCxcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvblByb21pRXZlbnQsXG4gICAgICAgICAgICAgICAgcmV0dXJuRm9ybWF0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIC8vIEZhbGxiYWNrIHRvIHBvbGxpbmcgaWYgdHggcmVjZWlwdCBkaWRuJ3QgYXJyaXZlZCBpbiBcImJsb2NrSGVhZGVyVGltZW91dFwiIFsxMCBzZWNvbmRzXVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAobmVlZFRvV2F0Y2hMYXRlcikge1xuICAgICAgICAgICAgKDAsIHdhdGNoX3RyYW5zYWN0aW9uX2J5X3BvbGxpbmdfanNfMS53YXRjaFRyYW5zYWN0aW9uQnlQb2xsaW5nKSh7XG4gICAgICAgICAgICAgICAgd2ViM0NvbnRleHQsXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25SZWNlaXB0LFxuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uUHJvbWlFdmVudCxcbiAgICAgICAgICAgICAgICByZXR1cm5Gb3JtYXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHdlYjNDb250ZXh0LmJsb2NrSGVhZGVyVGltZW91dCAqIDEwMDApO1xufTtcbmV4cG9ydHMud2F0Y2hUcmFuc2FjdGlvbkJ5U3Vic2NyaXB0aW9uID0gd2F0Y2hUcmFuc2FjdGlvbkJ5U3Vic2NyaXB0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2F0Y2hfdHJhbnNhY3Rpb25fYnlfc3Vic2NyaXB0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/watch_transaction_by_subscription.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/watch_transaction_for_confirmations.js":
/*!*******************************************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/watch_transaction_for_confirmations.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.watchTransactionForConfirmations = void 0;\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst web3_validator_1 = __webpack_require__(/*! web3-validator */ \"(api)/./src/pages/api/node_modules/web3-validator/lib/commonjs/index.js\");\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\nconst schemas_js_1 = __webpack_require__(/*! ../schemas.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/schemas.js\");\nconst watch_transaction_by_polling_js_1 = __webpack_require__(/*! ./watch_transaction_by_polling.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/watch_transaction_by_polling.js\");\nconst watch_transaction_by_subscription_js_1 = __webpack_require__(/*! ./watch_transaction_by_subscription.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/watch_transaction_by_subscription.js\");\nfunction watchTransactionForConfirmations(web3Context, transactionPromiEvent, transactionReceipt, transactionHash, returnFormat) {\n    if ((0, web3_validator_1.isNullish)(transactionReceipt) || (0, web3_validator_1.isNullish)(transactionReceipt.blockHash))\n        throw new web3_errors_1.TransactionMissingReceiptOrBlockHashError({\n            receipt: transactionReceipt,\n            blockHash: (0, web3_utils_1.format)({ format: 'bytes32' }, transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockHash, returnFormat),\n            transactionHash: (0, web3_utils_1.format)({ format: 'bytes32' }, transactionHash, returnFormat),\n        });\n    if (!transactionReceipt.blockNumber)\n        throw new web3_errors_1.TransactionReceiptMissingBlockNumberError({ receipt: transactionReceipt });\n    // As we have the receipt, it's the first confirmation that tx is accepted.\n    transactionPromiEvent.emit('confirmation', {\n        confirmations: (0, web3_utils_1.format)({ format: 'uint' }, 1, returnFormat),\n        receipt: (0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat),\n        latestBlockHash: (0, web3_utils_1.format)({ format: 'bytes32' }, transactionReceipt.blockHash, returnFormat),\n    });\n    // so a subscription for newBlockHeaders can be made instead of polling\n    const provider = web3Context.requestManager.provider;\n    if (provider && 'supportsSubscriptions' in provider && provider.supportsSubscriptions()) {\n        (0, watch_transaction_by_subscription_js_1.watchTransactionBySubscription)({\n            web3Context,\n            transactionReceipt,\n            transactionPromiEvent,\n            returnFormat,\n        });\n    }\n    else {\n        (0, watch_transaction_by_polling_js_1.watchTransactionByPolling)({\n            web3Context,\n            transactionReceipt,\n            transactionPromiEvent,\n            returnFormat,\n        });\n    }\n}\nexports.watchTransactionForConfirmations = watchTransactionForConfirmations;\n//# sourceMappingURL=watch_transaction_for_confirmations.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL25vZGVfbW9kdWxlcy93ZWIzLWV0aC9saWIvY29tbW9uanMvdXRpbHMvd2F0Y2hfdHJhbnNhY3Rpb25fZm9yX2NvbmZpcm1hdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0NBQXdDO0FBQ3hDLHFCQUFxQixtQkFBTyxDQUFDLHVGQUFZO0FBQ3pDLHlCQUF5QixtQkFBTyxDQUFDLCtGQUFnQjtBQUNqRCxzQkFBc0IsbUJBQU8sQ0FBQyx5RkFBYTtBQUMzQyxxQkFBcUIsbUJBQU8sQ0FBQywwRkFBZTtBQUM1QywwQ0FBMEMsbUJBQU8sQ0FBQyx5SUFBbUM7QUFDckYsK0NBQStDLG1CQUFPLENBQUMsbUpBQXdDO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELG1CQUFtQjtBQUNyRSx3REFBd0QsbUJBQW1CO0FBQzNFLFNBQVM7QUFDVDtBQUNBLDRFQUE0RSw2QkFBNkI7QUFDekc7QUFDQTtBQUNBLGtEQUFrRCxnQkFBZ0I7QUFDbEU7QUFDQSxvREFBb0QsbUJBQW1CO0FBQ3ZFLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pc3N1ZXJfaG9sZGVyX3ZlcmlmaWVyLy4vc3JjL3BhZ2VzL2FwaS9ub2RlX21vZHVsZXMvd2ViMy1ldGgvbGliL2NvbW1vbmpzL3V0aWxzL3dhdGNoX3RyYW5zYWN0aW9uX2Zvcl9jb25maXJtYXRpb25zLmpzP2IyYjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndhdGNoVHJhbnNhY3Rpb25Gb3JDb25maXJtYXRpb25zID0gdm9pZCAwO1xuY29uc3Qgd2ViM191dGlsc18xID0gcmVxdWlyZShcIndlYjMtdXRpbHNcIik7XG5jb25zdCB3ZWIzX3ZhbGlkYXRvcl8xID0gcmVxdWlyZShcIndlYjMtdmFsaWRhdG9yXCIpO1xuY29uc3Qgd2ViM19lcnJvcnNfMSA9IHJlcXVpcmUoXCJ3ZWIzLWVycm9yc1wiKTtcbmNvbnN0IHNjaGVtYXNfanNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlbWFzLmpzXCIpO1xuY29uc3Qgd2F0Y2hfdHJhbnNhY3Rpb25fYnlfcG9sbGluZ19qc18xID0gcmVxdWlyZShcIi4vd2F0Y2hfdHJhbnNhY3Rpb25fYnlfcG9sbGluZy5qc1wiKTtcbmNvbnN0IHdhdGNoX3RyYW5zYWN0aW9uX2J5X3N1YnNjcmlwdGlvbl9qc18xID0gcmVxdWlyZShcIi4vd2F0Y2hfdHJhbnNhY3Rpb25fYnlfc3Vic2NyaXB0aW9uLmpzXCIpO1xuZnVuY3Rpb24gd2F0Y2hUcmFuc2FjdGlvbkZvckNvbmZpcm1hdGlvbnMod2ViM0NvbnRleHQsIHRyYW5zYWN0aW9uUHJvbWlFdmVudCwgdHJhbnNhY3Rpb25SZWNlaXB0LCB0cmFuc2FjdGlvbkhhc2gsIHJldHVybkZvcm1hdCkge1xuICAgIGlmICgoMCwgd2ViM192YWxpZGF0b3JfMS5pc051bGxpc2gpKHRyYW5zYWN0aW9uUmVjZWlwdCkgfHwgKDAsIHdlYjNfdmFsaWRhdG9yXzEuaXNOdWxsaXNoKSh0cmFuc2FjdGlvblJlY2VpcHQuYmxvY2tIYXNoKSlcbiAgICAgICAgdGhyb3cgbmV3IHdlYjNfZXJyb3JzXzEuVHJhbnNhY3Rpb25NaXNzaW5nUmVjZWlwdE9yQmxvY2tIYXNoRXJyb3Ioe1xuICAgICAgICAgICAgcmVjZWlwdDogdHJhbnNhY3Rpb25SZWNlaXB0LFxuICAgICAgICAgICAgYmxvY2tIYXNoOiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICdieXRlczMyJyB9LCB0cmFuc2FjdGlvblJlY2VpcHQgPT09IG51bGwgfHwgdHJhbnNhY3Rpb25SZWNlaXB0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0cmFuc2FjdGlvblJlY2VpcHQuYmxvY2tIYXNoLCByZXR1cm5Gb3JtYXQpLFxuICAgICAgICAgICAgdHJhbnNhY3Rpb25IYXNoOiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICdieXRlczMyJyB9LCB0cmFuc2FjdGlvbkhhc2gsIHJldHVybkZvcm1hdCksXG4gICAgICAgIH0pO1xuICAgIGlmICghdHJhbnNhY3Rpb25SZWNlaXB0LmJsb2NrTnVtYmVyKVxuICAgICAgICB0aHJvdyBuZXcgd2ViM19lcnJvcnNfMS5UcmFuc2FjdGlvblJlY2VpcHRNaXNzaW5nQmxvY2tOdW1iZXJFcnJvcih7IHJlY2VpcHQ6IHRyYW5zYWN0aW9uUmVjZWlwdCB9KTtcbiAgICAvLyBBcyB3ZSBoYXZlIHRoZSByZWNlaXB0LCBpdCdzIHRoZSBmaXJzdCBjb25maXJtYXRpb24gdGhhdCB0eCBpcyBhY2NlcHRlZC5cbiAgICB0cmFuc2FjdGlvblByb21pRXZlbnQuZW1pdCgnY29uZmlybWF0aW9uJywge1xuICAgICAgICBjb25maXJtYXRpb25zOiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoeyBmb3JtYXQ6ICd1aW50JyB9LCAxLCByZXR1cm5Gb3JtYXQpLFxuICAgICAgICByZWNlaXB0OiAoMCwgd2ViM191dGlsc18xLmZvcm1hdCkoc2NoZW1hc19qc18xLnRyYW5zYWN0aW9uUmVjZWlwdFNjaGVtYSwgdHJhbnNhY3Rpb25SZWNlaXB0LCByZXR1cm5Gb3JtYXQpLFxuICAgICAgICBsYXRlc3RCbG9ja0hhc2g6ICgwLCB3ZWIzX3V0aWxzXzEuZm9ybWF0KSh7IGZvcm1hdDogJ2J5dGVzMzInIH0sIHRyYW5zYWN0aW9uUmVjZWlwdC5ibG9ja0hhc2gsIHJldHVybkZvcm1hdCksXG4gICAgfSk7XG4gICAgLy8gc28gYSBzdWJzY3JpcHRpb24gZm9yIG5ld0Jsb2NrSGVhZGVycyBjYW4gYmUgbWFkZSBpbnN0ZWFkIG9mIHBvbGxpbmdcbiAgICBjb25zdCBwcm92aWRlciA9IHdlYjNDb250ZXh0LnJlcXVlc3RNYW5hZ2VyLnByb3ZpZGVyO1xuICAgIGlmIChwcm92aWRlciAmJiAnc3VwcG9ydHNTdWJzY3JpcHRpb25zJyBpbiBwcm92aWRlciAmJiBwcm92aWRlci5zdXBwb3J0c1N1YnNjcmlwdGlvbnMoKSkge1xuICAgICAgICAoMCwgd2F0Y2hfdHJhbnNhY3Rpb25fYnlfc3Vic2NyaXB0aW9uX2pzXzEud2F0Y2hUcmFuc2FjdGlvbkJ5U3Vic2NyaXB0aW9uKSh7XG4gICAgICAgICAgICB3ZWIzQ29udGV4dCxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uUmVjZWlwdCxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uUHJvbWlFdmVudCxcbiAgICAgICAgICAgIHJldHVybkZvcm1hdCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAoMCwgd2F0Y2hfdHJhbnNhY3Rpb25fYnlfcG9sbGluZ19qc18xLndhdGNoVHJhbnNhY3Rpb25CeVBvbGxpbmcpKHtcbiAgICAgICAgICAgIHdlYjNDb250ZXh0LFxuICAgICAgICAgICAgdHJhbnNhY3Rpb25SZWNlaXB0LFxuICAgICAgICAgICAgdHJhbnNhY3Rpb25Qcm9taUV2ZW50LFxuICAgICAgICAgICAgcmV0dXJuRm9ybWF0LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLndhdGNoVHJhbnNhY3Rpb25Gb3JDb25maXJtYXRpb25zID0gd2F0Y2hUcmFuc2FjdGlvbkZvckNvbmZpcm1hdGlvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13YXRjaF90cmFuc2FjdGlvbl9mb3JfY29uZmlybWF0aW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/watch_transaction_for_confirmations.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/validation.js":
/*!************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/validation.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateTransactionForSigning = exports.validateGas = exports.validateFeeMarketGas = exports.validateLegacyGas = exports.validateHardfork = exports.validateBaseChain = exports.validateChainInfo = exports.validateCustomChainInfo = exports.validateTransactionCall = exports.isTransactionCall = exports.validateTransactionWithSender = exports.isTransactionWithSender = exports.isTransactionLegacyUnsigned = exports.isTransaction2930Unsigned = exports.isTransaction1559Unsigned = exports.isAccessList = exports.isAccessListEntry = exports.isBaseTransaction = void 0;\nconst web3_types_1 = __webpack_require__(/*! web3-types */ \"(api)/./src/pages/api/node_modules/web3-types/lib/commonjs/index.js\");\nconst web3_validator_1 = __webpack_require__(/*! web3-validator */ \"(api)/./src/pages/api/node_modules/web3-validator/lib/commonjs/index.js\");\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\nconst format_transaction_js_1 = __webpack_require__(/*! ./utils/format_transaction.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/utils/format_transaction.js\");\nfunction isBaseTransaction(value) {\n    if (!(0, web3_validator_1.isNullish)(value.to) && !(0, web3_validator_1.isAddress)(value.to))\n        return false;\n    if (!(0, web3_validator_1.isHexStrict)(value.type) && !(0, web3_validator_1.isNullish)(value.type) && value.type.length !== 2)\n        return false;\n    if (!(0, web3_validator_1.isHexStrict)(value.nonce))\n        return false;\n    if (!(0, web3_validator_1.isHexStrict)(value.gas))\n        return false;\n    if (!(0, web3_validator_1.isHexStrict)(value.value))\n        return false;\n    if (!(0, web3_validator_1.isHexStrict)(value.input))\n        return false;\n    if (value.chainId && !(0, web3_validator_1.isHexStrict)(value.chainId))\n        return false;\n    return true;\n}\nexports.isBaseTransaction = isBaseTransaction;\nfunction isAccessListEntry(value) {\n    if (!(0, web3_validator_1.isNullish)(value.address) && !(0, web3_validator_1.isAddress)(value.address))\n        return false;\n    if (!(0, web3_validator_1.isNullish)(value.storageKeys) &&\n        !value.storageKeys.every(storageKey => (0, web3_validator_1.isHexString32Bytes)(storageKey)))\n        return false;\n    return true;\n}\nexports.isAccessListEntry = isAccessListEntry;\nfunction isAccessList(value) {\n    if (!Array.isArray(value) ||\n        !value.every(accessListEntry => isAccessListEntry(accessListEntry)))\n        return false;\n    return true;\n}\nexports.isAccessList = isAccessList;\nfunction isTransaction1559Unsigned(value) {\n    if (!isBaseTransaction(value))\n        return false;\n    if (!(0, web3_validator_1.isHexStrict)(value.maxFeePerGas))\n        return false;\n    if (!(0, web3_validator_1.isHexStrict)(value.maxPriorityFeePerGas))\n        return false;\n    if (!isAccessList(value.accessList))\n        return false;\n    return true;\n}\nexports.isTransaction1559Unsigned = isTransaction1559Unsigned;\nfunction isTransaction2930Unsigned(value) {\n    if (!isBaseTransaction(value))\n        return false;\n    if (!(0, web3_validator_1.isHexStrict)(value.gasPrice))\n        return false;\n    if (!isAccessList(value.accessList))\n        return false;\n    return true;\n}\nexports.isTransaction2930Unsigned = isTransaction2930Unsigned;\nfunction isTransactionLegacyUnsigned(value) {\n    if (!isBaseTransaction(value))\n        return false;\n    if (!(0, web3_validator_1.isHexStrict)(value.gasPrice))\n        return false;\n    return true;\n}\nexports.isTransactionLegacyUnsigned = isTransactionLegacyUnsigned;\nfunction isTransactionWithSender(value) {\n    if (!(0, web3_validator_1.isAddress)(value.from))\n        return false;\n    if (!isBaseTransaction(value))\n        return false;\n    if (!isTransaction1559Unsigned(value) &&\n        !isTransaction2930Unsigned(value) &&\n        !isTransactionLegacyUnsigned(value))\n        return false;\n    return true;\n}\nexports.isTransactionWithSender = isTransactionWithSender;\nfunction validateTransactionWithSender(value) {\n    if (!isTransactionWithSender(value))\n        throw new web3_errors_1.InvalidTransactionWithSender(value);\n}\nexports.validateTransactionWithSender = validateTransactionWithSender;\nfunction isTransactionCall(value) {\n    if (!(0, web3_validator_1.isNullish)(value.from) && !(0, web3_validator_1.isAddress)(value.from))\n        return false;\n    if (!(0, web3_validator_1.isAddress)(value.to))\n        return false;\n    if (!(0, web3_validator_1.isNullish)(value.gas) && !(0, web3_validator_1.isHexStrict)(value.gas))\n        return false;\n    if (!(0, web3_validator_1.isNullish)(value.gasPrice) && !(0, web3_validator_1.isHexStrict)(value.gasPrice))\n        return false;\n    if (!(0, web3_validator_1.isNullish)(value.value) && !(0, web3_validator_1.isHexStrict)(value.value))\n        return false;\n    if (!(0, web3_validator_1.isNullish)(value.data) && !(0, web3_validator_1.isHexStrict)(value.data))\n        return false;\n    if (!(0, web3_validator_1.isNullish)(value.input) && !(0, web3_validator_1.isHexStrict)(value.input))\n        return false;\n    if (!(0, web3_validator_1.isNullish)(value.type))\n        return false;\n    if (isTransaction1559Unsigned(value))\n        return false;\n    if (isTransaction2930Unsigned(value))\n        return false;\n    return true;\n}\nexports.isTransactionCall = isTransactionCall;\nfunction validateTransactionCall(value) {\n    if (!isTransactionCall(value))\n        throw new web3_errors_1.InvalidTransactionCall(value);\n}\nexports.validateTransactionCall = validateTransactionCall;\nconst validateCustomChainInfo = (transaction) => {\n    if (!(0, web3_validator_1.isNullish)(transaction.common)) {\n        if ((0, web3_validator_1.isNullish)(transaction.common.customChain))\n            throw new web3_errors_1.MissingCustomChainError();\n        if ((0, web3_validator_1.isNullish)(transaction.common.customChain.chainId))\n            throw new web3_errors_1.MissingCustomChainIdError();\n        if (!(0, web3_validator_1.isNullish)(transaction.chainId) &&\n            transaction.chainId !== transaction.common.customChain.chainId)\n            throw new web3_errors_1.ChainIdMismatchError({\n                txChainId: transaction.chainId,\n                customChainId: transaction.common.customChain.chainId,\n            });\n    }\n};\nexports.validateCustomChainInfo = validateCustomChainInfo;\nconst validateChainInfo = (transaction) => {\n    if (!(0, web3_validator_1.isNullish)(transaction.common) &&\n        !(0, web3_validator_1.isNullish)(transaction.chain) &&\n        !(0, web3_validator_1.isNullish)(transaction.hardfork)) {\n        throw new web3_errors_1.CommonOrChainAndHardforkError();\n    }\n    if ((!(0, web3_validator_1.isNullish)(transaction.chain) && (0, web3_validator_1.isNullish)(transaction.hardfork)) ||\n        (!(0, web3_validator_1.isNullish)(transaction.hardfork) && (0, web3_validator_1.isNullish)(transaction.chain)))\n        throw new web3_errors_1.MissingChainOrHardforkError({\n            chain: transaction.chain,\n            hardfork: transaction.hardfork,\n        });\n};\nexports.validateChainInfo = validateChainInfo;\nconst validateBaseChain = (transaction) => {\n    if (!(0, web3_validator_1.isNullish)(transaction.common))\n        if (!(0, web3_validator_1.isNullish)(transaction.common.baseChain))\n            if (!(0, web3_validator_1.isNullish)(transaction.chain) &&\n                transaction.chain !== transaction.common.baseChain) {\n                throw new web3_errors_1.ChainMismatchError({\n                    txChain: transaction.chain,\n                    baseChain: transaction.common.baseChain,\n                });\n            }\n};\nexports.validateBaseChain = validateBaseChain;\nconst validateHardfork = (transaction) => {\n    if (!(0, web3_validator_1.isNullish)(transaction.common))\n        if (!(0, web3_validator_1.isNullish)(transaction.common.hardfork))\n            if (!(0, web3_validator_1.isNullish)(transaction.hardfork) &&\n                transaction.hardfork !== transaction.common.hardfork) {\n                throw new web3_errors_1.HardforkMismatchError({\n                    txHardfork: transaction.hardfork,\n                    commonHardfork: transaction.common.hardfork,\n                });\n            }\n};\nexports.validateHardfork = validateHardfork;\nconst validateLegacyGas = (transaction) => {\n    if (\n    // This check is verifying gas and gasPrice aren't less than 0.\n    (0, web3_validator_1.isNullish)(transaction.gas) ||\n        !(0, web3_validator_1.isUInt)(transaction.gas) ||\n        (0, web3_validator_1.isNullish)(transaction.gasPrice) ||\n        !(0, web3_validator_1.isUInt)(transaction.gasPrice))\n        throw new web3_errors_1.InvalidGasOrGasPrice({\n            gas: transaction.gas,\n            gasPrice: transaction.gasPrice,\n        });\n    if (!(0, web3_validator_1.isNullish)(transaction.maxFeePerGas) || !(0, web3_validator_1.isNullish)(transaction.maxPriorityFeePerGas))\n        throw new web3_errors_1.UnsupportedFeeMarketError({\n            maxFeePerGas: transaction.maxFeePerGas,\n            maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n        });\n};\nexports.validateLegacyGas = validateLegacyGas;\nconst validateFeeMarketGas = (transaction) => {\n    // These errors come from 1.x, so they must be checked before\n    // InvalidMaxPriorityFeePerGasOrMaxFeePerGas to throw the same error\n    // for the same code executing in 1.x\n    if (!(0, web3_validator_1.isNullish)(transaction.gasPrice) && transaction.type === '0x2')\n        throw new web3_errors_1.Eip1559GasPriceError(transaction.gasPrice);\n    if (transaction.type === '0x0' || transaction.type === '0x1')\n        throw new web3_errors_1.UnsupportedFeeMarketError({\n            maxFeePerGas: transaction.maxFeePerGas,\n            maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n        });\n    if ((0, web3_validator_1.isNullish)(transaction.maxFeePerGas) ||\n        !(0, web3_validator_1.isUInt)(transaction.maxFeePerGas) ||\n        (0, web3_validator_1.isNullish)(transaction.maxPriorityFeePerGas) ||\n        !(0, web3_validator_1.isUInt)(transaction.maxPriorityFeePerGas))\n        throw new web3_errors_1.InvalidMaxPriorityFeePerGasOrMaxFeePerGas({\n            maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n            maxFeePerGas: transaction.maxFeePerGas,\n        });\n};\nexports.validateFeeMarketGas = validateFeeMarketGas;\n/**\n * This method checks if all required gas properties are present for either\n * legacy gas (type 0x0 and 0x1) OR fee market transactions (0x2)\n */\nconst validateGas = (transaction) => {\n    const gasPresent = !(0, web3_validator_1.isNullish)(transaction.gas) || !(0, web3_validator_1.isNullish)(transaction.gasLimit);\n    const legacyGasPresent = gasPresent && !(0, web3_validator_1.isNullish)(transaction.gasPrice);\n    const feeMarketGasPresent = gasPresent &&\n        !(0, web3_validator_1.isNullish)(transaction.maxPriorityFeePerGas) &&\n        !(0, web3_validator_1.isNullish)(transaction.maxFeePerGas);\n    if (!legacyGasPresent && !feeMarketGasPresent)\n        throw new web3_errors_1.MissingGasError({\n            gas: transaction.gas,\n            gasPrice: transaction.gasPrice,\n            maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n            maxFeePerGas: transaction.maxFeePerGas,\n        });\n    if (legacyGasPresent && feeMarketGasPresent)\n        throw new web3_errors_1.TransactionGasMismatchError({\n            gas: transaction.gas,\n            gasPrice: transaction.gasPrice,\n            maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n            maxFeePerGas: transaction.maxFeePerGas,\n        });\n    (legacyGasPresent ? exports.validateLegacyGas : exports.validateFeeMarketGas)(transaction);\n    (!(0, web3_validator_1.isNullish)(transaction.type) && transaction.type > '0x1'\n        ? exports.validateFeeMarketGas\n        : exports.validateLegacyGas)(transaction);\n};\nexports.validateGas = validateGas;\nconst validateTransactionForSigning = (transaction, overrideMethod) => {\n    if (!(0, web3_validator_1.isNullish)(overrideMethod)) {\n        overrideMethod(transaction);\n        return;\n    }\n    if (typeof transaction !== 'object' || (0, web3_validator_1.isNullish)(transaction))\n        throw new web3_errors_1.InvalidTransactionObjectError(transaction);\n    (0, exports.validateCustomChainInfo)(transaction);\n    (0, exports.validateChainInfo)(transaction);\n    (0, exports.validateBaseChain)(transaction);\n    (0, exports.validateHardfork)(transaction);\n    const formattedTransaction = (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT);\n    (0, exports.validateGas)(formattedTransaction);\n    if ((0, web3_validator_1.isNullish)(formattedTransaction.nonce) ||\n        (0, web3_validator_1.isNullish)(formattedTransaction.chainId) ||\n        formattedTransaction.nonce.startsWith('-') ||\n        formattedTransaction.chainId.startsWith('-'))\n        throw new web3_errors_1.InvalidNonceOrChainIdError({\n            nonce: transaction.nonce,\n            chainId: transaction.chainId,\n        });\n};\nexports.validateTransactionForSigning = validateTransactionForSigning;\n//# sourceMappingURL=validation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/validation.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/web3_eth.js":
/*!**********************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/web3_eth.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Web3Eth = exports.registeredSubscriptions = void 0;\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nconst web3_types_1 = __webpack_require__(/*! web3-types */ \"(api)/./src/pages/api/node_modules/web3-types/lib/commonjs/index.js\");\nconst web3_core_1 = __webpack_require__(/*! web3-core */ \"(api)/./src/pages/api/node_modules/web3-core/lib/commonjs/index.js\");\nconst web3_errors_1 = __webpack_require__(/*! web3-errors */ \"(api)/./src/pages/api/node_modules/web3-errors/lib/commonjs/index.js\");\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst web3_rpc_methods_1 = __webpack_require__(/*! web3-rpc-methods */ \"(api)/./src/pages/api/node_modules/web3-rpc-methods/lib/commonjs/index.js\");\nconst rpcMethodsWrappers = __importStar(__webpack_require__(/*! ./rpc_method_wrappers.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/rpc_method_wrappers.js\"));\nconst web3_subscriptions_js_1 = __webpack_require__(/*! ./web3_subscriptions.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/web3_subscriptions.js\");\nexports.registeredSubscriptions = {\n    logs: web3_subscriptions_js_1.LogsSubscription,\n    newPendingTransactions: web3_subscriptions_js_1.NewPendingTransactionsSubscription,\n    newHeads: web3_subscriptions_js_1.NewHeadsSubscription,\n    syncing: web3_subscriptions_js_1.SyncingSubscription,\n    pendingTransactions: web3_subscriptions_js_1.NewPendingTransactionsSubscription,\n    newBlockHeaders: web3_subscriptions_js_1.NewHeadsSubscription, // the same as newHeads. just for support API like in version 1.x\n};\n/**\n *\n * The Web3Eth allows you to interact with an Ethereum blockchain.\n *\n * For using Web3 Eth functions, first install Web3 package using `npm i web3` or `yarn add web3` based on your package manager usage.\n * After that, Web3 Eth functions will be available as mentioned in following snippet.\n * ```ts\n * import { Web3 } from 'web3';\n * const web3 = new Web3('https://mainnet.infura.io/v3/<YOURPROJID>');\n *\n * const block = await web3.eth.getBlock(0);\n *\n * ```\n *\n * For using individual package install `web3-eth` package using `npm i web3-eth` or `yarn add web3-eth` and only import required functions.\n * This is more efficient approach for building lightweight applications.\n * ```ts\n * import { Web3Eth } from 'web3-eth';\n *\n * const eth = new Web3Eth('https://mainnet.infura.io/v3/<YOURPROJID>');\n * const block = await eth.getBlock(0);\n *\n * ```\n */\nclass Web3Eth extends web3_core_1.Web3Context {\n    constructor(providerOrContext) {\n        if (typeof providerOrContext === 'string' ||\n            (0, web3_core_1.isSupportedProvider)(providerOrContext)) {\n            super({\n                provider: providerOrContext,\n                registeredSubscriptions: exports.registeredSubscriptions,\n            });\n            return;\n        }\n        if (providerOrContext.registeredSubscriptions) {\n            super(providerOrContext);\n            return;\n        }\n        super(Object.assign(Object.assign({}, providerOrContext), { registeredSubscriptions: exports.registeredSubscriptions }));\n    }\n    /**\n     * @returns Returns the ethereum protocol version of the node.\n     *\n     * ```ts\n     * web3.eth.getProtocolVersion().then(console.log);\n     * > \"63\"\n     * ```\n     */\n    getProtocolVersion() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return web3_rpc_methods_1.ethRpcMethods.getProtocolVersion(this.requestManager);\n        });\n    }\n    // TODO Add returnFormat parameter\n    /**\n     * Checks if the node is currently syncing.\n     *\n     * @returns Either a {@link SyncingStatusAPI}, or `false`.\n     *\n     * ```ts\n     * web3.eth.isSyncing().then(console.log);\n     * > {\n     *     startingBlock: 100,\n     *     currentBlock: 312,\n     *     highestBlock: 512,\n     *     knownStates: 234566,\n     *     pulledStates: 123455\n     * }\n     * ```\n     */\n    isSyncing() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return web3_rpc_methods_1.ethRpcMethods.getSyncing(this.requestManager);\n        });\n    }\n    // TODO consider adding returnFormat parameter (to format address as bytes)\n    /**\n     * @returns Returns the coinbase address to which mining rewards will go.\n     *\n     * ```ts\n     * web3.eth.getCoinbase().then(console.log);\n     * > \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\"\n     * ```\n     */\n    getCoinbase() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return web3_rpc_methods_1.ethRpcMethods.getCoinbase(this.requestManager);\n        });\n    }\n    /**\n     * Checks whether the node is mining or not.\n     *\n     * @returns `true` if the node is mining, otherwise `false`.\n     *\n     * ```ts\n     * web3.eth.isMining().then(console.log);\n     * > true\n     * ```\n     */\n    isMining() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return web3_rpc_methods_1.ethRpcMethods.getMining(this.requestManager);\n        });\n    }\n    /**\n     * @deprecated Will be removed in the future, please use {@link Web3Eth.getHashRate} method instead.\n     *\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The number of hashes per second that the node is mining with.\n     *\n     * ```ts\n     * web3.eth.getHashrate().then(console.log);\n     * > 493736n\n     *\n     * web3.eth.getHashrate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n     * > \"0x788a8\"\n     * ```\n     */\n    getHashrate(returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.getHashRate(returnFormat);\n        });\n    }\n    /**\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The number of hashes per second that the node is mining with.\n     *\n     * ```ts\n     * web3.eth.getHashRate().then(console.log);\n     * > 493736n\n     *\n     * web3.eth.getHashRate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n     * > \"0x788a8\"\n     * ```\n     */\n    getHashRate(returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getHashRate(this, returnFormat);\n        });\n    }\n    /**\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The gas price determined by the last few blocks median gas price.\n     *\n     * ```ts\n     * web3.eth.getGasPrice().then(console.log);\n     * > 20000000000n\n     *\n     * web3.eth.getGasPrice({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n     * > \"0x4a817c800\"\n     * ```\n     */\n    getGasPrice(returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getGasPrice(this, returnFormat);\n        });\n    }\n    /**\n     * @returns A list of accounts the node controls (addresses are checksummed).\n     *\n     * ```ts\n     * web3.eth.getAccounts().then(console.log);\n     * > [\"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", \"0xDCc6960376d6C6dEa93647383FfB245CfCed97Cf\"]\n     * ```\n     */\n    getAccounts() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const hexAddresses = (_a = (yield web3_rpc_methods_1.ethRpcMethods.getAccounts(this.requestManager))) !== null && _a !== void 0 ? _a : [];\n            return hexAddresses.map(address => (0, web3_utils_1.toChecksumAddress)(address));\n        });\n    }\n    /**\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The current block number.\n     *\n     * ```ts\n     * web3.eth.getBlockNumber().then(console.log);\n     * > 2744n\n     *\n     * web3.eth.getBlockNumber({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n     * > \"0xab8\"\n     * ```\n     */\n    getBlockNumber(returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getBlockNumber(this, returnFormat);\n        });\n    }\n    /**\n     * Get the balance of an address at a given block.\n     *\n     * @param address The address to get the balance of.\n     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the balance query.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The current balance for the given address in `wei`.\n     *\n     * ```ts\n     * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n     * > 1000000000000n\n     *\n     * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n     * > \"0xe8d4a51000\"\n     * ```\n     */\n    getBalance(address, blockNumber = this.defaultBlock, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getBalance(this, address, blockNumber, returnFormat);\n        });\n    }\n    /**\n     * Get the storage at a specific position of an address.\n     *\n     * @param address The address to get the storage from.\n     * @param storageSlot The index position of the storage.\n     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the storage query.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The value in storage at the given position.\n     *\n     * ```ts\n     * web3.eth.getStorageAt(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\", 0).then(console.log);\n     * > \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"\n     *\n     * web3.eth.getStorageAt(\n     *      \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\",\n     *      0,\n     *      undefined,\n     *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\n     * ).then(console.log);\n     * > Uint8Array(31) [\n     *       3, 52,  86, 115,  33,  35, 255, 255,\n     *       35, 66,  52,  45, 209,  35,  66,  67,\n     *       67, 36,  35,  66,  52, 253,  35,  79,\n     *       210, 63, 212, 242,  61,  66,  52\n     *    ]\n     * ```\n     */\n    getStorageAt(address, storageSlot, blockNumber = this.defaultBlock, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getStorageAt(this, address, storageSlot, blockNumber, returnFormat);\n        });\n    }\n    /**\n     * Get the code at a specific address.\n     *\n     * @param address The address to get the code from.\n     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the code query.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The [data](https://ethereum.org/en/developers/docs/transactions/#the-data-field) at the provided `address`.\n     *\n     * ```ts\n     * web3.eth.getCode(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\").then(console.log);\n     * > \"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"\n     *\n     * web3.eth.getCode(\n     *      \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n     *      undefined,\n     *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\n     * ).then(console.log);\n     * > Uint8Array(50) [\n     *   96,  1,  96,   0, 128, 53, 129, 26, 129, 129, 129,\n     *   20, 96,  18,  87, 131,  1,   0, 91,  96,  27,  96,\n     *   1, 53,  96,  37,  86, 91, 128, 96,   0,  82,  96,\n     *   32, 96,   0, 242,  91, 96,   0, 96,   7, 130,   2,\n     *   144, 80, 145, 144,  80, 86\n     * ]\n     * ```\n     */\n    getCode(address, blockNumber = this.defaultBlock, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getCode(this, address, blockNumber, returnFormat);\n        });\n    }\n    /**\n     * Retrieves a {@link Block} matching the provided block number, block hash or block tag.\n     *\n     * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n     * @param hydrated If specified `true`, the returned block will contain all transactions as objects. If `false` it will only contain transaction hashes.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted (does not format transaction objects or hashes).\n     * @returns A {@link Block} object matching the provided block number or block hash.\n     *\n     * ```ts\n     * web3.eth.getBlock(0).then(console.log);\n     * > {\n     *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n     *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n     *    miner: '0x0000000000000000000000000000000000000000',\n     *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n     *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n     *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n     *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n     *    difficulty: 1n,\n     *    number: 0n,\n     *    gasLimit: 30000000n,\n     *    gasUsed: 0n,\n     *    timestamp: 1658281638n,\n     *    extraData: '0x',\n     *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *    nonce: 0n,\n     *    totalDifficulty: 1n,\n     *    baseFeePerGas: 1000000000n,\n     *    size: 514n,\n     *    transactions: [],\n     *    uncles: []\n     *  }\n     *\n     * web3.eth.getBlock(\n     *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\n     *      false,\n     *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n     * ).then(console.log);\n     * > {\n     *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n     *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n     *    miner: '0x0000000000000000000000000000000000000000',\n     *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n     *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n     *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n     *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n     *    difficulty: 1,\n     *    number: 0,\n     *    gasLimit: 30000000,\n     *    gasUsed: 0,\n     *    timestamp: 1658281638,\n     *    extraData: '0x',\n     *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *    nonce: 0,\n     *    totalDifficulty: 1,\n     *    baseFeePerGas: 1000000000,\n     *    size: 514,\n     *    transactions: [],\n     *    uncles: []\n     *  }\n     * ```\n     */\n    getBlock(block = this.defaultBlock, hydrated = false, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getBlock(this, block, hydrated, returnFormat);\n        });\n    }\n    /**\n     * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The number of transactions in the provided block.\n     *\n     * ```ts\n     * web3.eth.getBlockTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n     * > 1n\n     *\n     * web3.eth.getBlockTransactionCount(\n     *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n     * ).then(console.log);\n     * > 1\n     * ```\n     */\n    getBlockTransactionCount(block = this.defaultBlock, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getBlockTransactionCount(this, block, returnFormat);\n        });\n    }\n    /**\n     * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The number of [uncles](https://ethereum.org/en/glossary/#ommer) in the provided block.\n     *\n     * ```ts\n     * web3.eth.getBlockUncleCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n     * > 1n\n     *\n     * web3.eth.getBlockUncleCount(\n     *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n     * ).then(console.log);\n     * > 1\n     * ```\n     */\n    getBlockUncleCount(block = this.defaultBlock, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getBlockUncleCount(this, block, returnFormat);\n        });\n    }\n    /**\n     *\n     * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n     * @param uncleIndex The index position of the uncle.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns A blocks [uncle](https://ethereum.org/en/glossary/#ommer) by a given uncle index position.\n     *\n     * ```ts\n     * web3.eth.getUncle(0, 1).then(console.log);\n     * > {\n     *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n     *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n     *    miner: '0x0000000000000000000000000000000000000000',\n     *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n     *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n     *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n     *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n     *    difficulty: 1n,\n     *    number: 0n,\n     *    gasLimit: 30000000n,\n     *    gasUsed: 0n,\n     *    timestamp: 1658281638n,\n     *    extraData: '0x',\n     *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *    nonce: 0n,\n     *    totalDifficulty: 1n,\n     *    baseFeePerGas: 1000000000n,\n     *    size: 514n,\n     *    transactions: [],\n     *    uncles: []\n     *  }\n     *\n     * web3.eth.getUncle(\n     *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\n     *      1,\n     *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n     * ).then(console.log);\n     * > {\n     *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n     *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n     *    miner: '0x0000000000000000000000000000000000000000',\n     *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n     *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n     *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n     *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n     *    difficulty: 1,\n     *    number: 0,\n     *    gasLimit: 30000000,\n     *    gasUsed: 0,\n     *    timestamp: 1658281638,\n     *    extraData: '0x',\n     *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *    nonce: 0,\n     *    totalDifficulty: 1,\n     *    baseFeePerGas: 1000000000,\n     *    size: 514,\n     *    transactions: [],\n     *    uncles: []\n     *  }\n     * ```\n     */\n    getUncle(block = this.defaultBlock, uncleIndex, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getUncle(this, block, uncleIndex, returnFormat);\n        });\n    }\n    /**\n     * @param transactionHash The hash of the desired transaction.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The desired transaction object.\n     *\n     * ```ts\n     * web3.eth.getTransaction('0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc').then(console.log);\n     * {\n     *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n     *    type: 0n,\n     *    nonce: 0n,\n     *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n     *    blockNumber: 1n,\n     *    transactionIndex: 0n,\n     *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n     *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n     *    value: 1n,\n     *    gas: 90000n,\n     *    gasPrice: 2000000000n,\n     *    input: '0x',\n     *    v: 2709n,\n     *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n     *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n     *  }\n     *\n     * web3.eth.getTransaction(\n     *     web3.utils.hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\n     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n     * ).then(console.log);\n     * {\n     *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n     *    type: 0,\n     *    nonce: 0,\n     *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n     *    blockNumber: 1,\n     *    transactionIndex: 0,\n     *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n     *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n     *    value: 1,\n     *    gas: 90000,\n     *    gasPrice: 2000000000,\n     *    input: '0x',\n     *    v: 2709,\n     *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n     *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n     *  }\n     * ```\n     */\n    getTransaction(transactionHash, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield rpcMethodsWrappers.getTransaction(this, transactionHash, returnFormat);\n            if (!response)\n                throw new web3_errors_1.TransactionNotFound();\n            return response;\n        });\n    }\n    /**\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns A list of pending transactions.\n     *\n     * ```ts\n     * web3.eth.getPendingTransactions().then(console.log);\n     * > [\n     *      {\n     *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n     *          type: 0n,\n     *          nonce: 0n,\n     *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *          blockNumber: null,\n     *          transactionIndex: 0n,\n     *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n     *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n     *          value: 1n,\n     *          gas: 90000n,\n     *          gasPrice: 2000000000n,\n     *          input: '0x',\n     *          v: 2709n,\n     *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n     *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n     *      },\n     *      {\n     *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n     *          type: 0n,\n     *          nonce: 1n,\n     *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *          blockNumber: null,\n     *          transactionIndex: 0n,\n     *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n     *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n     *          value: 1n,\n     *          gas: 90000n,\n     *          gasPrice: 2000000000n,\n     *          input: '0x',\n     *          v: 2710n,\n     *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\n     *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\n     *      }\n     *   ]\n     *\n     * * web3.eth.getPendingTransactions({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n     * > [\n     *      {\n     *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n     *          type: 0,\n     *          nonce: 0,\n     *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *          blockNumber: null,\n     *          transactionIndex: 0,\n     *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n     *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n     *          value: 1,\n     *          gas: 90000,\n     *          gasPrice: 2000000000,\n     *          input: '0x',\n     *          v: 2709,\n     *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n     *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n     *      },\n     *      {\n     *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n     *          type: 0,\n     *          nonce: 1,\n     *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *          blockNumber: null,\n     *          transactionIndex: 0,\n     *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n     *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n     *          value: 1,\n     *          gas: 90000,\n     *          gasPrice: 2000000000,\n     *          input: '0x',\n     *          v: 2710,\n     *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\n     *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\n     *      }\n     *   ]\n     * ```\n     */\n    getPendingTransactions(returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getPendingTransactions(this, returnFormat);\n        });\n    }\n    /**\n     * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n     * @param transactionIndex The index position of the transaction.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The desired transaction object.\n     *\n     * ```ts\n     * web3.eth.getTransactionFromBlock('0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00', 0).then(console.log);\n     * {\n     *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n     *    type: 0n,\n     *    nonce: 0n,\n     *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n     *    blockNumber: 1n,\n     *    transactionIndex: 0n,\n     *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n     *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n     *    value: 1n,\n     *    gas: 90000n,\n     *    gasPrice: 2000000000n,\n     *    input: '0x',\n     *    v: 2709n,\n     *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n     *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n     *  }\n     *\n     * web3.eth.getTransactionFromBlock(\n     *     hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\n     *     0,\n     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n     * ).then(console.log);\n     * {\n     *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n     *    type: 0,\n     *    nonce: 0,\n     *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n     *    blockNumber: 1,\n     *    transactionIndex: 0,\n     *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n     *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n     *    value: 1,\n     *    gas: 90000,\n     *    gasPrice: 2000000000,\n     *    input: '0x',\n     *    v: 2709,\n     *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n     *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n     *  }\n     * ```\n     */\n    getTransactionFromBlock(block = this.defaultBlock, transactionIndex, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getTransactionFromBlock(this, block, transactionIndex, returnFormat);\n        });\n    }\n    /**\n     * @param transactionHash Hash of the transaction to retrieve the receipt for.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The desired {@link TransactionReceipt} object.\n     *\n     * ```ts\n     * web3.eth.getTransactionReceipt(\"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\").then(console.log);\n     * > {\n     *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n     *      transactionIndex: 0n,\n     *      blockNumber: 2n,\n     *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n     *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n     *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n     *      cumulativeGasUsed: 21000n,\n     *      gasUsed: 21000n,\n     *      logs: [],\n     *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n     *      status: 1n,\n     *      effectiveGasPrice: 2000000000n,\n     *      type: 0n\n     *  }\n     *\n     * web3.eth.getTransactionReceipt(\n     *      \"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\",\n     *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n     * ).then(console.log);\n     * > {\n     *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n     *      transactionIndex: 0,\n     *      blockNumber: 2,\n     *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n     *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n     *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n     *      cumulativeGasUsed: 21000,\n     *      gasUsed: 21000,\n     *      logs: [],\n     *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n     *      status: 1,\n     *      effectiveGasPrice: 2000000000,\n     *      type: 0n\n     *  }\n     * ```\n     */\n    getTransactionReceipt(transactionHash, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield rpcMethodsWrappers.getTransactionReceipt(this, transactionHash, returnFormat);\n            if (!response)\n                throw new web3_errors_1.TransactionNotFound();\n            return response;\n        });\n    }\n    /**\n     * @param address The address to get the number of transactions for.\n     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the query.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The number of transactions sent from the provided address.\n     *\n     * ```ts\n     * web3.eth.getTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n     * > 1n\n     *\n     * web3.eth.getTransactionCount(\n     *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n     *     undefined,\n     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n     * ).then(console.log);\n     * > 1\n     * ```\n     */\n    getTransactionCount(address, blockNumber = this.defaultBlock, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getTransactionCount(this, address, blockNumber, returnFormat);\n        });\n    }\n    /**\n     * @param transaction The {@link Transaction}, {@link TransactionWithFromLocalWalletIndex}, {@link TransactionWithToLocalWalletIndex} or {@link TransactionWithFromAndToLocalWalletIndex} to send. __Note:__ In the `to` and `from` fields when hex strings are used, it is assumed they are addresses, for any other form (number, string number, etc.) it is assumed they are wallet indexes.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @param options A configuration object used to change the behavior of the `sendTransaction` method.\n     * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\n     * ```ts\n     * const transaction = {\n     *   from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n     *   to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n     *   value: '0x1'\n     * }\n     *\n     * const transactionHash = await web3.eth.sendTransaction(transaction);\n     * console.log(transactionHash);\n     * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n     *\n     * web3.eth.sendTransaction(transaction).then(console.log);\n     * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n     *\n     * web3.eth.sendTransaction(transaction).catch(console.log);\n     * > <Some TransactionError>\n     *\n     * // Example using options.ignoreGasPricing = true\n     * web3.eth.sendTransaction(transaction, undefined, { ignoreGasPricing: true }).then(console.log);\n     * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n     * ```\n     *\n     *\n     * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\n     * - `sending`\n     * ```ts\n     * web3.eth.sendTransaction(transaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\n     * > {\n     *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n     *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n     *    value: '0x1',\n     *    gasPrice: '0x77359400',\n     *    maxPriorityFeePerGas: undefined,\n     *    maxFeePerGas: undefined\n     * }\n     * ```\n     * - `sent`\n     * ```ts\n     * web3.eth.sendTransaction(transaction).on('sent', sentTransaction => console.log(sentTransaction));\n     * > {\n     *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n     *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n     *    value: '0x1',\n     *    gasPrice: '0x77359400',\n     *    maxPriorityFeePerGas: undefined,\n     *    maxFeePerGas: undefined\n     * }\n     * ```\n     * - `transactionHash`\n     * ```ts\n     * web3.eth.sendTransaction(transaction).on('transactionHash', transactionHash => console.log(transactionHash));\n     * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n     * ```\n     * - `receipt`\n     * ```ts\n     * web3.eth.sendTransaction(transaction).on('receipt', receipt => console.log(receipt));\n     * > {\n     *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n     *      transactionIndex: 0n,\n     *      blockNumber: 2n,\n     *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n     *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n     *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n     *      cumulativeGasUsed: 21000n,\n     *      gasUsed: 21000n,\n     *      logs: [],\n     *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n     *      status: 1n,\n     *      effectiveGasPrice: 2000000000n,\n     *      type: 0n\n     * }\n     * ```\n     * - `confirmation`\n     * ```ts\n     * web3.eth.sendTransaction(transaction).on('confirmation', confirmation => console.log(confirmation));\n     * > {\n     *     confirmations: 1n,\n     *     receipt: {\n     *         transactionHash: '0xb4a3a35ae0f3e77ef0ff7be42010d948d011b21a4e341072ee18717b67e99ab8',\n     *         transactionIndex: 0n,\n     *         blockNumber: 5n,\n     *         blockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548',\n     *         from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n     *         to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n     *         cumulativeGasUsed: 21000n,\n     *         gasUsed: 21000n,\n     *         logs: [],\n     *         logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n     *         status: 1n,\n     *         effectiveGasPrice: 2000000000n,\n     *         type: 0n\n     *     },\n     *     latestBlockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548'\n     * }\n     * ```\n     * - `error`\n     * ```ts\n     * web3.eth.sendTransaction(transaction).on('error', error => console.log);\n     * > <Some TransactionError>\n     * ```\n     */\n    sendTransaction(transaction, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT, options) {\n        return rpcMethodsWrappers.sendTransaction(this, transaction, returnFormat, options);\n    }\n    /**\n     * @param transaction Signed transaction in one of the valid {@link Bytes} format.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @param options A configuration object used to change the behavior of the method\n     * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\n     * ```ts\n     * const signedTransaction = \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n     *\n     * const transactionHash = await web3.eth.sendSignedTransaction(signedTransaction);\n     * console.log(transactionHash);\n     * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n     *\n     * web3.eth.sendSignedTransaction(signedTransaction).then(console.log);\n     * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n     *\n     * web3.eth.sendSignedTransaction(signedTransaction).catch(console.log);\n     * > <Some TransactionError>\n     * ```\n     *\n     *\n     * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\n     * - `sending`\n     * ```ts\n     * web3.eth.sendSignedTransaction(signedTransaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\n     * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n     * ```\n     * - `sent`\n     * ```ts\n     * web3.eth.sendSignedTransaction(signedTransaction).on('sent', sentTransaction => console.log(sentTransaction));\n     * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n     * ```\n     * - `transactionHash`\n     * ```ts\n     * web3.eth.sendSignedTransaction(signedTransaction).on('transactionHash', transactionHash => console.log(transactionHash));\n     * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n     * ```\n     * - `receipt`\n     * ```ts\n     * web3.eth.sendSignedTransaction(signedTransaction).on('receipt', receipt => console.log(receipt));\n     * > {\n     *      blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\n     *      blockNumber: 1n,\n     *      cumulativeGasUsed: 21000n,\n     *      effectiveGasPrice: 1000000001n,\n     *      from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n     *      gasUsed: 21000n,\n     *      logs: [],\n     *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n     *      status: 1n,\n     *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n     *      transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\n     *      transactionIndex: 0n,\n     *      type: 0n\n     * }\n     * ```\n     * - `confirmation`\n     * ```ts\n     * web3.eth.sendSignedTransaction(signedTransaction).on('confirmation', confirmation => console.log(confirmation));\n     * > {\n     *     confirmations: 1n,\n     *     receipt: {\n     *          blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\n     *          blockNumber: 1n,\n     *          cumulativeGasUsed: 21000n,\n     *          effectiveGasPrice: 1000000001n,\n     *          from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n     *          gasUsed: 21000n,\n     *          logs: [],\n     *          logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n     *          status: 1n,\n     *          to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n     *          transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\n     *          transactionIndex: 0n,\n     *          type: 0n\n     *     },\n     *     latestBlockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081'\n     * }\n     * ```\n     * - `error`\n     * ```ts\n     * web3.eth.sendSignedTransaction(signedTransaction).on('error', error => console.log(error));\n     * > <Some TransactionError>\n     * ```\n     */\n    sendSignedTransaction(transaction, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT, options) {\n        return rpcMethodsWrappers.sendSignedTransaction(this, transaction, returnFormat, options);\n    }\n    /**\n     * @param message Data to sign in one of the valid {@link Bytes} format.\n     * @param address Address to sign data with, can be an address or the index of a local wallet.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns The signed `message`.\n     *\n     * ```ts\n     * // Using an unlocked account managed by connected RPC client\n     * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\").then(console.log);\n     * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\n     *\n     * // Using an unlocked account managed by connected RPC client\n     * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.UINT8ARRAY }).then(console.log);\n     * > Uint8Array(65) [\n     *    48, 117,  94, 214,  83, 150, 250, 207, 134, 197,  62,\n     *    98,  23, 197,  43,  77, 174, 190, 114, 170,  73,  65,\n     *   216, 150,  53,  64, 157, 228, 201, 199, 249,  70, 109,\n     *    78, 154, 174, 199, 151, 127,   5, 233,  35, 136, 155,\n     *    51, 192, 208, 221,  39, 215,  34, 107, 110, 111,  86,\n     *   206, 115, 116, 101, 197, 207, 208,  75, 228,   0\n     * ]\n     * ```\n     *\n     * // Using an indexed account managed by local Web3 wallet\n     * web3.eth.sign(\"0x48656c6c6f20776f726c64\", 0).then(console.log);\n     * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\n     */\n    sign(message, addressOrIndex, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.sign(this, message, addressOrIndex, returnFormat);\n        });\n    }\n    /**\n     * @param transaction The transaction object to sign.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n     * @returns {@link SignedTransactionInfoAPI}, an object containing the [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n     *\n     * ```ts\n     * const transaction = {\n     *      from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n     *      to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n     *      value: '0x1',\n     *      gas: '21000',\n     *      gasPrice: await web3Eth.getGasPrice(),\n     *      nonce: '0x1',\n     *      type: '0x0'\n     * }\n     *\n     * web3.eth.signTransaction(transaction).then(console.log);\n     * > {\n     *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n     *   tx: {\n     *      type: 0n,\n     *      nonce: 1n,\n     *      gasPrice: 1000000001n,\n     *      gas: 21000n,\n     *      value: 1n,\n     *      v: 2710n,\n     *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\n     *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n     *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n     *      data: '0x'\n     *   }\n     * }\n     *\n     * web3.eth.signTransaction(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n     * > {\n     *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n     *   tx: {\n     *      type: 0,\n     *      nonce: 1,\n     *      gasPrice: 1000000001,\n     *      gas: 21000,\n     *      value: 1,\n     *      v: 2710,\n     *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\n     *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n     *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n     *      data: '0x'\n     *   }\n     * }\n     * ```\n     */\n    signTransaction(transaction, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.signTransaction(this, transaction, returnFormat);\n        });\n    }\n    // TODO Decide what to do with transaction.to\n    // https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n    /**\n     * Executes a message call within the EVM without creating a transaction.\n     * It does not publish anything to the blockchain and does not consume any gas.\n     *\n     * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.\n     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n     * @returns The returned data of the call, e.g. a smart contract function's return value.\n     */\n    call(transaction, blockNumber = this.defaultBlock, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.call(this, transaction, blockNumber, returnFormat);\n        });\n    }\n    /**\n     * Simulates the transaction within the EVM to estimate the amount of gas to be used by the transaction.\n     * The transaction will not be added to the blockchain, and actual gas usage can vary when interacting\n     * with a contract as a result of updating the contract's state.\n     *\n     * @param transaction The {@link Transaction} object to estimate the gas for.\n     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n     * @returns The used gas for the simulated transaction execution.\n     *\n     * ```ts\n     * const transaction = {\n     *       from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n     *       to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n     *       value: '0x1',\n     *       nonce: '0x1',\n     *       type: '0x0'\n     * }\n     *\n     * web3.eth.estimateGas(transaction).then(console.log);\n     * > 21000n\n     *\n     * web3.eth.estimateGas(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n     * > 21000\n     * ```\n     */\n    estimateGas(transaction, blockNumber = this.defaultBlock, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.estimateGas(this, transaction, blockNumber, returnFormat);\n        });\n    }\n    /**\n     * Gets past logs, matching the provided `filter`.\n     *\n     * @param filter A {@link Filter} object containing the properties for the desired logs.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n     * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.\n     *\n     * ```ts\n     * web3.eth.getPastLogs({\n     *      address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n     *      topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\n     *  }).then(console.log);\n     * > [{\n     *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n     *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n     *       logIndex: 0n,\n     *       transactionIndex: 0n,\n     *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n     *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n     *       blockNumber: 1234n,\n     *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n     *   },\n     *   {...}]\n     *\n     * web3.eth.getPastLogs(\n     *     {\n     *       address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n     *       topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\n     *     },\n     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n     * ).then(console.log);\n     * > [{\n     *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n     *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n     *       logIndex: 0,\n     *       transactionIndex: 0,\n     *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n     *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n     *       blockNumber: 1234,\n     *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n     *   },\n     *   {...}]\n     * ```\n     */\n    getPastLogs(filter, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getLogs(this, filter, returnFormat);\n        });\n    }\n    /**\n     * Gets work for miners to mine on. Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').\n     *\n     * @returns The mining work as an array of strings with the following structure:\n     *\n     * String 32 Bytes - at index 0: current block header pow-hash\n     * String 32 Bytes - at index 1: the seed hash used for the DAG.\n     * String 32 Bytes - at index 2: the boundary condition ('target'), 2^256 / difficulty.\n     *\n     * ```ts\n     * web3.eth.getWork().then(console.log);\n     * > [\n     *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n     *     \"0x5EED00000000000000000000000000005EED0000000000000000000000000000\",\n     *     \"0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000\"\n     * ]\n     * ```\n     */\n    getWork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return web3_rpc_methods_1.ethRpcMethods.getWork(this.requestManager);\n        });\n    }\n    /**\n     * Used for submitting a proof-of-work solution.\n     *\n     * @param nonce The nonce found (8 bytes).\n     * @param hash  The header’s pow-hash (32 bytes).\n     * @param digest The mix digest (32 bytes).\n     * @returns Returns `true` if the provided solution is valid, otherwise `false`.\n     *\n     * ```ts\n     * web3.eth.submitWork([\n     *     \"0x0000000000000001\",\n     *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n     *     \"0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000\"\n     * ]).then(console.log);\n     * > true\n     * ```\n     */\n    submitWork(nonce, hash, digest) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return web3_rpc_methods_1.ethRpcMethods.submitWork(this.requestManager, nonce, hash, digest);\n        });\n    }\n    // TODO - Format addresses\n    /**\n     * This method will request/enable the accounts from the current environment and for supporting [EIP 1102](https://eips.ethereum.org/EIPS/eip-1102)\n     * This method will only work if you’re using the injected provider from a application like Metamask, Status or TrustWallet.\n     * It doesn’t work if you’re connected to a node with a default Web3.js provider (WebsocketProvider, HttpProvider and IpcProvider).\n     * For more information about the behavior of this method please read [EIP-1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md): Opt-in account exposure.\n     *\n     * @returns An array of enabled accounts.\n     *\n     * ```ts\n     * web3.eth.requestAccounts().then(console.log);\n     * > ['0aae0B295369a9FD31d5F28D9Ec85E40f4cb692BAf', '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe']\n     * ```\n     */\n    requestAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return web3_rpc_methods_1.ethRpcMethods.requestAccounts(this.requestManager);\n        });\n    }\n    /**\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n     * @returns The chain ID of the current connected node as described in the [EIP-695](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-695.md).\n     *\n     * ```ts\n     * web3.eth.getChainId().then(console.log);\n     * > 61n\n     *\n     * web3.eth.getChainId({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n     * > 61\n     * ```\n     */\n    getChainId(returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getChainId(this, returnFormat);\n        });\n    }\n    /**\n     * @returns The current client version.\n     *\n     * ```ts\n     * web3.eth.getNodeInfo().then(console.log);\n     * > \"Mist/v0.9.3/darwin/go1.4.1\"\n     * ```\n     */\n    getNodeInfo() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return web3_rpc_methods_1.ethRpcMethods.getNodeInfo(this.requestManager);\n        });\n    }\n    /**\n     * @param address The Address of the account or contract.\n     * @param storageKeys Array of storage-keys which should be proofed and included. See {@link web3.getStorageAt}.\n     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n     * @returns The account and storage-values of the specified account including the Merkle-proof as described in [EIP-1186](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1186.md).\n     *\n     * ```ts\n     * web3.eth.getProof(\n     *     \"0x1234567890123456789012345678901234567890\",\n     *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\n     *     \"latest\"\n     * ).then(console.log);\n     * > {\n     *     \"address\": \"0x1234567890123456789012345678901234567890\",\n     *     \"accountProof\": [\n     *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\n     *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\n     *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\n     *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\n     *     ],\n     *     \"balance\": 0n,\n     *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\n     *     \"nonce\": 0n,\n     *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\n     *     \"storageProof\": [\n     *         {\n     *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     *             \"value\": 0n,\n     *             \"proof\": []\n     *         },\n     *         {\n     *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\n     *             \"value\": 0n,\n     *             \"proof\": []\n     *         }\n     *     ]\n     * }\n     *\n     * web3.eth.getProof(\n     *     \"0x1234567890123456789012345678901234567890\",\n     *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\n     *     undefined,\n     *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n     * ).then(console.log);\n     * > {\n     *     \"address\": \"0x1234567890123456789012345678901234567890\",\n     *     \"accountProof\": [\n     *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\n     *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\n     *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\n     *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\n     *     ],\n     *     \"balance\": 0,\n     *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\n     *     \"nonce\": 0,\n     *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\n     *     \"storageProof\": [\n     *         {\n     *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     *             \"value\": 0,\n     *             \"proof\": []\n     *         },\n     *         {\n     *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\n     *             \"value\": 0,\n     *             \"proof\": []\n     *         }\n     *     ]\n     * }\n     * ```\n     */\n    getProof(address, storageKeys, blockNumber = this.defaultBlock, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getProof(this, address, storageKeys, blockNumber, returnFormat);\n        });\n    }\n    // TODO Throwing an error with Geth, but not Infura\n    // TODO gasUsedRatio and reward not formatting\n    /**\n     * @param blockCount Number of blocks in the requested range. Between `1` and `1024` blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\n     * @param newestBlock Highest number block of the requested range.\n     * @param rewardPercentiles A monotonically increasing list of percentile values to sample from each block’s effective priority fees per gas in ascending order, weighted by gas used. Example: `['0', '25', '50', '75', '100']` or `['0', '0.5', '1', '1.5', '3', '80']`\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n     * @returns `baseFeePerGas` and transaction effective `priorityFeePerGas` history for the requested block range if available.\n     * The range between `headBlock - 4` and `headBlock` is guaranteed to be available while retrieving data from the `pending` block and older history are optional to support.\n     * For pre-EIP-1559 blocks the `gasPrice`s are returned as `rewards` and zeroes are returned for the `baseFeePerGas`.\n     *\n     * ```ts\n     * web3.eth.getFeeHistory(4, 'pending', [0, 25, 75, 100]).then(console.log);\n     * > {\n     *     baseFeePerGas: [\n     *         22983878621n,\n     *         21417903463n,\n     *         19989260230n,\n     *         17770954829n,\n     *         18850641304n\n     *     ],\n     *     gasUsedRatio: [\n     *         0.22746546666666667,\n     *         0.2331871,\n     *         0.05610054885262125,\n     *         0.7430227268212117\n     *     ],\n     *     oldestBlock: 15216343n,\n     *     reward: [\n     *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\n     *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\n     *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\n     *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\n     *     ]\n     * }\n     *\n     * web3.eth.getFeeHistory(4, BlockTags.LATEST, [0, 25, 75, 100], { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n     * > {\n     *     baseFeePerGas: [\n     *         22983878621,\n     *         21417903463,\n     *         19989260230,\n     *         17770954829,\n     *         18850641304\n     *     ],\n     *     gasUsedRatio: [\n     *         0.22746546666666667,\n     *         0.2331871,\n     *         0.05610054885262125,\n     *         0.7430227268212117\n     *     ],\n     *     oldestBlock: 15216343,\n     *     reward: [\n     *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\n     *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\n     *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\n     *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\n     *     ]\n     * }\n     * ```\n     */\n    getFeeHistory(blockCount, newestBlock = this.defaultBlock, rewardPercentiles, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.getFeeHistory(this, blockCount, newestBlock, rewardPercentiles, returnFormat);\n        });\n    }\n    /**\n     * This method generates an access list for a transaction.\n     *\n     * @param transaction - A transaction object where all properties are optional except `from`, however it's recommended to include the `to` property.\n     * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the createAccessList should be formatted.\n     * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.\n     * @example\n     * ```ts\n     * web3.eth.createAccessList({\n     * from: '0xDe95305a63302C3aa4d3A9B42654659AeA72b694',\n     * data: '0x9a67c8b100000000000000000000000000000000000000000000000000000000000004d0',\n     * gasPrice: '0x3b9aca00',\n     * gas: '0x3d0900',\n     * to: '0x940b25304947ae863568B3804434EC77E2160b87'\n     * })\n     * .then(console.log);\n     *\n     * > {\n     *  \"accessList\": [\n     *     {\n     *       \"address\": \"0x15859bdf5aff2080a9968f6a410361e9598df62f\",\n     *       \"storageKeys\": [\n     *         \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n     *       ]\n     *     }\n     *   ],\n     *   \"gasUsed\": \"0x7671\"\n     * }\n     * ```\n     */\n    createAccessList(transaction, blockNumber = this.defaultBlock, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.createAccessList(this, transaction, blockNumber, returnFormat);\n        });\n    }\n    /**\n     * This method sends EIP-712 typed data to the RPC provider to be signed.\n     *\n     * @param address The address that corresponds with the private key used to sign the typed data.\n     * @param typedData The EIP-712 typed data object.\n     * @param useLegacy A boolean flag determining whether the RPC call uses the legacy method `eth_signTypedData` or the newer method `eth_signTypedData_v4`\n     * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the signed typed data should be formatted.\n     * @returns The signed typed data.\n     */\n    signTypedData(address, typedData, useLegacy = false, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return rpcMethodsWrappers.signTypedData(this, address, typedData, useLegacy, returnFormat);\n        });\n    }\n    /**\n    * Lets you subscribe to specific events in the blockchain.\n    *\n    * @param name - The subscription you want to subscribe to.\n    * @param args - Optional additional parameters, depending on the subscription type.\n    * @returns A subscription object of type {@link RegisteredSubscription}. The object contains:\n    *  - subscription.id: The subscription id, used to identify and unsubscribing the subscription.\n    *  - subscription.subscribe(): Can be used to re-subscribe with the same parameters.\n    *  - subscription.unsubscribe(): Unsubscribes the subscription and returns TRUE in the callback if successful.\n    *  - subscription.args: The subscription arguments, used when re-subscribing.\n    *\n    *\n    * You can use the subscription object to listen on:\n    *\n    * - on(\"data\") - Fires on each incoming log with the log object as argument.\n    * - on(\"changed\") - Fires on each log which was removed from the blockchain. The log will have the additional property \"removed: true\".\n    * - on(\"error\") - Fires when an error in the subscription occurs.\n    * - on(\"connected\") - Fires once after the subscription successfully connected. Returns the subscription id.\n    *\n    * @example **Subscribe to Smart Contract events**\n    * ```ts\n    * // Subscribe to `logs`\n    * const logSubscription = web3.eth.subscribe('logs', {\n    *     address: '0x1234567890123456789012345678901234567890',\n    *     topics: ['0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234']\n    * });\n    * logSubscription.on('data', (data: any) => console.log(data));\n    * logSubscription.on('error', (error: any) => console.log(error));\n    *\n    * ```\n    *\n    * @example **Subscribe to new block headers**\n    * ```ts\n    * // Subscribe to `newBlockHeaders`\n    * const newBlocksSubscription = await web3.eth.subscribe('newBlockHeaders');\n    *\n    * newBlocksSubscription.on('data', async blockhead => {\n    * \tconsole.log('New block header: ', blockhead);\n    *\n    * \t// You do not need the next line, if you like to keep notified for every new block\n    * \tawait newBlocksSubscription.unsubscribe();\n    * \tconsole.log('Unsubscribed from new block headers.');\n    * });\n    * newBlocksSubscription.on('error', error =>\n    * \tconsole.log('Error when subscribing to New block header: ', error),\n    * );\n    * ```\n    *\n    * \t### subscribe('pendingTransactions')\n    *\n    * Subscribes to incoming pending transactions.\n    * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').\n    *\n    * ```ts\n    * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);\n    * ```\n    *\n    * ### subscribe('newHeads')\n    * ( same as subscribe('newBlockHeaders'))\n    * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\n    *\n    * The structure of a returned block header is {@link BlockHeaderOutput}:\n    *\n    * ```ts\n    * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well\n    *  'data',\n    * console.log\n    * );\n    * >{\n    * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',\n    * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n    * miner: '0x0000000000000000000000000000000000000000',\n    * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',\n    * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',\n    * logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n    * difficulty: 2n,\n    * number: 21n,\n    * gasLimit: 11738125n,\n    * gasUsed: 830006n,\n    * timestamp: 1678797237n,\n    * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',\n    * nonce: 0n\n    * }\n    * ```\n    *\n    * ### subscribe('syncing')\n    * Subscribe to syncing events. This will return `true` when the node is syncing and when it’s finished syncing will return `false`, for the `changed` event.\n    *\n    * ```ts\n    * (await web3.eth.subscribe('syncing')).on('changed', console.log);\n    * > `true` // when syncing\n    *\n    * (await web3.eth.subscribe('syncing')).on('data', console.log);\n    * > {\n    *      startingBlock: 0,\n    *      currentBlock: 0,\n    *      highestBlock: 0,\n    *      pulledStates: 0,\n    *      knownStates: 0\n    *   }\n    * ```\n    *\n    * ### subscribe('logs', options)\n    * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.\n    *\n    * options: You can subscribe to logs matching a given filter object, which can take the following parameters:\n    * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.\n    * - `address`: (optional) Contract address or a list of addresses from which logs should originate.\n    * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.\n    *\n    * ```ts\n    *  (await web3.eth.subscribe('logs', {\n    *    address: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n    *   })).on('data', console.log);\n    *\n    * > {\n    * removed: false,\n    * logIndex: 119n,\n    * transactionIndex: 58n,\n    * transactionHash: '0x61533efa77937360215069d5d6cb0be09a22af9721e6dc3df59d957833ed8870',\n    * blockHash: '0xe32bb97084479d32247f66f8b46d00af2fbc3c2db2bc6e5843fe2e4d1ca9b099',\n    * blockNumber: 18771966n,\n    * address: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n    * data: '0x00000000000000000000000000000000000000000000000000000000d88b2e40',\n    * topics: [\n    * '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n    * '0x0000000000000000000000002fb2457f6ec1865dc0d4e7300c696b69c2a1b989',\n    * '0x00000000000000000000000027fd43babfbe83a81d14665b1a6fb8030a60c9b4'\n    * ]\n    * }\n    *```\n    */\n    subscribe(name, args, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const subscription = yield ((_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe(name, args, returnFormat));\n            if (subscription instanceof web3_subscriptions_js_1.LogsSubscription &&\n                name === 'logs' &&\n                typeof args === 'object' &&\n                !(0, web3_utils_1.isNullish)(args.fromBlock) &&\n                Number.isFinite(Number(args.fromBlock))) {\n                setImmediate(() => {\n                    this.getPastLogs(args)\n                        .then(logs => {\n                        for (const log of logs) {\n                            subscription._processSubscriptionResult(log);\n                        }\n                    })\n                        .catch(e => {\n                        subscription._processSubscriptionError(e);\n                    });\n                });\n            }\n            return subscription;\n        });\n    }\n    static shouldClearSubscription({ sub }) {\n        return !(sub instanceof web3_subscriptions_js_1.SyncingSubscription);\n    }\n    /**\n     * Resets subscriptions.\n     *\n     * @param notClearSyncing If `true` it keeps the `syncing` subscription.\n     * @returns A promise to an array of subscription ids that were cleared.\n     *\n     * ```ts\n     * web3.eth.clearSubscriptions().then(console.log);\n     * > [...] An array of subscription ids that were cleared\n     * ```\n     */\n    clearSubscriptions(notClearSyncing = false) {\n        var _a;\n        return (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.unsubscribe(\n        // eslint-disable-next-line\n        notClearSyncing ? Web3Eth.shouldClearSubscription : undefined);\n    }\n}\nexports.Web3Eth = Web3Eth;\n//# sourceMappingURL=web3_eth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/web3_eth.js\n");

/***/ }),

/***/ "(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/web3_subscriptions.js":
/*!********************************************************************************!*\
  !*** ./src/pages/api/node_modules/web3-eth/lib/commonjs/web3_subscriptions.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SyncingSubscription = exports.NewHeadsSubscription = exports.NewPendingTransactionsSubscription = exports.LogsSubscription = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/* eslint-disable-next-line max-classes-per-file */\nconst web3_utils_1 = __webpack_require__(/*! web3-utils */ \"(api)/./src/pages/api/node_modules/web3-utils/lib/commonjs/index.js\");\nconst web3_core_1 = __webpack_require__(/*! web3-core */ \"(api)/./src/pages/api/node_modules/web3-core/lib/commonjs/index.js\");\nconst schemas_js_1 = __webpack_require__(/*! ./schemas.js */ \"(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/schemas.js\");\n/**\n * ## subscribe('logs')\n * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.\n *\n * You can subscribe to logs matching a given filter object, which can take the following parameters:\n * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.\n * - `address`: (optional) Contract address or a list of addresses from which logs should originate.\n * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.\n *\n */\nclass LogsSubscription extends web3_core_1.Web3Subscription {\n    _buildSubscriptionParams() {\n        return ['logs', this.args];\n    }\n    formatSubscriptionResult(data) {\n        return (0, web3_utils_1.format)(schemas_js_1.logSchema, data, super.returnFormat);\n    }\n}\nexports.LogsSubscription = LogsSubscription;\n/**\n * ## subscribe('pendingTransactions')\n * Subscribes to incoming pending transactions.\n *\n * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').\n * @example\n * ```ts\n * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);\n * ```\n */\nclass NewPendingTransactionsSubscription extends web3_core_1.Web3Subscription {\n    // eslint-disable-next-line\n    _buildSubscriptionParams() {\n        return ['newPendingTransactions'];\n    }\n    formatSubscriptionResult(data) {\n        return (0, web3_utils_1.format)({ format: 'string' }, data, super.returnFormat);\n    }\n}\nexports.NewPendingTransactionsSubscription = NewPendingTransactionsSubscription;\n/**\n * ## subscribe('newHeads') ( same as subscribe('newBlockHeaders'))\n *\n * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\n *\n * The structure of a returned block header is {@link BlockHeaderOutput}:\n * @example\n * ```ts\n * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well\n *  'data',\n * console.log\n * );\n * >{\n * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',\n * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n * miner: '0x0000000000000000000000000000000000000000',\n * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',\n * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',\n * logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n * difficulty: 2n,\n * number: 21n,\n * gasLimit: 11738125n,\n * gasUsed: 830006n,\n * timestamp: 1678797237n,\n * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',\n * nonce: 0n\n * }\n * ```\n */\nclass NewHeadsSubscription extends web3_core_1.Web3Subscription {\n    // eslint-disable-next-line\n    _buildSubscriptionParams() {\n        return ['newHeads'];\n    }\n    formatSubscriptionResult(data) {\n        return (0, web3_utils_1.format)(schemas_js_1.blockHeaderSchema, data, super.returnFormat);\n    }\n}\nexports.NewHeadsSubscription = NewHeadsSubscription;\n/**\n * ## subscribe('syncing')\n *\n * Subscribe to syncing events. This will return `true` when the node is syncing and when it’s finished syncing will return `false`, for the `changed` event.\n * @example\n * ```ts\n * (await web3.eth.subscribe('syncing')).on('changed', console.log);\n * > `true` // when syncing\n *\n * (await web3.eth.subscribe('syncing')).on('data', console.log);\n * > {\n *      startingBlock: 0,\n *      currentBlock: 0,\n *      highestBlock: 0,\n *      pulledStates: 0,\n *      knownStates: 0\n *   }\n * ```\n */\nclass SyncingSubscription extends web3_core_1.Web3Subscription {\n    // eslint-disable-next-line\n    _buildSubscriptionParams() {\n        return ['syncing'];\n    }\n    _processSubscriptionResult(data) {\n        if (typeof data === 'boolean') {\n            this.emit('changed', data);\n        }\n        else {\n            const mappedData = Object.fromEntries(Object.entries(data.status).map(([key, value]) => [\n                key.charAt(0).toLowerCase() + key.substring(1),\n                value,\n            ]));\n            this.emit('changed', data.syncing);\n            this.emit('data', (0, web3_utils_1.format)(schemas_js_1.syncSchema, mappedData, super.returnFormat));\n        }\n    }\n}\nexports.SyncingSubscription = SyncingSubscription;\n//# sourceMappingURL=web3_subscriptions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/node_modules/web3-eth/lib/commonjs/web3_subscriptions.js\n");

/***/ })

};
;